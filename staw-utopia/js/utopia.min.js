function wrapInterceptors(a, b, c) {
	var b = b.type ? "[" + b.type + "] " + b.name : b;
	(a instanceof Function || !a.length) && (a = [a]), $.each(a, function (a, d) {
		d instanceof Function ? c.push({
			fn: d,
			priority: 50,
			source: b
		}) : d.fn ? (d.priority = d.priority || 50, d.source = d.source || b, c.push(d)) : console.log("Invalid interceptor", d)
	})
}
var module = angular.module("utopia-dragdrop", []);
module.directive("draggable", function () {
	return {
		scope: {
			dragItem: "=",
			dragStore: "=",
			dragSource: "="
		},
		link: function (a, b) {
			b.prop("draggable", !0), b.on("dragstart", function (c) {
				a.$apply(function () {
					a.dragStore.item = a.dragItem, a.dragStore.source = a.dragSource
				}), b.addClass("dragging"), c.originalEvent.dataTransfer.effectAllowed = "move", c.originalEvent.dataTransfer.setData("text/plain", "google")
			}), b.on("dragend", function (c) {
				b.removeClass("dragging"), a.$apply(function (a) {
					delete a.dragStore.item, delete a.dragStore.source
				})
			}), b.on("click", function (b) {
				return a.$apply(function () {
					a.dragStore.item != a.dragItem ? (a.dragStore.item = a.dragItem, a.dragStore.source = a.dragSource) : delete a.dragStore.item
				}), b.preventDefault(), !1
			})
		}
	}
}), module.directive("droppable", function () {
	return {
		scope: {
			drop: "&",
			canDrop: "&",
			dragStore: "="
		},
		link: function (a, b) {
			b.on("dragover", function (c) {
				a.canDrop({
					$item: a.dragStore.item
				}) && (b.addClass("drag-over"), c.preventDefault())
			}), b.on("dragenter", function (c) {
				a.canDrop({
					$item: a.dragStore.item
				}) && b.addClass("drag-over")
			}), b.on("dragleave", function (a) {
				b.removeClass("drag-over")
			}), b.on("drop", function (c) {
				b.removeClass("drag-over"), a.$apply(function (a) {
					a.drop({
						$item: a.dragStore.item
					}), delete a.dragStore.item
				}), c.preventDefault()
			}), b.on("click", function (b) {
				a.$apply(function () {
					a.dragStore.item && (a.drop({
						$item: a.dragStore.item
					}), delete a.dragStore.item)
				}), b.preventDefault()
			})
		}
	}
});
var module = angular.module("utopia-fleet-builder", ["utopia-card-upgrade", "utopia-dragdrop"]);
module.directive("fleetBuilder", ["$filter", function (a) {
	return {
		scope: {
			fleet: "=",
			cards: "=",
			searchOptions: "=",
			dragStore: "="
		},
		templateUrl: "fleet-builder.html",
		controller: ["$scope", "isMobile", function (b, c) {
			function d(a, b) {
				return b && a.unique && b.unique && a.name == b.name && a.mirror == b.mirror ? b : !1
			}

			function e(a) {
				if (!a) return {};
				var b = {
					id: a.type + ":" + a.id
				};
				a.resource && (b.resource = e(a.resource)), a.captain && (b.captain = e(a.captain)), a.admiral && (b.admiral = e(a.admiral));
				var c = [];
				$.each(a.upgrades || [], function (a, b) {
					var d = {};
					b.occupant && (d = e(b.occupant)), c.push(d)
				}), c.length > 0 && (b.upgrades = c);
				var d = [];
				return $.each(a.upgradeSlots || [], function (a, b) {
					var c = {};
					b.occupant && (c = e(b.occupant)), d.push(c)
				}), d.length > 0 && (b.upgradeSlots = d), b
			}

			function f(a, c, d, e) {
				var g = angular.copy(b.findCardById(c, d.id));
				if (!g) return console.log("unable to load card", d.id), !1;
				var h = function (g) {
					if (d.resource) {
						var h = f(a, c, d.resource, g);
						if (h) {
							var i = b.setShipResource(a, g, h.card);
							i && h.promulgate(i)
						}
					}
					if (d.captain) {
						var h = f(a, c, d.captain, g);
						if (h) {
							var j = b.setShipCaptain(a, g, h.card);
							j && h.promulgate(j)
						}
					}
					if (d.admiral) {
						var h = f(a, c, d.admiral, g);
						if (h) {
							var k = b.setShipAdmiral(a, g, h.card);
							k && h.promulgate(k)
						}
					}
					$.each(d.upgrades || [], function (d, e) {
						if (e && e.id) {
							var h = f(a, c, e, g);
							if (!h) return;
							var i = b.setUpgrade(a, g, g.upgrades[d], h.card);
							if (!i) return;
							h.promulgate(i)
						}
					}), $.each(d.upgradeSlots || [], function (d, h) {
						if (h && h.id) {
							var i = f(a, c, h, e || g);
							if (!i) return;
							var j = b.setUpgrade(a, e || g, g.upgradeSlots[d], i.card);
							if (!j) return;
							i.promulgate(j)
						}
					})
				};
				return {
					card: g,
					promulgate: h
				}
			}
			b.isMobile = c, b.$watch("fleet", function (a) {
				location.hash = btoa(angular.toJson(b.saveFleet(a)))
			}, !0), b.$on("removeFromFleet", function (a, c) {
				b.removeFromFleet(c, b.fleet)
			}), b.$on("zoom", function (a, c) {
				b.zoom = c
			}), b.setSearchTypes = function (a) {
				$.each(b.searchOptions.types, function (b, c) {
					c.search = $.inArray(b, a) >= 0
				}), b.searchOptions.columns < 1 && (b.searchOptions.columns = 1)
			}, b.addFleetShip = function (a, c) {
				var d = b.findOtherInFleet(c, a),
					e = g(c, "canJoinFleet", c, a);
				return e ? d && d != c ? (console.log("upgrade uniquenes check failed"), !1) : (d && b.removeFromFleet(d, a), c = angular.copy(c), a.ships.push(c), c) : (console.log("joinFleet stopped by interceptor"), !1)
			}, b.getUpgradeSlots = a("upgradeSlots"), b.isUpgradeCompatible = function (a, b, c, d) {
				if (a == b.occupant) return !1;
				var e = g(b, "type", c, d);
				return "question" == a.type ? a.isSlotCompatible && a.isSlotCompatible(e) : $.inArray(a.type, e) >= 0
			};
			var g = a("valueOf");
			b.setUpgrade = function (a, c, d, e) {
				if (!b.isUpgradeCompatible(e, d, c, a)) return console.log("wrong slot type"), !1;
				if (d.occupant == e) return !1;
				var f = g(e, "canEquip", c, a, d);
				if (!f) return console.log("equip stopped by special card rule"), !1;
				var h = g(e, "canEquipFaction", c, a, d);
				if (!h) return console.log("equip stopped by faction-specific special card rule"), !1;
				if (d.canEquip && !d.canEquip(e, c, a, d)) return console.log("upgrade rejected by slot"), !1;
				var i = b.findOtherInFleet(e, a);
				return i && i != e && i != d.occupant ? (console.log("upgrade uniquenes check failed"), !1) : (i && i != d.occupant && b.removeFromFleet(i, a, d.occupant), d.occupant = angular.copy(e), g(d.occupant, "onEquip", c, a), d.occupant)
			}, b.setShipResource = function (a, c, d) {
				if (!a.resource || d.type != a.resource.slotType) return !1;
				var e = g(d, "canEquip", c, a);
				if (!e) return console.log("equip stopped by special card rule"), !1;
				var f = b.findOtherInFleet(d, a);
				return f && f != upgrade && f != c.resource ? (console.log("upgrade uniquenes check failed"), !1) : (c.resource = angular.copy(d), c.resource)
			}, b.setShipCaptain = function (a, c, d) {
				if ("captain" != d.type) return console.log("card is not a captain"), !1;
				var e = g(d, "canEquipCaptain", c, a);
				if (!e) return console.log("equip stopped by interceptor"), !1;
				var f = b.findOtherInFleet(d, a);
				return f && f != d && f != c.captain ? (console.log("captain already in fleet"), !1) : (f && f != c.captain && b.removeFromFleet(f, a, c.captain), c.captain = angular.copy(d), c.captain)
			}, b.fleetHasAdmiral = function (a) {
				var b = !1;
				return $.each(a.ships, function (a, c) {
					return c.admiral ? (b = !0, !1) : void 0
				}), b
			}, b.setShipAdmiral = function (a, c, d) {
				if ("admiral" != d.type) return !1;
				var e = g(d, "canEquipAdmiral", c, a);
				if (!e) return console.log("equip stopped by interceptor"), !1;
				var f = b.findOtherInFleet(d, a);
				return f && f != d && f != c.admiral ? (console.log("admiral already in fleet"), !1) : (f && f != c.admiral && b.removeFromFleet(f, a, c.admiral), c.admiral = angular.copy(d), c.admiral)
			}, b.findOtherInFleet = function (a, c) {
				var e = !1;
				return $.each(c.ships, function (c, f) {
					return a == f || d(a, f) ? (e = f, !1) : a == f.captain || d(a, f.captain) ? (e = f.captain, !1) : a == f.admiral || d(a, f.admiral) ? (e = f.admiral, !1) : ($.each(b.getUpgradeSlots(f), function (b, c) {
						return a == c.occupant || d(a, c.occupant) ? (e = c.occupant, !1) : void 0
					}), e ? !1 : void 0)
				}), c.resource && $.each(c.resource.upgradeSlots || [], function (b, c) {
					return a == c.occupant || d(a, c.occupant) ? (e = c.occupant, !1) : void 0
				}), e
			}, b.removeFromFleet = function (a, c, d) {
				return a ? (a == c.resource && delete c.resource, c.resource && $.each(c.resource.upgradeSlots || [], function (c, e) {
					return a == e.occupant ? (d && b.isUpgradeCompatible(d, e) ? e.occupant = d : delete e.occupant, found = !0, !1) : void 0
				}), $.each(c.ships, function (e, f) {
					if (a == f) return d && "ship" == d.type ? c.ships[e] = d : c.ships.splice(e, 1), !1;
					if (a == f.resource) return delete f.resource, !1;
					if (a == f.captain) return d && "captain" == d.type ? f.captain = d : delete f.captain, !1;
					if (a == f.admiral) return d && "admiral" == d.type ? f.admiral = d : delete f.admiral, !1;
					var g = !1;
					return $.each(b.getUpgradeSlots(f), function (c, e) {
						return a == e.occupant ? (d && b.isUpgradeCompatible(d, e) ? e.occupant = d : delete e.occupant, g = !0, !1) : void 0
					}), !g
				}), void g(a, "onRemove", {}, c)) : !1
			}, b.getTotalCost = function (c, d) {
				var e = a("valueOf"),
					f = c.cost;
				return c.resource && (e(c.resource, "free", c, d) || (f += e(c.resource, "cost", c, d))), c.captain && (e(c.captain, "free", c, d) || (f += e(c.captain, "cost", c, d))), c.admiral && (e(c.admiral, "free", c, d) || (f += e(c.admiral, "cost", c, d))), $.each(b.getUpgradeSlots(c), function (a, b) {
					b.occupant && (e(b.occupant, "free", c, d) || (f += e(b.occupant, "cost", c, d)))
				}), f
			}, b.getFleetCost = function (a) {
				var c = a.resource ? g(a.resource, "cost", {}, a) : 0;
				return $.each(a.ships, function (d, e) {
					c += b.getTotalCost(e, a)
				}), c
			}, b.setFleetResource = function (a, c) {
				a.resource && b.removeFromFleet(a.resource, a), a.resource = c
			}, b.saveFleet = function (a) {
				var b = {
					ships: []
				};
				return a.resource && (b.resource = e(a.resource)), $.each(a.ships, function (a, c) {
					b.ships.push(e(c))
				}), b
			}, b.findCardById = function (a, b) {
				var c = !1;
				return $.each(a, function (a, d) {
					return d.type + ":" + d.id == b ? (c = d, !1) : void 0
				}), c
			}, b.loadFleet = function (a, c) {
				var d = {
					ships: []
				};
				return c.resource && (result = f(d, a, c.resource), result && (d.resource = result.card, result.promulgate(d.resource))), $.each(c.ships, function (c, e) {
					var g = f(d, a, e);
					if (g) {
						var h = b.addFleetShip(d, g.card);
						h && g.promulgate(h)
					}
				}), d
			};
			var h = !1;
			try {
				h = location.hash ? angular.fromJson(atob(location.hash.substring(1))) : !1
			} catch (i) {}
			b.$on("cardsLoaded", function () {
				h && (h = b.loadFleet(b.cards, h), h && (b.fleet = h, b.fleet.ships.length > 0 && ($.each(h.ships, function (a, b) {
					b.hideEmptySlots = !0
				}), b.searchOptions.columns = 0)))
			})
		}]
	}
}]);
var module = angular.module("utopia-fleet-export", []);
module.directive("fleetExport", function () {
	return {
		scope: {
			fleet: "=",
			sets: "=",
			searchOptions: "="
		},
		templateUrl: "fleet-export.html",
		link: function (a, b) {
			$(b).find("textarea").focus(function () {
				$this = $(this), $this.select(), window.setTimeout(function () {
					$this.select()
				}, 1), $this.mouseup(function () {
					return $this.unbind("mouseup"), !1
				})
			})
		},
		controller: ["$scope", "$filter", function (a, b) {
			function c(b) {
				var c = "",
					d = 0;
				if ($.each(b.ships, function (a, f) {
						var g = e(f, f, b);
						c += g.text + "Ship Total: " + g.cost + " SP\n\n", d += g.cost
					}), b.resource) {
					var f = e(b.resource, {}, b);
					c += "Resource: " + f.text + "\n", d += f.cost
				}
				c += "Fleet Total: " + d + " SP\n\n", c += "Generated by Utopia\nhttp://kfnexus.github.io/staw-utopia/", a.fleetText = c
			}

			function d(b) {
				var c = "";
				return $.each(b, function (d, e) {
					c += a.sets[e] ? a.sets[e].name : e, d < b.length - 1 && (c += ", ")
				}), c
			}

			function e(b, c, g, h, i) {
				var j = "";
				h = h || 0;
				for (var k = 0; h > k; k++) j += "- ";
				var l = f(b, "cost", c, g),
					m = f(b, "free", c, g),
					n = !0;
				if ("resource" == b.type && (n = !1), j += b.name, "captain" == b.type && (j += " " + b.skill + " (Captain)"), "admiral" == b.type && (j += " (Admiral)"), "fleet-captain" == b.type && (j += " Fleet Captain"), "flagship" == b.type && (j += " Flagship"), "faction" == b.type && (j += " Faction"), "ship" == b.type ? j += b.unique ? "" : " (" + b["class"] + ")" : a.showSetNames && (j += b.set ? " (" + d(b.set) + ")" : ""), m && (l = 0), i || (j += " [" + l + "]"), j += "\n", b.resource) {
					var o = e(b.resource, c, g, h + 1);
					j += o.text, l += o.cost
				}
				if (b.captain) {
					var o = e(b.captain, c, g, h + 1);
					j += o.text, l += o.cost
				}
				if (b.admiral) {
					var o = e(b.admiral, c, g, h + 1);
					j += o.text, l += o.cost
				}
				return $.each(b.upgrades || [], function (a, b) {
					if (b.occupant) {
						var d = e(b.occupant, c, g, h + 1);
						j += d.text, n && (l += d.cost)
					}
				}), $.each(b.upgradeSlots || [], function (a, b) {
					if (b.occupant) {
						var d = e(b.occupant, c, g, h + 1, !n);
						j += d.text, n && (l += d.cost)
					}
				}), {
					cost: l,
					text: j
				}
			}
			a.fleetText = "", a.showSetNames = !1;
			var f = b("valueOf");
			a.$watch("fleet", function (a) {
				c(a)
			}, !0), a.$watch("showSetNames", function () {
				c(a.fleet)
			})
		}]
	}
});
var module = angular.module("utopia-search", ["utopia-card", "utopia-dragdrop", "utopia-card-loader", "utopia-card-rules"]);
module.filter("cardFilter", ["$factions", "$filter", function (a, b) {
	return function (c, d) {
		var e = b("valueOf");
		return $.map(c, function (b) {
			if (d.unique && !b.unique && !d.generic) return null;
			if (d.generic && b.unique && !d.unique) return null;
			if (b.set && !d.ignoreSetsFilter && d.sets) {
				var c = !1;
				if ($.each(b.set, function (a, b) {
						d.sets[b].search && (c = !0)
					}), !c) return null
			}
			if (d.filterField && d.filterOperator && d.filterValue) {
				var f = e(b, d.filterField);
				if (!f) return null;
				switch (d.filterOperator) {
					case "<":
						if (f >= d.filterValue) return null;
						break;
					case "<=":
						if (f > d.filterValue) return null;
						break;
					case "=":
						if (f != d.filterValue) return null;
						break;
					case ">=":
						if (f < d.filterValue) return null;
						break;
					case ">":
						if (f <= d.filterValue) return null
				}
			}
			if (d.query && b.name.toLowerCase().indexOf(d.query.toLowerCase()) < 0 && (!b["class"] || b["class"].toLowerCase().indexOf(d.query.toLowerCase()) < 0) && b.text.toLowerCase().indexOf(d.query.toLowerCase()) < 0) return null;
			var g = !0;
			if ($.each(d.types, function (a, b) {
					return b.search ? (g = !1, !1) : void 0
				}), !g && !d.types[b.type].search) return null;
			if ("resource" == b.type) return b;
			var g = !0,
				h = !1;
			return $.each(d.factions, function (c, d) {
				d.search && (g = !1, h |= a.hasFaction(b, c))
			}), g || h ? b : null
		})
	}
}]), module.filter("sortBy", ["$filter", function (a) {
	return function (b, c, d) {
		return d = d === !0 || "true" == d, a("orderBy")(b, function (b) {
			var d = a("valueOf")(b, c);
			return d || 0
		}, !d)
	}
}]), module.directive("search", function () {
	return {
		scope: {
			cards: "=",
			sets: "=",
			setList: "=",
			dragStore: "=",
			search: "=searchOptions",
			defaults: "="
		},
		templateUrl: "search.html",
		controller: ["$scope", "$factions", function (a, b) {
			a.search = {
				query: "",
				unique: !1,
				generic: !1,
				factions: {},
				types: {
					ship: {},
					captain: {},
					admiral: {}
				},
				columns: 1,
				sortBy: "cost",
				ascending: "false",
				filterField: "",
				filterOperator: "<=",
				filterValue: ""
			}, a.defaults = localStorage.defaults ? angular.fromJson(localStorage.defaults) : {}, a.defaults.search ? angular.copy(a.defaults.search, a.search) : a.defaults.search = angular.copy(a.search), a.resetSearch = function () {
				a.search.query = "", a.search.unique = !1, a.search.generic = !1, $.each(a.search.factions, function (a, b) {
					b.search = !1
				}), $.each(a.search.types, function (a, b) {
					b.search = !1
				}), a.search.sortBy = a.defaults.search.sortBy || "name", a.search.ascending = a.defaults.search.ascending || "true", a.search.filterField = "", a.search.filterOperator = "<=", a.search.filterValue = ""
			}, a.modifySearchColumns = function (b) {
				a.search.columns += b, a.search.columns < 0 && (a.search.columns = 0), a.search.columns > 5 && (a.search.columns = 5)
			}, a.$watch("search", function () {
				a.resultLimit = 10
			}, !0), a.$watch("search.sets", function (a) {
				a && (localStorage.sets = angular.toJson(a))
			}, !0), a.$watch("defaults", function (a) {
				a && (localStorage.defaults = angular.toJson(a))
			}, !0), $.each(b.list, function (b, c) {
				a.search.factions[c.toLowerCase().replace(/ /g, "-")] = {}
			}), a.sortables = [{
				value: "name",
				name: "Name"
			}, {
				value: "cost",
				name: "Cost"
			}, {
				value: "attack",
				name: "Attack"
			}, {
				value: "agility",
				name: "Agility"
			}, {
				value: "hull",
				name: "Hull"
			}, {
				value: "shields",
				name: "Shields"
			}, {
				value: "skill",
				name: "Skill Value"
			}], a.$on("cardsLoaded", function () {
				$.each(a.cards, function (b, c) {
					a.search.types[c.type] || (a.search.types[c.type] = {})
				});
				try {
					a.search.sets = localStorage.sets ? angular.fromJson(localStorage.sets) : {}, a.defaults = localStorage.defaults ? angular.fromJson(localStorage.defaults) : {}
				} catch (b) {
					a.search.sets = {}, a.defaults = {}
				}
				$.each(a.sets, function (b, c) {
					a.search.sets[c.id] || (console.log("New set: " + c.name), a.search.sets[c.id] = {
						search: !0
					}), a.setList.push(c)
				})
			}), a.uncheckAllSets = function () {
				$.each(a.search.sets, function (a, b) {
					b.search = !1
				})
			}, a.checkAllSets = function () {
				$.each(a.search.sets, function (a, b) {
					b.search = !0
				})
			}
		}]
	}
}), module.directive("searchFilterGroup", function () {
	return {
		scope: {
			title: "@"
		},
		templateUrl: "search-filter-group.html",
		transclude: !0,
		link: function (a, b, c) {
			void 0 != c.open && (a.showContent = !0)
		}
	}
});
var module = angular.module("utopia-set-viewer", ["utopia"]);
module.controller("UtopiaSetCtrl", ["$scope", "$filter", "cardLoader", "$factions", function (a, b, c, d) {
	function e(a, b) {
		return a.cost > b.cost ? -1 : b.cost > a.cost ? 1 : 0
	}

	function f(a, b) {
		return "ship" == a.type && a.unique ? -1 : "ship" == b.type && b.unique ? 1 : a.type == b.type ? e(a, b) : "ship" == a.type ? -1 : "ship" == b.type ? 1 : "captain" == a.type ? -1 : "captain" == b.type ? 1 : "admiral" == a.type ? -1 : "admiral" == b.type ? 1 : "talent" == a.type ? -1 : "talent" == b.type ? 1 : "crew" == a.type ? -1 : "crew" == b.type ? 1 : "weapon" == a.type ? -1 : "weapon" == b.type ? 1 : "tech" == a.type ? -1 : "tech" == b.type ? 1 : 0
	}
	a.cards = [], a.sets = {}, a.setList = [], a.shipClasses = {}, a.token = {}, a.viewer = {}, a.activeSet = !1, a.setCards = [], c(a.cards, a.sets, a.shipClasses, a.token, function () {
		var b = location.hash ? location.hash.substring(1) : !1;
		$.each(Object.keys(a.sets), function (c, d) {
			var e = a.sets[d];
			(e.id == b || e.name == b) && (a.viewer.set = e), a.setList.push(e)
		})
	}), a.$watch("viewer.set", function (b) {
		a.setCards = [], b && (location.hash = b.id, $.each(a.cards, function (c, d) {
			$.inArray(b.id, d.set) >= 0 && a.setCards.push(d)
		}), a.setCards.sort(f))
	})
}]);
var module = angular.module("utopia-tooltip", []);
module.directive("tooltip", ["$filter", function (a) {
	return {
		scope: {
			tooltip: "&",
			tooltipPosition: "@",
			tooltipShow: "="
		},
		restrict: "A",
		link: function (b, c, d) {
			var e = !1;
			b.$watch("tooltipShow", function (d) {
				if (d && !e) {
					e = !0, $(c).data("powertipjq", $("<div></div>")), $(c).powerTip({
						placement: b.tooltipPosition || "ne-alt"
					});
					var f = a("icons");
					$(c).on("powerTipRender", function () {
						var a = $("<table class='card-tooltip'></table>");
						$.each(b.tooltip(), function (b, c) {
							a.append("<tr><td>" + f(c.source) + "</td><td>" + (c.value > 0 && b > 0 ? "+" : "") + c.value + "</tr>")
						}), $("#powerTip").html(a)
					}), b.$on("$destroy", function () {
						$(c).powerTip("destroy")
					})
				}
			})
		}
	}
}]);
var module = angular.module("utopia", ["ngSanitize", "utopia-search", "utopia-card", "utopia-fleet-builder", "utopia-fleet-export", "utopia-card-loader", "utopia-card-rules"]);
module.factory("isMobile", function () {
	var a = navigator.userAgent || navigator.vendor || window.opera;
	return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))
}), module.controller("UtopiaCtrl", ["$scope", "$filter", "cardLoader", "$factions", function (a, b, c, d) {
	a.defaults = {};
	try {
		a.defaults = localStorage.defaults ? angular.fromJson(localStorage.defaults) : !1
	} catch (e) {
		a.defaults = {}
	}
	a.drag = {}, a.cards = [], a.sets = {}, a.setList = [], a.shipClasses = {}, a.token = {}, a.activeFleet = {
		ships: []
	}, a.loading = !0, c(a.cards, a.sets, a.shipClasses, a.token, function () {
		a.$broadcast("cardsLoaded"), a.loading = !1
	}), a.$watch("defaults", function (a) {
		a && (localStorage.defaults = angular.toJson(a))
	}, !0), a.$on("removeFromFleetDropped", function (b, c) {
		a.$broadcast("removeFromFleet", c)
	}), a.keypress = function (b) {
		(26 == b.which || 122 == b.which && b.ctrlKey) && (a.zoom = !a.zoom, a.$broadcast("zoom", a.zoom))
	}
}]);
var module = angular.module("utopia-card-faction", []);
module.directive("cardFaction", function () {
	return {
		scope: {
			faction: "=",
			dragStore: "=",
			dragSource: "="
		},
		templateUrl: "card-faction.html",
		controller: ["$scope", function (a) {}]
	}
});
var module = angular.module("utopia-card-loader", ["utopia-card-rules", "utopia-card-ship", "utopia-card-upgrade", "utopia-card-resource", "utopia-card-faction", "utopia-card-token"]);
module.factory("cardLoader", ["$http", "$filter", "cardRules", "$factions", function (a, b, c, d) {
	var e = b("valueOf");
	return function (f, g, h, i, j) {
		function k(a, b) {
			var c = !1;
			return $.each(b, function (b, d) {
				return a.id == d.id && a.type == d.type ? (c = !0, !1) : void 0
			}), c
		}

		function l(a) {
			if (k(a, f)) return void console.log("Duplicate card definition ignored", a.id);
			a.mirror = d.hasFaction(a, "mirror-universe");
			for (var b = 0; b < a.upgrades.length; b++) "string" == typeof a.upgrades[b] && (a.upgrades[b] = {
				type: [a.upgrades[b]],
				source: "ship"
			});
			$.extend(!0, a, u), a.squadron && (a.canJoinFleet = function (a, b, c) {
				var d = 0,
					e = 0;
				return $.each(c.ships, function (a, b) {
					b.squadron ? e++ : b.hull >= 4 && d++
				}), d > e
			}), c[a.type + ":" + a.id] && $.extend(!0, a, c[a.type + ":" + a.id]), $.each(a.upgradeSlots || [], function (b, c) {
				c.source || (c.source = a.name)
			}), a.intercept.ship.cost ? a.intercept.ship.cost = [a.intercept.ship.cost] : a.intercept.ship.cost = [], a.intercept.ship.cost.push({
				source: "Faction Penalty",
				priority: 1,
				fn: function (a, b, c, f) {
					if (!d.match(a, b, b, c)) {
						var g = e(a, "factionPenalty", b, c);
						return (f instanceof Function ? f(a, b, c, 0) : f) + g
					}
					return f
				}
			}), f.push(a)
		}

		function m(a) {
			if (k(a, f)) return void console.log("Duplicate card definition ignored", a.id);
			$.extend(!0, a, v), void 0 == a.factionPenalty && (a.factionPenalty = 1), a.mirror = d.hasFaction(a, "mirror-universe"), a.upgradeSlots = [];
			for (var b = 0; b < a.talents; b++) a.upgradeSlots.push({
				type: ["talent"],
				source: a.name
			});
			c[a.type + ":" + a.id] && $.extend(!0, a, c[a.type + ":" + a.id]), $.each(a.upgradeSlots || [], function (b, c) {
				c.source || (c.source = a.name)
			}), f.push(a)
		}

		function n(a) {
			if (k(a, f)) return void console.log("Duplicate card definition ignored", a.id);
			$.extend(!0, a, w), void 0 == a.factionPenalty && (a.factionPenalty = 3), a.mirror = d.hasFaction(a, "mirror-universe"), a.upgradeSlots = [];
			for (var b = 0; b < a.talents; b++) a.upgradeSlots.push({
				type: ["talent"],
				source: a.name
			});
			a.intercept.ship.skill = function (b, c, d, e) {
				return b == c.captain && (e = (e instanceof Function ? e(b, c, d, 0) : e) + a.skill), e
			}, c[a.type + ":" + a.id] && $.extend(!0, a, c[a.type + ":" + a.id]), $.each(a.upgradeSlots || [], function (b, c) {
				c.source || (c.source = a.name)
			}), f.push(a)
		}

		function o(a) {
			return k(a, f) ? void console.log("Duplicate card definition ignored", a.id) : ($.extend(!0, a, x), void 0 == a.factionPenalty && (a.factionPenalty = 1), a.mirror = d.hasFaction(a, "mirror-universe"), c[a.type + ":" + a.id] && $.extend(!0, a, c[a.type + ":" + a.id]), $.each(a.upgradeSlots || [], function (b, c) {
				c.source || (c.source = a.name)
			}), void f.push(a))
		}

		function p(a) {
			$.extend(!0, a, y), c[a.type + ":" + a.id] && $.extend(!0, a, c[a.type + ":" + a.id]), f.push(a)
		}

		function q(a) {
			if ("fleet-captain" == a.type) {
				for (var d = 0; d < a.talentAdd; d++) a.upgradeSlots.push({
					type: ["talent"],
					source: "Fleet Captain",
					rules: "Free talent if Captain has an empty talent slot",
					showOnCard: !0,
					intercept: {
						ship: {
							cost: {
								priority: -1,
								fn: function (a, c, d, e) {
									if (!c.captain) return e;
									var f = b("upgradeSlots")(c.captain),
										g = !1;
									return $.each(f, function (a, b) {
										b.type.indexOf("talent") >= 0 && !b.occupant && (g = !0)
									}), g ? 0 : e
								}
							}
						}
					}
				});
				for (var d = 0; d < a.techAdd; d++) a.upgradeSlots.push({
					type: ["tech"],
					source: "Fleet Captain",
					showOnCard: !0
				});
				for (var d = 0; d < a.weaponAdd; d++) a.upgradeSlots.push({
					type: ["weapon"],
					source: "Fleet Captain",
					showOnCard: !0
				});
				for (var d = 0; d < a.crewAdd; d++) a.upgradeSlots.push({
					type: ["crew"],
					source: "Fleet Captain",
					showOnCard: !0
				});
				a.intercept.ship.skill = function (b, c, d, e) {
					return b == c.captain && (e = (e instanceof Function ? e(b, c, d, 0) : e) + a.skill), e
				}
			}
			if ("flagship" == a.type) {
				var e = a;
				e.intercept.ship = {
					attack: function (a, b, c, d) {
						return a == b && "flagship" != b.type ? (d instanceof Function ? d(a, b, c, 0) : d) + e.attack : d
					},
					agility: function (a, b, c, d) {
						return a == b && "flagship" != b.type ? (d instanceof Function ? d(a, b, c, 0) : d) + e.agility : d
					},
					hull: function (a, b, c, d) {
						return a == b && "flagship" != b.type ? (d instanceof Function ? d(a, b, c, 0) : d) + e.hull : d
					},
					shields: function (a, b, c, d) {
						return a == b && "flagship" != b.type ? (d instanceof Function ? d(a, b, c, 0) : d) + e.shields : d
					}
				}
			}
			if ("token" == a.type) {
				if (i[a.id]) return void console.log("Duplicate token", a.id, a.name);
				i[a.id] = a
			}
			c[a.type + ":" + a.id] && $.extend(!0, a, c[a.type + ":" + a.id]), f.push(a)
		}

		function r(a) {
			return g[a.id] ? void console.log("Duplicate set", a.id, a.name) : void(g[a.id] = a)
		}

		function s(a) {
			return h[a.id] ? void console.log("Duplicate ship class", a.id, a.name, h[a.id].name) : void(h[a.id] = a)
		}

		function t(a) {
			$.each(a || [], function (a, b) {
				$.each(f, function (a, c) {
					return c.id == b.of ? (c.set = c.set.concat(b.set), !1) : void 0
				})
			})
		}
		var u = {
				canJoinFleet: !0,
				intercept: {
					ship: {},
					fleet: {}
				}
			},
			v = {
				intercept: {
					ship: {},
					fleet: {}
				},
				canEquip: !0,
				canEquipCaptain: !0,
				canEquipFaction: !0,
				showType: !0
			},
			w = {
				intercept: {
					ship: {},
					fleet: {}
				},
				canEquip: !0,
				canEquipAdmiral: !0,
				canEquipFaction: !0,
				isSkillModifier: !0,
				showType: !0
			},
			x = {
				intercept: {
					ship: {},
					fleet: {}
				},
				canEquip: !0,
				canEquipFaction: !0
			},
			y = {
				intercept: {
					ship: {},
					fleet: {}
				},
				canEquip: !0,
				canEquipFaction: !0
			};
		a.get("data/data.json").success(function (a) {
			var b = [];
			$.each(a.sets || [], function (a, c) {
				"copy" == c.type ? b.push(c) : r(c)
			}), $.each(a.ships || [], function (a, c) {
				"copy" == c.type ? b.push(c) : l(c)
			}), $.each(a.shipClasses || [], function (a, c) {
				"copy" == c.type ? b.push(c) : s(c)
			}), $.each(a.captains || [], function (a, c) {
				"copy" == c.type ? b.push(c) : m(c)
			}), $.each(a.admirals || [], function (a, c) {
				"copy" == c.type ? b.push(c) : n(c)
			}), $.each(a.upgrades || [], function (a, c) {
				"copy" == c.type ? b.push(c) : o(c)
			}), $.each(a.resources || [], function (a, c) {
				"copy" == c.type ? b.push(c) : p(c)
			}), $.each(a.others || [], function (a, c) {
				"copy" == c.type ? b.push(c) : q(c)
			}), t(b), $.each(f, function (a, b) {
				"ship" == b.type && (b.classId && h[b.classId] ? b.classData = h[b.classId] : $.each(h, function (a, c) {
					return c.name == b["class"] ? (b.classId = a, b.classData = c, !1) : void 0
				}), b.classId && b.classData && h[b.classId] || console.log("No class for ship", b.id, b.name, b["class"], b.classId)), b.hasTokenInfo && i[b.tokenId] && (b.tokenData = i[b.tokenId])
			}), j && j()
		})
	}
}]);
var module = angular.module("utopia-card-resource", []);
module.directive("cardResource", function () {
	return {
		scope: {
			resource: "=",
			ship: "=",
			fleet: "=",
			dragStore: "=",
			dragSource: "="
		},
		templateUrl: "card-resource.html",
		controller: ["$scope", function (a) {}]
	}
});
var module = angular.module("utopia-card-rules", ["utopia-valueof"]);
module.filter("shipCardNamed", ["$filter", function (a) {
	var b = a("upgradeSlots");
	return function (a, c) {
		if (a.name == c) return a;
		if (a.captain && a.captain.name == c) return a.captain;
		var d = !1;
		return $.each(b(a), function (a, b) {
			return b.occupant && b.occupant.name == c ? (d = b.occupant, !1) : void 0
		}), d
	}
}]), module.filter("fleetCardNamed", ["$filter", function (a) {
	var b = a("shipCardNamed");
	return function (a, c) {
		if (!a) return !1;
		var d = !1;
		return $.each(a.ships, function (a, e) {
			return d = b(e, c), d ? !1 : void 0
		}), d
	}
}]), module.factory("$factions", ["$filter", function (a) {
	var b = a("valueOf"),
		c = {
			hasFaction: function (a, c, d, e) {
				return a ? $.inArray(c, b(a, "factions", d, e)) >= 0 : !1
			},
			match: function (a, c, d, e) {
				var f = !1;
				return $.each(b(a, "factions", d, e), function (a, g) {
					return $.each(b(c, "factions", d, e), function (a, b) {
						return g == b ? (f = !0, !1) : void 0
					}), f ? !1 : void 0
				}), f
			},
			list: ["Federation", "Klingon", "Romulan", "Dominion", "Borg", "Species 8472", "Kazon", "Xindi", "Bajoran", "Ferengi", "Vulcan", "Independent", "Mirror Universe", "Q Continuum"]
		};
	return c.listCodified = $.map(c.list, function (a) {
		return a.toLowerCase().replace(/ /g, "-")
	}), c
}]), module.factory("cardRules", ["$filter", "$factions", function (a, b) {
	var c = a("valueOf"),
		d = function (b) {
			return function (c, d, e) {
				var f = !1,
					g = a("upgradeSlots")(d);
				return $.each(g, function (a, d) {
					d.occupant && d.occupant != c && d.occupant.name == b && (f = !0)
				}), !f
			}
		},
		e = ["crew", "weapon", "tech", "talent", "question", "borg"],
		f = function (a) {
			return $.inArray(a.type, e) >= 0
		},
		g = function (a, b, c, d) {
			return d instanceof Function ? d(a, b, c) : d
		},
		h = b.hasFaction,
		j = function (a, b) {
			for (var c = [b], d = 1; a > d; d++) c.push(angular.copy(b));
			return c
		},
		k = function () {
			return {
				type: ["talent"],
				rules: "First Maje Only",
				hide: function (a, b, c) {
					return !h(b.captain, "kazon", b, c)
				},
				intercept: {
					ship: {
						canEquip: function (a, b, c, d) {
							return console.log(d), "First Maje" != a.name ? !1 : d
						}
					}
				}
			}
		},
		l = function (b, c) {
			var d = ["weapon"];
			return $.each(a("upgradeSlots")(c), function (a, c) {
				return c.occupant && c.occupant.name == b.source ? (console.log(c.type, a), d = c.type, !1) : void 0
			}), d
		};
	return {
		"ship:tactical_cube_138_71444": {
			intercept: {
				ship: {
					cost: function (a, b, c, d) {
						return "Borg Ablative Hull Armor" == a.name ? g(a, b, c, d) - 3 : d
					}
				}
			}
		},
		"ship:enterprise_nx_01_71526": {
			upgradeSlots: [{
				type: ["tech"],
				rules: "Free EHP Only",
				canEquip: function (a) {
					return "Enhanced Hull Plating" == a.name
				},
				intercept: {
					ship: {
						cost: function () {
							return 0
						}
					}
				}
			}]
		},
		"ship:scout_608_71525": {
			intercept: {
				ship: {
					canEquip: function (a, b, d, e) {
						return "borg" == a.type && c(a, "cost", b, d) > 5 ? !1 : e
					}
				}
			}
		},
		"ship:borg_starship_71525": {
			intercept: {
				ship: {
					canEquip: function (a, b, d, e) {
						return "borg" == a.type && c(a, "cost", b, d) > 5 ? !1 : e
					}
				}
			}
		},
		"ship:scout_255_71646d": {
			intercept: {
				ship: {
					canEquip: function (a, b, d, e) {
						return "borg" == a.type && c(a, "cost", b, d) > 5 ? !1 : e
					}
				}
			}
		},
		"ship:korok_s_bird_of_prey_71512": {
			canJoinFleet: function (a, b, c) {
				var d = !0;
				return $.each(c.ships, function (a, b) {
					return "Assimilated Vessel 80279" == b.name ? (d = !1, !1) : void 0
				}), d
			},
			intercept: {
				fleet: {
					canJoinFleet: function (a, b, c) {
						return "Assimilated Vessel 80279" != a.name
					}
				}
			}
		},
		"ship:trager_71513b": {
			canJoinFleet: function (a, b, c) {
				var d = !0;
				return $.each(c.ships, function (a, b) {
					return "Assimilated Vessel 64758" == b.name ? (d = !1, !1) : void 0
				}), d
			},
			intercept: {
				fleet: {
					canJoinFleet: function (a, b, c) {
						return "Assimilated Vessel 64758" != a.name
					}
				}
			}
		},
		"ship:regent_s_flagship_71535": {
			"class": "Negh'var Class",
			classId: "negh_var_class_mirror"
		},
		"ship:mirror_universe_starship_71535": {
			"class": "Negh'var Class",
			classId: "negh_var_class_mirror"
		},
		"ship:i_s_s_defiant_71529": {
			"class": "Defiant Class",
			classId: "defiant_class_mirror"
		},
		"ship:mirror_universe_starship_71529": {
			"class": "Defiant Class",
			classId: "defiant_class_mirror"
		},
		"ship:prototype_01_71536": {
			intercept: {
				ship: {
					canEquipCaptain: function (a, b, c) {
						return "Gareb" == a.name || "Romulan Drone Pilot" == a.name
					}
				}
			}
		},
		"ship:romulan_starship_71536": {
			intercept: {
				ship: {
					canEquipCaptain: function (a, b, c) {
						return "Gareb" == a.name || "Romulan Drone Pilot" == a.name
					}
				}
			}
		},
		"ship:sakharov_71997p": {
			upgradeSlots: [{
				type: ["crew", "tech"],
				rules: "This Upgrade costs -2 SP",
				intercept: {
					ship: {
						cost: function (a, b, c, d) {
							return g(a, b, c, d) - 2
						}
					}
				}
			}]
		},
		"ship:u_s_s_enterprise_d_71510b": {
			"class": "Galaxy Class",
			classId: "galaxy__class_mu"
		},
		"ship:mirror_universe_starship_71510b": {
			"class": "Galaxy Class",
			classId: "galaxy__class_mu"
		},
		"ship:assimilation_target_prime_71510b": {
			"class": "Galaxy Class",
			classId: "galaxy__class_mu"
		},
		"ship:mirror_universe_borg_starship_71510b": {
			"class": "Galaxy Class",
			classId: "galaxy__class_mu"
		},
		"captain:2008": {
			intercept: {
				ship: {
					factionPenalty: function (a, b, c, d) {
						return f(a) ? 0 : d
					}
				}
			}
		},
		"captain:2009": {
			intercept: {
				ship: {
					factionPenalty: function (a, b, c, d) {
						return "captain" == a.type || "talent" == a.type ? 0 : d
					}
				}
			}
		},
		"captain:2011": {
			upgradeSlots: j(2, {
				type: ["talent"],
				rules: "Fed Talents Cost Exactly 3 SP",
				faceDown: !0,
				intercept: {
					ship: {
						cost: {
							priority: 100,
							fn: function (a, b, c, d) {
								return h(a, "federation", b, c) ? 3 : d
							}
						},
						factionPenalty: function (a, b, c, d) {
							return h(a, "federation", b, c) ? 0 : d
						}
					}
				}
			})
		},
		"captain:2012": {
			intercept: {
				ship: {
					cost: function (a, b, c, d) {
						return "crew" == a.type ? g(a, b, c, d) - 1 : d
					}
				}
			}
		},
		"captain:2023": {
			intercept: {
				ship: {
					cost: function (a, b, c, d) {
						return "weapon" == a.type ? g(a, b, c, d) - 1 : d
					}
				}
			}
		},
		"captain:2030": {
			factionPenalty: function (a, c, d) {
				return b.hasFaction(c, "federation", c, d) ? 0 : 1
			}
		},
		"captain:2035": {
			intercept: {
				ship: {
					cost: function (c, d, e, f) {
						var h = !1,
							i = 0;
						return $.each(a("upgradeSlots")(d), function (a, c) {
							if (c.occupant && b.hasFaction(c.occupant, "dominion", d, e)) {
								var f = g(c.occupant, d, e, c.occupant.cost);
								f > i && (h = c.occupant, i = f)
							}
						}), c == h && (f = i - 2), f
					}
				}
			}
		},
		"captain:3106": {
			upgradeSlots: [{
				type: ["tech"]
			}]
		},
		"captain:weyoun_71279": {
			upgradeSlots: [{}].concat(j(2, {
				type: ["crew"],
				rules: "-1 SP if Dominion",
				intercept: {
					ship: {
						cost: function (a, c, d, e) {
							return b.hasFaction(a, "dominion", c, d) ? g(a, c, d, e) - 1 : e
						}
					}
				}
			}))
		},
		"captain:tahna_los_op6prize": {
			upgradeSlots: [{}, {
				type: ["tech"],
				rules: "Costs exactly 3 SP",
				intercept: {
					ship: {
						cost: {
							priority: 100,
							fn: function (a, b, c, d) {
								return 3
							}
						},
						factionPenalty: function () {
							return 0
						}
					}
				}
			}]
		},
		"captain:tavek_71446": {
			upgradeSlots: [{
				type: ["crew"]
			}]
		},
		"captain:hugh_71522": {
			intercept: {
				ship: {
					cost: function (a, b, c, d) {
						return "crew" == a.type ? g(a, b, c, d) - 1 : d
					},
					factionPenalty: function (a, c, d, e) {
						return f(a) && b.hasFaction(a, "borg", c, d) ? 0 : e
					}
				}
			}
		},
		"captain:lore_71522": {
			upgradeSlots: [{}, {
				type: ["crew"]
			}],
			intercept: {
				ship: {
					canEquipFaction: {
						priority: 100,
						fn: function (a, b, c, d) {
							return "talent" == a.type ? !0 : d
						}
					},
					factionPenalty: {
						priority: 100,
						fn: function (a, b, c, d) {
							return "talent" == a.type ? 0 : d
						}
					}
				}
			}
		},
		"captain:vanik_71508": {
			intercept: {
				ship: {
					cost: function (a, c, d, e) {
						return "tech" == a.type && (b.hasFaction(a, "vulcan", c, d) || b.hasFaction(a, "federation", c, d)) ? g(a, c, d, e) - 2 : e
					}
				}
			}
		},
		"captain:magnus_hansen_71509": {
			factionPenalty: function (a, c, d) {
				return b.hasFaction(c, "federation", c, d) ? 0 : 1
			}
		},
		"captain:jonathan_archer_71526": {
			upgradeSlots: [{}, {
				type: ["crew"]
			}]
		},
		"captain:sopek_71527": {
			upgradeSlots: [{}, {
				type: ["crew"]
			}]
		},
		"captain:third_of_five_71525": {
			canEquip: function (b, c, d) {
				return !a("fleetCardNamed")(d, "Hugh")
			},
			intercept: {
				fleet: {
					canEquip: function (a, b, c, d) {
						return "Hugh" == a.name ? !1 : d
					},
					canEquipCaptain: function (a, b, c, d) {
						return "Hugh" == a.name ? !1 : d
					}
				}
			}
		},
		"captain:jean_luc_picard_71510": {
			upgradeSlots: [{}, {
				type: ["crew"]
			}]
		},
		"captain:haron_71646c": {
			upgradeSlots: [{
				type: ["weapon"]
			}],
			intercept: {
				ship: {
					cost: function (a, c, d, e) {
						return "weapon" == a.type && b.hasFaction(a, "kazon", c, d) ? g(a, c, d, e) - 1 : e
					}
				}
			}
		},
		"captain:jean_luc_picard_b_71531": {
			upgradeSlots: [{}, {
				type: ["crew", "tech", "weapon", "talent"]
			}]
		},
		"captain:chakotay_71528": {
			upgradeSlots: [{}, {
				type: ["weapon", "crew"]
			}]
		},
		"captain:calvin_hudson_71528": {
			upgradeSlots: [{
				type: ["tech", "weapon", "crew"]
			}],
			intercept: {
				ship: {
					cost: function (a, c, d, e) {
						return b.hasFaction(c, "independent", c, d) && f(a) ? g(a, c, d, e) - 1 : e
					}
				}
			}
		},
		"captain:miles_o_brien_71529": {
			upgradeSlots: [{}, {
				type: ["tech"]
			}]
		},
		"captain:borg_queen_71513a": {
			upgradeSlots: [{}, {
				type: ["borg"]
			}]
		},
		"captain:locutus_71792": {
			canEquipCaptain: function (b, c, d) {
				return !a("fleetCardNamed")(d, "Jean-Luc Picard")
			},
			intercept: {
				fleet: {
					canEquip: function (a, b, c, d) {
						return "Jean-Luc Picard" == a.name ? !1 : d
					},
					canEquipCaptain: function (a, b, c, d) {
						return "Jean-Luc Picard" == a.name ? !1 : d
					}
				}
			}
		},
		"captain:gareb_71536": {
			upgradeSlots: [{
				type: ["captain"],
				rules: "Captain to place under Gareb",
				intercept: {
					ship: {
						cost: function () {
							return 0
						},
						onEquip: function (a, b, c) {
							a.upgradeSlots = [];
							for (var d = 0; d < a.talents; d++) a.upgradeSlots.push({
								type: ["talent"],
								source: "Gareb"
							});
							a.unique = !1, a.text = "(Place underneath Gareb)", a.name = a.name + " (Gareb)"
						},
						canEquip: function () {
							return !0
						},
						canEquipFaction: function () {
							return !0
						},
						factionPenalty: function () {
							return 0
						}
					}
				}
			}],
			skill: function (a, b, c) {
				return a.upgradeSlots[0].occupant ? a.upgradeSlots[0].occupant.skill : 0
			},
			cost: function (a, b, c) {
				var d = 0;
				return a.upgradeSlots[0].occupant && (d = a.upgradeSlots[0].occupant.cost - 3), d
			},
			canEquipCaptain: function (a, b, c) {
				return "Romulan Drone Ship" == b["class"]
			}
		},
		"captain:romulan_drone_pilot_71536": {
			canEquipCaptain: function (a, b, c) {
				return "Romulan Drone Ship" == b["class"]
			}
		},
		"captain:valdore_71536": {
			upgradeSlots: [{}, {
				type: ["tech"]
			}]
		},
		"captain:slar_71797": {
			upgradeSlots: [{
				type: ["talent"],
				rules: "Salvage Only",
				canEquip: function (a) {
					return "Salvage" == a.name
				}
			}]
		},
		"tech:prototype_cloaking_device_jazkel": {
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && b["class"].indexOf("Romulan") < 0 ? g(a, b, c, d) + 5 : d
					},
					canEquip: function (a, b, c) {
						return d("Prototype Cloaking Device")(a, b, c)
					}
				}
			}
		},
		"weapon:3010": {
			intercept: {
				self: {
					attack: function (a, b, c, d) {
						return b && "Vor'cha Class" == b["class"] ? g(a, b, c, d) + 1 : d
					}
				}
			}
		},
		"crew:3039": {
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && "Romulan Science Vessel" != b["class"] ? g(a, b, c, d) + 5 : d
					}
				}
			}
		},
		"tech:3041": {
			canEquip: function (a, b, c) {
				return "Romulan Science Vessel" == b["class"]
			}
		},
		"weapon:3051": {
			intercept: {
				self: {
					attack: function (a, b, c, d) {
						return b && "Negh'var Class" == b["class"] ? g(a, b, c, d) + 1 : d
					}
				}
			}
		},
		"weapon:3059": {
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && b["class"].indexOf("Breen") < 0 ? g(a, b, c, d) + 5 : d
					}
				}
			}
		},
		"tech:3068": {
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && "U.S.S. Defiant" != b.name ? g(a, b, c, d) + 5 : d
					}
				}
			}
		},
		"tech:3080": {
			canEquip: function (a, b, c) {
				return b && b["class"].indexOf("Jem'Hadar") >= 0
			}
		},
		"weapon:3081": {
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && b["class"].indexOf("Jem'Hadar") < 0 ? g(a, b, c, d) + 5 : d
					}
				}
			}
		},
		"crew:3082": {
			canEquip: function (a, b, c) {
				return b && b["class"].indexOf("Jem'Hadar") >= 0
			}
		},
		"crew:3083": {
			canEquip: function (a, b, c) {
				return b && b["class"].indexOf("Jem'Hadar") >= 0
			}
		},
		"crew:3084": {
			canEquip: function (a, b, c) {
				return b && b["class"].indexOf("Jem'Hadar") >= 0
			}
		},
		"weapon:3096": {
			intercept: {
				self: {
					attack: function (a, b, c, d) {
						return b && b["class"].indexOf("Keldon Class") >= 0 ? g(a, b, c, d) + 1 : d
					}
				}
			}
		},
		"tech:3099": {
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && b["class"].indexOf("Keldon Class") < 0 ? g(a, b, c, d) + 5 : d
					}
				}
			}
		},
		"tech:cold_storage_unit_op5prize": {
			upgradeSlots: [{
				type: ["weapon"]
			}, {
				type: ["weapon"]
			}]
		},
		"talent:klingon_honor_71448": {
			canEquipFaction: function (a, c, d) {
				return c.captain && b.hasFaction(c.captain, "klingon", c, d)
			}
		},
		"tech:shockwave_71448": {
			canEquip: function (a, b, c) {
				return "Raptor Class" == b["class"]
			}
		},
		"tech:tactical_sensors_71448": {
			canEquip: function (a, b, c) {
				return "Raptor Class" == b["class"]
			}
		},
		"crew:kudak_etan_71279": {
			canEquip: function (a, b, c) {
				return b && b["class"].indexOf("Jem'Hadar") >= 0
			}
		},
		"crew:ikat_ika_71279": {
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && b["class"].indexOf("Jem'Hadar") < 0 ? g(a, b, c, d) + 5 : d
					}
				}
			}
		},
		"weapon:photon_torpedoes_71279": {
			intercept: {
				self: {
					attack: function (a, b, c, d) {
						return b && "Jem'Hadar Battleship" == b["class"] ? g(a, b, c, d) + 2 : d
					}
				}
			}
		},
		"weapon:phased_polaron_beam_71279": {
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && b["class"].indexOf("Jem'Hadar") < 0 ? g(a, b, c, d) + 5 : d
					}
				}
			}
		},
		"talent:i_am_kohn_ma_op6prize": {
			canEquipFaction: function (a, c, d) {
				return c.captain && b.hasFaction(c.captain, "bajoran", c, d)
			}
		},
		"talent:legendary_hero_denorious": {
			canEquipFaction: function (a, c, d) {
				return c.captain && b.hasFaction(c.captain, "bajoran", c, d) && b.hasFaction(c, "bajoran", c, d)
			}
		},
		"tech:tachyon_eddies_denorious": {
			canEquip: function (a, b, c) {
				return d("TACHYON EDDIES")(a, b, c)
			},
			canEquipFaction: function (a, b, c) {
				return b && "BAJORAN SOLAR SAILOR" == b["class"]
			}
		},
		"crew:kazon_gurad_Halik": {
			canEquip: function (a, b, c) {
				return d("Kazon Gurad")(a, b, c)
			}
		},
		"tech:mainsails_denorious": {
			canEquip: function (a, b, c) {
				return d("MAINSAILS")(a, b, c)
			},
			canEquipFaction: function (a, b, c) {
				return b && "BAJORAN SOLAR SAILOR" == b["class"]
			}
		},
		"tech:solar_sail_powered_denorious": {
			canEquipFaction: function (a, b, c) {
				return b && "BAJORAN SOLAR SAILOR" == b["class"]
			}
		},
		"talent:djarras_denorious": {
			canEquipFaction: function (a, c, d) {
				return c.captain && b.hasFaction(c.captain, "bajoran", c, d) && b.hasFaction(c, "bajoran", c, d)
			}
		},
		"tech:ablative_generator_71280": {
			canEquip: function (a, b, c) {
				return "U.S.S. Voyager" == b.name
			}
		},
		"crew:b_elanna_torres_71280": {
			name: "B'Elanna Torres",
			upgradeSlots: [{
				type: ["weapon"]
			}, {
				type: ["tech"]
			}]
		},
		"tech:bio_electric_interference_71281": {
			canEquip: function (a, c, d) {
				return b.hasFaction(c, "species-8472", c, d)
			}
		},
		"tech:extraordinary_immune_response_71281": {
			canEquip: function (a, c, d) {
				return b.hasFaction(c, "species-8472", c, d)
			}
		},
		"crew:kazon_raiding_party_71282": {
			canEquip: function (a, c, d) {
				return b.hasFaction(c, "kazon", c, d)
			}
		},
		"tech:masking_circuitry_71282": {
			intercept: {
				self: {
					cost: function (a, c, d, e) {
						return c && !b.hasFaction(c, "kazon", c, d) ? g(a, c, d, e) + 5 : e
					}
				}
			}
		},
		"tech:quantum_singularity_71281": {
			canEquip: function (a, c, d) {
				return b.hasFaction(c, "species-8472", c, d)
			}
		},
		"talent:the_weak_will_perish_71281": {
			intercept: {
				self: {
					cost: function (a, c, d, e) {
						return c && !b.hasFaction(c, "species-8472", c, d) ? g(a, c, d, e) + 5 : e
					}
				}
			}
		},
		"weapon:biological_attack_71281": {
			canEquip: function (a, c, d) {
				return b.hasFaction(c, "species-8472", c, d)
			}
		},
		"tech:cutting_beam_71283": {
			canEquip: function (a, c, d) {
				return b.hasFaction(c, "borg", c, d)
			}
		},
		"weapon:energy_blast_71281": {
			intercept: {
				self: {
					attack: function (a, b, c, d) {
						return b && "Species 8472 Bioship" == b["class"] ? g(a, b, c, d) + 2 : d
					}
				}
			}
		},
		"weapon:energy_focusing_ship_71281": {
			canEquip: function (a, c, d) {
				return b.hasFaction(c, "species-8472", c, d)
			}
		},
		"weapon:transphasic_torpedoes_71280": {
			canEquip: function (a, b, c) {
				return "U.S.S. Voyager" == b.name
			}
		},
		"talent:tholian_punctuality_opwebprize": {
			canEquipFaction: function (a, b, c) {
				return b.captain && ("Loskene" == b.captain.name || b.captain.name.indexOf("Tholian") >= 0)
			}
		},
		"weapon:energy_web_opwebprize": {
			canEquip: function (a, b, c) {
				return "Tholian Vessel" == b["class"]
			}
		},
		"talent:vulcan_high_command_71446": {
			canEquipFaction: function (a, c, d) {
				return c.captain && b.hasFaction(c, "vulcan", c, d) && b.hasFaction(c.captain, "vulcan", c, d)
			},
			upgradeSlots: j(2, {
				type: ["tech", "crew"]
			})
		},
		"tech:warp_drive_refit_71445": {
			canEquip: function (a, b, c) {
				return b && b.classData && b.classData.maneuvers && b.classData.maneuvers.max ? b.classData.maneuvers.max < 4 : !1
			}
		},
		"tech:maneuverability_71445": {
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && "Bajoran Interceptor" != b["class"] ? g(a, b, c, d) + 5 : d
					}
				}
			}
		},
		"talent:assimilated_access_codes_71444": {
			canEquipFaction: function (a, c, d) {
				return c.captain && b.hasFaction(c.captain, "borg", c, d)
			}
		},
		"weapon:phaser_strike_71445": {
			canEquip: function (a, b, c) {
				return b.hull <= 3
			},
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && "Bajoran Interceptor" != b["class"] ? g(a, b, c, d) + 5 : d
					}
				}
			}
		},
		"weapon:full_assault_71444": {
			intercept: {
				self: {
					attack: function (a, b, c, d) {
						return b && "Borg Tactical Cube" == b["class"] ? g(a, b, c, d) + 3 : d
					}
				}
			}
		},
		"weapon:borg_missile_71444": {
			canEquipFaction: function (a, c, d) {
				return b.hasFaction(c, "borg", c, d)
			}
		},
		"crew:sakonna_gavroche": {
			upgradeSlots: [{
				type: ["weapon"]
			}],
			intercept: {
				ship: {
					cost: {
						priority: 100,
						fn: function (a, b, c, d) {
							return "weapon" == a.type && (d = g(a, b, c, d), 5 >= d && (d -= 2)), d
						}
					}
				}
			}
		},
		"crew:geordi_la_forge_71201": {
			intercept: {
				ship: {
					cost: {
						priority: 100,
						fn: function (a, b, c, d) {
							return "tech" == a.type && (d = g(a, b, c, d), d -= 1), d
						}
					}
				}
			}
		},
		"talent:first_strike_3rd_wing_attack_ship": {
			canEquip: function (a, b, c) {
				return b.hull <= 3
			}
		},
		"tech:ion_thrusters_3rd_wing_attack_ship": {
			canEquip: d("Ion Thrusters")
		},
		"talent:self_destruct_sequence_71523": {
			canEquipFaction: function (a, c, d) {
				return b.hasFaction(c, "federation", c, d)
			}
		},
		"talent:experimental_link_71522": {
			canEquipFaction: function (a, c, d) {
				return c.captain && b.hasFaction(c.captain, "borg", c, d)
			}
		},
		"borg:transwarp_conduit_71522": {
			canEquipFaction: function (a, c, d) {
				return b.hasFaction(c, "borg", c, d)
			}
		},
		"talent:unnecessary_bloodshed_71524": {
			canEquipFaction: function (a, c, d) {
				return c.captain && b.hasFaction(c.captain, "dominion", c, d)
			}
		},
		"weapon:photon_torpedoes_71522": {
			intercept: {
				self: {
					attack: function (a, c, d, e) {
						return c && b.hasFaction(c, "borg", c, d) ? g(a, c, d, e) + 1 : e
					}
				}
			}
		},
		"weapon:forward_weapons_array_71522": {
			intercept: {
				self: {
					cost: function (a, c, d, e) {
						return c && !b.hasFaction(c, "borg", c, d) ? g(a, c, d, e) + 5 : e
					}
				}
			}
		},
		"weapon:volley_of_torpedoes_71524": {
			canEquip: function (a, b, c) {
				return "Jem'Hadar Battleship" == b["class"] || "Jem'Hadar Battle Cruiser" == b["class"]
			}
		},
		"tech:combat_vessel_variant_71508": {
			canEquip: function (a, b, c) {
				return "Suurok Class" == b["class"]
			},
			intercept: {
				ship: {
					attack: function (a, b, c, d) {
						return a == b ? g(a, b, c, d) + 1 : d
					},
					hull: function (a, b, c, d) {
						return a == b ? g(a, b, c, d) + 1 : d
					}
				}
			}
		},
		"tech:mutli_adaptive_shields_71509": {
			name: "Multi-Adaptive Shields",
			canEquipFaction: function (a, c, d) {
				return b.hasFaction(c, "federation", c, d)
			}
		},
		"tech:reinforced_structural_integrity_71509": {
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && "U.S.S. Raven" != b.name ? g(a, b, c, d) + 5 : d
					}
				}
			}
		},
		"crew:quark_71786": {
			text: "At the start of the game, place 1 non-Borg [tech] or [weapon] Upgrade with a cost of 5 or less face down beneath this card. At any time, you may discard Quark to flip the Upgrade that is beneath this card face up and deploy it to your ship, even if it exceeds your ship's restrictions.",
			upgradeSlots: [{
				type: ["weapon", "tech"],
				rules: "Non-Borg, 5SP or less",
				faceDown: !0,
				intercept: {
					ship: {
						canEquip: function (a, b, d) {
							var e = c(a, "cost", b, d);
							return 5 >= e
						},
						canEquipFaction: function (a, c, d) {
							return !b.hasFaction(a, "borg", c, d)
						},
						free: function () {
							return !0
						}
					}
				}
			}]
		},
		"crew:wesley_crusher_71201": {
			upgradeSlots: j(3, {
				type: ["tech"],
				rules: "FEDERATION TECH UPGRADES, 4SP OR LESS",
				faceDown: !0,
				intercept: {
					ship: {
						cost: function () {
							return 0
						},
						factionPenalty: function () {
							return 0
						},
						canEquip: function (a, d, e, f) {
							return console.log(!b.hasFaction(a, "federation", d, e), c(a, "cost", d, e) > 4), b.hasFaction(a, "federation", d, e) && c(a, "cost", d, e) < 5 ? f : !1
						}
					}
				}
			})
		},
		"captain:akorem_laan_denorious": {
			upgradeSlots: j(2, {
				type: ["talent"],
				rules: "Bajoran upgrades",
				faceDown: !0,
				intercept: {
					ship: {
						canEquip: function (a, c, d, e) {
							return b.hasFaction(a, "bajoran", c, d) ? e : !1
						}
					}
				}
			})
		},
		"captain:tim_watters_valiant": {
			upgradeSlots: [{}, {
				type: ["crew"]
			}]
		},
		"crew:vic_fontaine_crew_71786": {
			factionPenalty: function (a, c, d) {
				return c && b.hasFaction(c, "federation", c, d) ? 0 : 1
			}
		},
		"tech:vic_fontaine_tech_71786": {
			factionPenalty: function (a, c, d) {
				return b.hasFaction(c, "federation", c, d) ? 0 : 1
			}
		},
		"crew:t_rul_71786": {
			upgradeSlots: [{
				type: ["tech"]
			}]
		},
		"crew:elim_garak_71786": {
			upgradeSlots: [{
				type: ["talent"],
				rules: "No Faction Penalty",
				intercept: {
					ship: {
						factionPenalty: function () {
							return 0
						}
					}
				}
			}],
			factionPenalty: 0
		},
		"tech:enhanced_hull_plating_71526": {
			canEquip: d("Enhanced Hull Plating"),
			canEquipFaction: function (a, c, d) {
				return b.hasFaction(c, "federation", c, d)
			}
		},
		"crew:t_pol_71526": {
			upgradeSlots: [{
				type: ["tech"]
			}],
			factionPenalty: function (a, c, d) {
				return b.hasFaction(c, "vulcan", c, d) ? 0 : 1
			}
		},
		"crew:vulcan_commandos_71527": {
			canEquipFaction: function (a, c, d) {
				return b.hasFaction(c, "vulcan", c, d)
			}
		},
		"tech:combat_vessel_variant_71527": {
			upgradeSlots: [{
				type: ["weapon"]
			}],
			canEquip: function (a, b, c) {
				return "Suurok Class" != b["class"] ? !1 : d("Combat Vessel Variant")(a, b, c)
			},
			intercept: {
				ship: {
					attack: function (a, b, c, d) {
						return a == b ? g(a, b, c, d) + 1 : d
					},
					hull: function (a, b, c, d) {
						return a == b ? g(a, b, c, d) + 1 : d
					},
					canEquip: function (a, b, c) {
						return "Combat Vessel Variant" != a.name
					}
				}
			}
		},
		"crew:third_of_five_71525": {
			canEquip: function (b, c, d) {
				return !a("fleetCardNamed")(d, "Hugh")
			},
			intercept: {
				fleet: {
					canEquip: function (a, b, c, d) {
						return "Hugh" == a.name ? !1 : d
					},
					canEquipCaptain: function (a, b, c, d) {
						return "Hugh" == a.name ? !1 : d
					}
				}
			}
		},
		"borg:scavenged_parts_71525": {
			canEquip: d("Scavenged Parts")
		},
		"weapon:magnetometric_guided_charge_71525": {
			canEquipFaction: function (a, c, d) {
				return b.hasFaction(c, "borg")
			}
		},
		"weapon:tactical_station_71510": {
			upgradeSlots: [{
				type: ["weapon"]
			}]
		},
		"weapon:fire_all_weapons_71510b": {
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && "Galaxy Class" != b["class"] && "Intrepid Class" != b["class"] && "Sovereign Class" != b["class"] ? g(a, b, c, d) + 5 : d
					}
				}
			}
		},
		"tech:thought_maker_71646a": {
			canEquipFaction: function (a, c, d) {
				return b.hasFaction(c, "ferengi", c, d)
			}
		},
		"talen:vengeance_71646a": {
			canEquipFaction: function (a, c, d) {
				return c.captain && b.hasFaction(c.captain, "ferengi", c, d) && b.hasFaction(c, "ferengi", c, d)
			}
		},
		"tech:cloaking_device_71646b": {
			intercept: {
				self: {
					cost: function (a, c, d, e) {
						return c && !b.hasFaction(c, "mirror-universe", c, d) ? g(a, c, d, e) + 5 : e
					}
				}
			}
		},
		"tech:tractor_beam_71646c": {
			canEquip: d("Tractor Beam")
		},
		"talent:vulcan_logic_71646e": {
			canEquipFaction: function (a, c, d) {
				return c.captain && b.hasFaction(c.captain, "vulcan", c, d) && b.hasFaction(c, "vulcan", c, d)
			}
		},
		"weapon:photonic_charges_71646c": {
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && "Predator Class" != b["class"] ? g(a, b, c, d) + 4 : d
					}
				}
			}
		},
		"weapon:proton_beam_71646d": {
			name: "Proton Beam",
			intercept: {
				self: {
					cost: function (a, c, d, e) {
						return c && !b.hasFaction(c, "borg", c, d) ? g(a, c, d, e) + 5 : e
					}
				}
			}
		},
		"borg:hive_mind_71511": {
			canEquip: d("Hive Mind")
		},
		"talent:borg_alliance_71511": {
			canEquipFaction: function (a, c, d) {
				return c.captain && !b.hasFaction(c.captain, "borg", c, d) && !b.hasFaction(c, "borg", c, d)
			},
			upgradeSlots: [{
				type: ["borg"]
			}]
		},
		"tech:advanced_shields_71531": {
			canEquip: d("Advanced Shields")
		},
		"crew:william_t_riker_71531": {
			upgradeSlots: [{
				type: ["crew"]
			}]
		},
		"borg:transwarp_signal_71530": {
			canEquip: d("Transwarp Signal"),
			canEquipFaction: function (a, c, d) {
				return b.hasFaction(c, "borg", c, d)
			}
		},
		"borg:borg_shield_matrix_71530": {
			canEquip: d("Borg Shield Matrix")
		},
		"weapon:ramming_attack_71528": {
			canEquip: function (a, b, c) {
				return b.hull <= 3
			}
		},
		"weapon:photon_torpedoes_71531": {
			intercept: {
				self: {
					attack: function (a, b, c, d) {
						return b && "Sovereign Class" == b["class"] ? g(a, b, c, d) + 1 : d
					}
				}
			}
		},
		"weapon:dorsal_phaser_array_71531": {
			attack: 0,
			canEquip: function (a, c, d) {
				return b.hasFaction(c, "federation", c, d) && c.hull >= 4
			},
			intercept: {
				self: {
					attack: function (a, b, d, e) {
						return b ? c(b, "attack", b, d) : e
					},
					cost: function (a, b, d, e) {
						return b ? g(a, b, d, e) + c(b, "attack", b, d) + 1 : e
					}
				}
			}
		},
		"weapon:multi_kinetic_neutronic_mines_71530": {
			intercept: {
				self: {
					cost: function (a, c, d, e) {
						return c && !b.hasFaction(c, "borg", c, d) ? g(a, c, d, e) + 5 : e
					}
				}
			}
		},
		"borg:data_node_71512": {
			canEquip: d("Data Node")
		},
		"talent:warrior_spirit_71512": {
			canEquipFaction: function (a, c, d) {
				return c.captain && b.hasFaction(c.captain, "klingon", c, d)
			}
		},
		"borg:command_interface_71513a": {
			intercept: {
				self: {
					cost: function (a, c, d, e) {
						return c && !b.hasFaction(c, "borg", c, d) ? g(a, c, d, e) + 5 : e
					}
				}
			}
		},
		"borg:interplexing_beacon_71513a": {
			canEquip: d("Interplexing Beacon")
		},
		"tech:prototype_cloaking_device_71532": {
			canEquip: function (a, b, c) {
				return "Klingon Bird-of-Prey" == b["class"]
			}
		},
		"talent:cry_havoc_71532": {
			canEquipFaction: function (a, c, d) {
				return c.captain && b.hasFaction(c.captain, "klingon", c, d)
			}
		},
		"crew:jennifer_sisko_71529": {
			upgradeSlots: [{
				type: ["tech"]
			}]
		},
		"talent:shinzon_romulan_talents_71533": {
			upgradeSlots: j(4, {
				type: ["talent"],
				rules: "Romulan Talent Only",
				faceDown: !0,
				intercept: {
					ship: {
						cost: function () {
							return 0
						},
						factionPenalty: function () {
							return 0
						},
						canEquip: function (a, c, d, e) {
							return b.hasFaction(a, "romulan", c, d) ? e : !1
						}
					}
				}
			}),
			canEquip: function (a, b, c) {
				return b.captain && "Shinzon" == b.captain.name
			},
			factionPenalty: 0
		},
		"tech:secondary_shields_71533": {
			canEquip: function (a, b, c) {
				return "Reman Warbird" == b["class"]
			}
		},
		"tech:improved_cloaking_device_71533": {
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && "Reman Warbird" != b["class"] ? g(a, b, c, d) + 5 : d
					}
				}
			}
		},
		"weapon:thalaron_weapon_71533": {
			canEquip: function (a, b, c) {
				return "Reman Warbird" == b["class"]
			}
		},
		"weapon:photon_torpedoes_71533": {
			intercept: {
				self: {
					attack: function (a, b, c, d) {
						return b && "Reman Warbird" == b["class"] ? g(a, b, c, d) + 2 : d
					}
				}
			}
		},
		"weapon:hypothermic_charge_71534": {
			canEquip: function (a, b, c) {
				return b["class"].indexOf("Vidiian") >= 0
			}
		},
		"squadron:cover_fire_71754": {
			canEquip: d("Cover Fire")
		},
		"squadron:flanking_attack_71754": {
			canEquip: d("Flanking Attack")
		},
		"squadron:support_ship_71754": {
			canEquip: d("Support Ship")
		},
		"squadron:aft_disruptor_wave_cannons_71754": {
			canEquip: d("Aft Disruptor Wave Cannons")
		},
		"squadron:galor_class_phaser_banks_71754": {
			canEquip: d("Galor Class Phaser Banks")
		},
		"talent:truce_71513b": {
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && b.captain && b.captain.skill > 5 ? g(a, b, c, d) + 5 : d
					}
				}
			}
		},
		"crew:elim_garak_71535": {
			intercept: {
				ship: {
					skill: function (a, c, d, e) {
						return a == c.captain && b.hasFaction(c, "mirror-universe", c, d) && (e = g(a, c, d, e) + 2), e
					}
				}
			}
		},
		"tech:cloaking_device_71535": {
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && "Regent's Flagship" != b.name ? g(a, b, c, d) + 5 : d
					}
				}
			}
		},
		"weapon:photon_torpedoes_71535": {
			intercept: {
				self: {
					attack: function (a, b, c, d) {
						return b && "Negh'var Class" == b["class"] ? g(a, b, c, d) + 1 : d
					}
				}
			}
		},
		"tech:monotanium_armor_plating_71808": {
			canEquip: d("Monotanium Armor Plating")
		},
		"tech:sensor_network_71808": {
			canEquip: function (a, b, c) {
				return b["class"].indexOf("Hirogen") >= 0
			}
		},
		"talent:intercept_course_71808": {
			canEquip: function (a, b, c) {
				return b["class"].indexOf("Hirogen") >= 0
			},
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && b.captain && "Karr" != b.captain.name && b.captain.name.indexOf("Hirogen") < 0 ? g(a, b, c, d) + 5 : d
					}
				}
			}
		},
		"weapon:subnucleonic_beam_71808": {
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && b["class"].indexOf("Hirogen") < 0 ? g(a, b, c, d) + 5 : d
					}
				}
			}
		},
		"squadron:defensive_maneuvers_71753": {
			canEquip: d("Defensive Maneuvers")
		},
		"squadron:support_ship_71753": {
			canEquip: d("Support Ship")
		},
		"squadron:attack_wave_71753": {
			canEquip: d("Attack Wave")
		},
		"squadron:attack_formation_71753": {
			canEquip: d("Attack Formation")
		},
		"squadron:cover_fire_71753": {
			canEquip: d("Cover Fire")
		},
		"squadron:coordinated_attack_71753": {
			canEquip: d("Coordinated Attack")
		},
		"tech:maneuvering_thrusters_71536": {
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && "Romulan Drone Ship" != b["class"] ? g(a, b, c, d) + 5 : d
					}
				}
			}
		},
		"tech:multi_spectral_emitters_71536": {
			canEquip: function (a, b, c) {
				return "Romulan Drone Ship" == b["class"]
			}
		},
		"tech:backup_sequencer_71536": {
			canEquip: function (a, b, c) {
				return "Romulan Drone Ship" == b["class"]
			}
		},
		"weapon:triphasic_emitter_71536": {
			name: "Triphasic Emitters",
			range: !1,
			upgradeSlots: [{
				type: ["weapon"],
				rules: "Non-Borg, 5SP or less",
				intercept: {
					ship: {
						free: function () {
							return !0
						},
						canEquip: function (a, b, d, e) {
							return h(a, "borg", b, d) || c(a, "cost", b, d) > 5 ? !1 : e
						}
					}
				}
			}]
		},
		"crew:william_t_riker_71996": {
			talents: 1,
			factionPenalty: function (a, c, d) {
				return c && b.hasFaction(c, "klingon", c, d) ? 0 : 1
			},
			upgradeSlots: [{
				type: ["talent"]
			}]
		},
		"tech:tunneling_neutrino_beam_71996": {
			factionPenalty: function (a, c, d) {
				return c && b.hasFaction(c, "klingon", c, d) ? 0 : 1
			}
		},
		"weapon:phaser_array_retrofit_71996": {
			canEquip: d("Phaser Array Retrofit")
		},
		"crew:turanj_71808": {
			upgradeSlots: [{
				type: ["weapon"]
			}]
		},
		"talent:tholian_assembly_71795": {
			canEquipFaction: function (a, b, c) {
				return b["class"].indexOf("Tholian") >= 0 && b.captain && ("Loskene" == b.captain.name || b.captain.name.indexOf("Tholian") >= 0)
			}
		},
		"crew:karden_71793": {
			canEquipFaction: function (a, c, d) {
				return b.hasFaction(c, "kazon", c, d)
			}
		},
		"crew:haliz_71793": {
			canEquipFaction: function (a, c, d) {
				return b.hasFaction(c, "kazon", c, d)
			}
		},
		"crew:romulan_helmsman_71794": {
			canEquip: d("Romulan Helmsman")
		},
		"talent:make_them_see_us__71794": {
			canEquipFaction: function (a, c, d) {
				return b.hasFaction(c, "romulan", c, d) && c.captain && b.hasFaction(c.captain, "romulan", c, d)
			}
		},
		"crew:romulan_sub_lieutenant_71794": {
			canEquipFaction: function (a, c, d) {
				return b.hasFaction(c, "romulan", c, d)
			}
		},
		"crew:romulan_security_officer_71794": {
			intercept: {
				ship: {
					skill: function (a, b, c, d) {
						return a == b.captain ? g(a, b, c, d) + 1 : d
					}
				}
			}
		},
		"weapon:tricobalt_warhead_71795": {
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && b["class"].indexOf("Tholian") < 0 ? g(a, b, c, d) + 5 : d
					}
				}
			}
		},
		"weapon:disruptor_pulse_71794": {
			intercept: {
				self: {
					cost: function (a, c, d, e) {
						return c && !b.hasFaction(c, "romulan", c, d) ? g(a, c, d, e) + 5 : e
					}
				}
			}
		},
		"tech:improved_deflector_screens_71797": {
			canEquip: function (a, b, c) {
				return b.hull <= 3 && d("Improved Deflector Screens")(a, b, c)
			}
		},
		"weapon:targeted_phaser_strike_71797": {
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && "Gorn Raider" != b["class"] ? g(a, b, c, d) + 4 : d
					}
				}
			}
		},
		"talent:coded_messages_71798": {
			canEquipFaction: function (a, c, d) {
				return b.hasFaction(c, "dominion", c, d)
			}
		},
		"weapon:aft_weapons_array_71798": {
			canEquip: function (a, b, c) {
				return b.hull >= 4
			},
			canEquipFaction: function (a, c, d) {
				return b.hasFaction(c, "dominion", c, d)
			}
		},
		"crew:marlena_moreau_71796": {
			cost: function (b, d, e) {
				if (!d) return 3;
				var f = !1,
					g = 0;
				return $.each(a("upgradeSlots")(d), function (a, h) {
					if (h.occupant && h.occupant != b && "talent" == h.occupant.type) {
						var i = c(h.occupant, "cost", d, e);
						if (i > 0) return f = h.occupant, g = i, !1
					}
				}), g > 0 ? 2 : 3
			}
		},
		"talent:tantalus_field_71796": {
			canEquip: function (a, b, c) {
				return "I.S.S. Enterprise" == b.name
			}
		},
		"tech:escape_transporter_71997p": {
			canEquip: function (a, b, c) {
				return b["class"].indexOf("Shuttlecraft") >= 0
			},
			canEquipFaction: function (a, c, d) {
				return b.hasFaction(c, "federation", c, d)
			}
		},
		"tech:warp_drive_71997p": {
			canEquip: function (a, b, c) {
				return b["class"].indexOf("Shuttlecraft") >= 0 && d("Warp Drive")(a, b, c)
			},
			canEquipFaction: function (a, c, d) {
				return b.hasFaction(c, "federation", c, d)
			}
		},
		"captain:annorax_71799": {
			upgradeSlots: [{}, {
				type: ["tech"]
			}]
		},
		"talent:causality_paradox_71799": {
			canEquipFaction: function (a, b, c) {
				return "Krenim Weapon Ship" == b["class"] && b.captain && ("Annorax" == b.captain.name || "Obrist" == b.captain.name || b.captain.name.indexOf("Krenim") >= 0)
			}
		},
		"weapon:chroniton_torpedoes_71799": {
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && "Krenim Weapon Ship" != b["class"] ? g(a, b, c, d) + 6 : d
					}
				}
			}
		},
		"weapon:temporal_incursion_71799": {
			canEquip: function (a, b, c) {
				return "Krenim Weapon Ship" == b["class"]
			}
		},
		"tech:temporal_wave_front_71799": {
			canEquip: function (a, b, c) {
				return "Krenim Weapon Ship" == b["class"]
			}
		},
		"tech:temporal_core_71799": {
			canEquip: function (a, b, c) {
				return "Krenim Weapon Ship" == b["class"]
			}
		},
		"tech:spatial_distortion_71799": {
			canEquip: function (a, b, c) {
				return "Krenim Weapon Ship" == b["class"]
			}
		},
		
		"tech:temporal_conduit_72224gp": {
			intercept: {
				self: {
					cost: function (a, c, d, e) {
						return c && !b.hasFaction(c, "mirror-universe", c, d) ? g(a, c, d, e) + 4 : e
					}
				}
			}
		},

		"captain:soval_71800": {
			intercept: {
				ship: {
					factionPenalty: function (a, b, c, d) {
						return f(a) ? 0 : d
					}
				}
			}
		},
		"crew:orion_tactical_officer_71800": {
			canEquip: d("Orion Tactical Officer")
		},
		"crew:andorian_helmsman_71800": {
			canEquip: d("Andorian Helmsman")
		},
		"tech:enhanced_hull_plating_71800": {
			canEquip: d("Enhanced Hull Plating"),
			canEquipFaction: function (a, c, d) {
				return b.hasFaction(c, "mirror-universe", c, d) && c.hull <= 4
			}
		},
		"ship:u_s_s_pegasus_71801": {
			intercept: {
				ship: {
					cost: function (a, b, c, d) {
						return "tech" == a.type ? g(a, b, c, d) - 1 : d
					}
				}
			}
		},
		"tech:specialized_shields_71801": {
			canEquip: function (a, b, c) {
				return b.hull <= 3
			},
			canEquipFaction: function (a, c, d) {
				return b.hasFaction(c, "federation", c, d)
			}
		},
		"tech:phasing_cloaking_device_71801": {
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && "Oberth Class" != b["class"] ? g(a, b, c, d) + 5 : d
					}
				}
			}
		},
		"crew:eric_motz_71801": {
			upgradeSlots: [{
				type: ["tech"]
			}]
		},
		"crew:william_t_riker_71801": {
			intercept: {
				ship: {
					skill: function (a, b, c, d) {
						return a == b.captain ? g(a, b, c, d) + 3 : d
					}
				}
			}
		},
		"captain:krim_71803": {
			upgradeSlots: [{}, {
				type: ["crew"]
			}]
		},
		"captain:jaro_essa_cap_71803": {
			canEquipFaction: function (a, c, d) {
				return b.hasFaction(c, "bajoran", c, d)
			}
		},
		"admiral:jaro_essa_71803": {
			canEquipAdmiral: function (a, c, d) {
				return b.hasFaction(c, "bajoran", c, d)
			}
		},
		"tech:assault_vessel_upgrade_t_71803": {
			type: "question",
			isSlotCompatible: function (a) {
				return $.inArray("tech", a) >= 0 || $.inArray("weapon", a) >= 0 || $.inArray("crew", a) >= 0
			},
			canEquip: function (a, b, c) {
				return "Bajoran Scout Ship" == b["class"] ? d("Assault Vessel Upgrade")(a, b, c) : !1
			},
			intercept: {
				ship: {
					attack: function (a, b, c, d) {
						return a == b ? g(a, b, c, d) + 1 : d
					},
					shields: function (a, b, c, d) {
						return a == b ? g(a, b, c, d) + 1 : d
					}
				}
			}
		},
		"question:unremarkable_species_Halik": {
			type: "question",
			isSlotCompatible: function (a) {
				return $.inArray("tech", a) >= 0 || $.inArray("weapon", a) >= 0 || $.inArray("crew", a) >= 0
			},
			canEquipFaction: function (a, c, d) {
				return console.log(c), !b.hasFaction(c, "borg", c, d)
			},
			canEquip: function (a, b, c) {
				return d("Unremarkable Species")(a, b, c)
			},
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && !h(b, "kazon", b, c) ? g(a, b, c, d) + 5 : d
					}
				}
			},
			upgradeSlots: [{
				type: function (a, b) {
					return l(a, b)
				}
			}]
		},
		"crew:bajoran_militia_71803": {
			canEquipFaction: function (a, c, d) {
				return b.hasFaction(c, "bajoran", c, d)
			}
		},
		"captain:kurn_71999p": {
			upgradeSlots: [{
				type: ["talent"],
				rules: "Mauk-to'Vor Only at 3SP",
				canEquip: function (a, b, c) {
					return "Mauk-to'Vor" == a.name
				},
				intercept: {
					ship: {
						cost: function () {
							return 3
						}
					}
				}
			}],
			factionPenalty: function () {
				return 0
			}
		},
		"crew:klingon_stealth_team_71999p": {
			canEquip: d("Klingon Stealth Team"),
			canEquipFaction: function (a, c, d) {
				return b.hasFaction(c, "klingon", c, d)
			}
		},
		"talent:mauk_to_vor_71999p": {
			canEquipFaction: function (a, c, d) {
				return b.hasFaction(c, "klingon", c, d) && b.hasFaction(c.captain, "klingon", c, d)
			}
		},
		"weapon:ambush_attack_71999p": {
			canEquip: d("Ambush Attack")
		},
		"tech:systems_upgrade_71998p": {
			type: "question",
			isSlotCompatible: function (a) {
				return $.inArray("tech", a) >= 0 || $.inArray("weapon", a) >= 0 || $.inArray("crew", a) >= 0
			},
			upgradeSlots: [{
				type: ["tech"]
			}],
			intercept: {
				ship: {
					shields: function (a, b, c, d) {
						return a == b ? g(a, b, c, d) + 1 : d
					}
				}
			},
			canEquip: d("Systems Upgrade"),
			canEquipFaction: function (a, c, d) {
				return b.hasFaction(c, "federation", c, d)
			}
		},
		"weapon:type_8_phaser_array_71998p": {
			canEquip: function (a, b, c) {
				return b.attack <= 3 ? d("Type 8 Phaser Array")(a, b, c) : !1
			}
		},
		"resource:fleet_commander": {
			slotType: "captain",
			cost: 0,
			hideCost: !0,
			showShipResourceSlot: function (a, b, c) {
				if (b.resource && "captain" == b.resource.type) return !0;
				var d = !0;
				return $.each(c.ships, function (a, b) {
					b.resource && (d = !1)
				}), d
			},
			onRemove: function (a, b, c) {
				$.each(c.ships, function (a, b) {
					b.resource && delete b.resource
				})
			}
		},
		"resource:fleet_captain_collectiveop2": {
			slotType: "fleet-captain",
			cost: 0,
			hideCost: !0,
			showShipResourceSlot: function (a, b, c) {
				if (b.resource && "fleet-captain" == b.resource.type) return !0;
				var d = !0;
				return $.each(c.ships, function (a, b) {
					b.resource && (d = !1)
				}), d
			},
			onRemove: function (a, b, c) {
				$.each(c.ships, function (a, b) {
					b.resource && delete b.resource
				})
			}
		},
		"fleet-captain:federation_collectiveop2": {
			canEquip: function (a, c, d) {
				return b.hasFaction(c, "federation", c, d) && (!c.captain || c.captain.unique && b.hasFaction(c.captain, "federation", c, d))
			},
			intercept: {
				ship: {
					canEquipCaptain: function (a, c, d) {
						return a.unique && b.hasFaction(a, "federation", c, d)
					}
				}
			}
		},
		"fleet-captain:dominion_collectiveop2": {
			canEquip: function (a, c, d) {
				return b.hasFaction(c, "dominion", c, d) && (!c.captain || c.captain.unique && b.hasFaction(c.captain, "dominion", c, d))
			},
			intercept: {
				ship: {
					canEquipCaptain: function (a, c, d) {
						return a.unique && b.hasFaction(a, "dominion", c, d)
					}
				}
			}
		},
		"fleet-captain:romulan_collectiveop2": {
			canEquip: function (a, c, d) {
				return b.hasFaction(c, "romulan", c, d) && (!c.captain || c.captain.unique && b.hasFaction(c.captain, "romulan", c, d))
			},
			intercept: {
				ship: {
					canEquipCaptain: function (a, c, d) {
						return a.unique && b.hasFaction(a, "romulan", c, d)
					}
				}
			}
		},
		"fleet-captain:klingon_collectiveop2": {
			canEquip: function (a, c, d) {
				return b.hasFaction(c, "klingon", c, d) && (!c.captain || c.captain.unique && b.hasFaction(c.captain, "klingon", c, d))
			},
			intercept: {
				ship: {
					canEquipCaptain: function (a, c, d) {
						return a.unique && b.hasFaction(a, "klingon", c, d)
					}
				}
			}
		},
		"fleet-captain:independent_klingon_collectiveop2": {
			canEquip: function (a, b, c) {
				return !b.captain || b.captain.unique
			},
			intercept: {
				ship: {
					canEquipCaptain: function (a, b, c) {
						return a.unique
					},
					factions: function (a, b, c, d) {
						return d = d || a.factions, a == b.captain && d.indexOf("independent") < 0 ? d.concat(["independent"]) : d
					}
				},
				fleet: {
					cost: function (a, b, c, d) {
						return "crew" == a.type ? g(a, b, c, d) - 1 : d
					}
				}
			}
		},
		"fleet-captain:independent_federation_collectiveop2": {
			canEquip: function (a, b, c) {
				return !b.captain || b.captain.unique
			},
			intercept: {
				ship: {
					canEquipCaptain: function (a, b, c) {
						return a.unique
					},
					factions: function (a, b, c, d) {
						return d = d || a.factions, a == b.captain && d.indexOf("independent") < 0 ? d.concat(["independent"]) : d
					}
				},
				fleet: {}
			}
		},
		"fleet-captain:independent_romulan_collectiveop2": {
			canEquip: function (a, b, c) {
				return !b.captain || b.captain.unique
			},
			intercept: {
				ship: {
					canEquipCaptain: function (a, b, c) {
						return a.unique
					},
					factions: function (a, b, c, d) {
						return d = d || a.factions, a == b.captain && d.indexOf("independent") < 0 ? d.concat(["independent"]) : d
					}
				},
				fleet: {
					cost: function (a, b, c, d) {
						return "weapon" == a.type ? g(a, b, c, d) - 1 : d
					}
				}
			}
		},
		"fleet-captain:independent_dominion_collectiveop2": {
			canEquip: function (a, b, c) {
				return !b.captain || b.captain.unique
			},
			intercept: {
				ship: {
					canEquipCaptain: function (a, b, c) {
						return a.unique
					},
					factions: function (a, b, c) {
						var d = a.factions;
						return a == b.captain && d.indexOf("independent") < 0 ? d.concat(["independent"]) : d
					}
				},
				fleet: {
					cost: function (a, b, c, d) {
						return "tech" == a.type ? g(a, b, c, d) - 1 : d
					}
				}
			}
		},
		"resource:officer_exchange_program_71996a": {
			upgradeSlots: [{
				type: ["faction"],
				source: "Select Factions for Officer Exchange Program"
			}, {
				type: ["faction"],
				source: "Select Factions for Officer Exchange Program"
			}],
			intercept: {
				fleet: {
					factionPenalty: function (a, c, d, e) {
						var f = d.resource.upgradeSlots[0].occupant,
							g = d.resource.upgradeSlots[1].occupant;
						return f && g ? "captain" != a.type && "admiral" != a.type && "crew" != a.type ? e : b.match(a, f) && b.match(c, g) || b.match(a, g) && b.match(c, f) ? 0 : e : e
					},
					cost: function (a, c, d, e) {
						var f = d.resource.upgradeSlots[0].occupant,
							h = d.resource.upgradeSlots[1].occupant;
						return f && h ? "captain" != a.type && "admiral" != a.type ? e : b.match(a, f) && b.match(c, h) || b.match(a, h) && b.match(c, f) ? g(a, c, d, e) - 1 : e : e
					}
				}
			}
		},
		"resource:officer_cards_collectiveop3": {
			hideCost: !0,
			intercept: {
				fleet: {
					type: function (a, b, c, d) {
						return $.inArray("crew", d) >= 0 ? d.concat(["officer"]) : d
					}
				}
			}
		},
		"officer:first_officer_collectiveop3": {
			skill: 4,
			talents: 1,
			upgradeSlots: [{}, {
				type: ["talent"],
				source: "First Officer"
			}]
		},
		"officer:tactical_officer_collectiveop3": {
			upgradeSlots: [{}, {
				type: ["weapon"],
				source: "Tactical Officer"
			}]
		},
		"officer:operations_officer_collectiveop3": {
			upgradeSlots: [{}, {
				type: ["crew"],
				source: "Operations Officer"
			}]
		},
		"officer:science_officer_collectiveop3": {
			upgradeSlots: [{}, {
				type: ["tech"],
				source: "Science Officer"
			}]
		},
		"resource:4003": {
			"class": "Sideboard",
			factions: b.listCodified,
			upgradeSlots: [{
				type: ["talent"],
				source: "Sideboard",
				rules: "Combined cost 20 SP or less",
				canEquip: function (a, b, d, e) {
					var f = 0;
					$.each(d.resource.upgradeSlots, function (a, g) {
						g.occupant && g != e && (f += c(g.occupant, "cost", b, d))
					});
					var g = c(a, "cost", b, d);
					return 20 >= f + g
				},
				intercept: {
					ship: {
						canEquip: {
							priority: 100,
							fn: function () {
								return !0
							}
						},
						canEquipFaction: {
							priority: 100,
							fn: function () {
								return !0
							}
						},
						factionPenalty: function () {
							return 0
						}
					}
				}
			}, {
				type: ["crew"],
				source: "Sideboard",
				rules: "Combined cost 20 SP or less",
				canEquip: function (a, b, d, e) {
					var f = 0;
					$.each(d.resource.upgradeSlots, function (a, g) {
						g.occupant && g != e && (f += c(g.occupant, "cost", b, d))
					});
					var g = c(a, "cost", b, d);
					return 20 >= f + g
				},
				intercept: {
					ship: {
						canEquip: {
							priority: 100,
							fn: function () {
								return !0
							}
						},
						canEquipFaction: {
							priority: 100,
							fn: function () {
								return !0
							}
						},
						factionPenalty: function () {
							return 0
						}
					}
				}
			}, {
				type: ["tech"],
				source: "Sideboard",
				rules: "Combined cost 20 SP or less",
				canEquip: function (a, b, d, e) {
					var f = 0;
					$.each(d.resource.upgradeSlots, function (a, g) {
						g.occupant && g != e && (f += c(g.occupant, "cost", b, d))
					});
					var g = c(a, "cost", b, d);
					return 20 >= f + g
				},
				intercept: {
					ship: {
						canEquip: {
							priority: 100,
							fn: function () {
								return !0
							}
						},
						canEquipFaction: {
							priority: 100,
							fn: function () {
								return !0
							}
						},
						factionPenalty: function () {
							return 0
						}
					}
				}
			}, {
				type: ["weapon"],
				source: "Sideboard",
				rules: "Combined cost 20 SP or less",
				canEquip: function (a, b, d, e) {
					var f = 0;
					$.each(d.resource.upgradeSlots, function (a, g) {
						g.occupant && g != e && (f += c(g.occupant, "cost", b, d))
					});
					var g = c(a, "cost", b, d);
					return 20 >= f + g
				},
				intercept: {
					ship: {
						canEquip: {
							priority: 100,
							fn: function () {
								return !0
							}
						},
						canEquipFaction: {
							priority: 100,
							fn: function () {
								return !0
							}
						},
						factionPenalty: function () {
							return 0
						}
					}
				}
			}]
		},
		"resource:4004": {
			slotType: "flagship",
			cost: 0,
			hideCost: !0,
			showShipResourceSlot: function (a, b, c) {
				if (b.resource && "flagship" == b.resource.type) return !0;
				var d = !0;
				return $.each(c.ships, function (a, b) {
					b.resource && (d = !1)
				}), d
			},
			onRemove: function (a, b, c) {
				$.each(c.ships, function (a, b) {
					b.resource && delete b.resource
				})
			}
		},
		"flagship:6001": {
			canEquip: function (a, c, d) {
				return b.hasFaction(c, "romulan", c, d);
			}
		},
		"flagship:6003": {
			canEquip: function (a, c, d) {
				return b.hasFaction(c, "klingon", c, d)
			}
		},
		"flagship:6005": {
			canEquip: function (a, c, d) {
				return b.hasFaction(c, "dominion", c, d)
			}
		},
		"flagship:6007": {
			canEquip: function (a, c, d) {
				return b.hasFaction(c, "federation", c, d)
			}
		},
		"flagship:6002": {
			intercept: {
				ship: {
					factions: function (a, b, c, d) {
						return a == b && d.indexOf("independent") < 0 ? d.concat(["independent"]) : d
					}
				}
			}
		},
		"flagship:6004": {
			intercept: {
				ship: {
					factions: function (a, b, c, d) {
						return a == b && d.indexOf("independent") < 0 ? d.concat(["independent"]) : d
					}
				}
			}
		},
		"flagship:6006": {
			intercept: {
				ship: {
					factions: function (a, b, c, d) {
						return a == b && d.indexOf("independent") < 0 ? d.concat(["independent"]) : d
					}
				}
			}
		},
		"flagship:6008": {
			intercept: {
				ship: {
					factions: function (a, b, c, d) {
						return a == b && d.indexOf("independent") < 0 ? d.concat(["independent"]) : d
					}
				}
			}
		},
		"captain:kor_71804": {
			upgradeSlots: [{}, {
				type: ["crew"]
			}]
		},
		"crew:romulan_hijackers_71802": {
			canEquip: function (c, d, e) {
				if (d.captain && !b.hasFaction(d.captain, "romulan", d, e)) return !1;
				var f = !0;
				return $.each(a("upgradeSlots")(d), function (a, c) {
					c.occupant && "crew" == c.occupant.type && !b.hasFaction(c.occupant, "romulan", d, e) && (f = !1)
				}), f
			},
			intercept: {
				ship: {
					canEquip: function (a, c, d, e) {
						return "crew" != a.type || b.hasFaction(a, "romulan", c, d) ? e : !1
					},
					canEquipCaptain: function (a, c, d, e) {
						return b.hasFaction(a, "romulan", c, d) ? e : !1
					},
					cost: function (a, c, d, e) {
						return "tech" != a.type && "weapon" != a.type || b.hasFaction(a, "borg", c, d) || (e = g(a, c, d, e) - 1), e
					},
					factionPenalty: function (a, c, d, e) {
						return f(a) && b.hasFaction(a, "romulan", c, d) ? 0 : e
					}
				}
			}
		},
		"crew:darok_71804": {
			canEquipFaction: function (a, c, d) {
				return b.hasFaction(c, "klingon", c, d)
			}
		},
		"tech:inverse_graviton_burst_71804": {
			intercept: {
				self: {
					cost: function (a, c, d, e) {
						return c && !b.hasFaction(c, "klingon", c, d) ? g(a, c, d, e) + 5 : e
					}
				}
			}
		},
		"talent:long_live_the_empire__71804": {
			canEquip: function (a, c, d) {
				return b.hasFaction(c, "klingon", c, d) && (!c.captain || b.hasFaction(c.captain, "klingon", c, d))
			},
			intercept: {
				ship: {
					canEquipCaptain: function (a, c, d) {
						return b.hasFaction(a, "klingon", c, d)
					}
				}
			}
		},
		"tech:regenerative_shielding_71802": {
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && "U.S.S. Prometheus" != b.name ? g(a, b, c, d) + 4 : d
					}
				}
			},
			canEquip: d("Regenerative Shielding")
		},
		"tech:ablative_hull_armor_71802": {
			canEquip: function (a, b, c) {
				return "Prometheus Class" == b["class"]
			}
		},
		"weapon:multi_vector_assault_mode_71802": {
			canEquip: function (a, b, c) {
				return "Prometheus Class" == b["class"]
			}
		},
		"captain:arturis_71805": {
			intercept: {
				self: {
					skill: function (a, b, c, d) {
						return b && "Dauntless Class" == b["class"] ? g(a, b, c, d) + 5 : d
					}
				}
			}
		},
		"tech:auto_navigation_71805": {
			skill: 0,
			upgradeSlots: [{
				type: ["tech"]
			}],
			intercept: {
				self: {
					skill: function (a, b, c, d) {
						return b && !b.captain ? 2 : d
					}
				}
			}
		},
		"tech:force_field_71805": {
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && "Dauntless Class" != b["class"] ? g(a, b, c, d) + 5 : d
					}
				}
			}
		},
		"tech:navigational_deflector_71805": {
			canEquip: d("Navigational Deflector")
		},
		"tech:particle_synthesis_71805": {
			canEquip: function (a, b, c) {
				return "Dauntless Class" == b["class"]
			}
		},
		"weapon:additional_phaser_array_72000p": {
			canEquip: function (a, b, c) {
				return "D'deridex Class" == b["class"] ? d("Additional Phaser Array")(a, b, c) : !1
			}
		},
		"tech:long_range_scanners_72000p": {
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && "D'deridex Class" != b["class"] ? g(a, b, c, d) + 3 : d
					}
				}
			}
		},
		"talent:marauder_71806": {
			canEquipFaction: function (a, c, d) {
				return b.hasFaction(c, "ferengi", c, d) && b.hasFaction(c.captain, "ferengi", c, d)
			}
		},
		"talent:acquisition_71806": {
			canEquipFaction: function (a, c, d) {
				return b.hasFaction(c, "ferengi", c, d) && b.hasFaction(c.captain, "ferengi", c, d)
			}
		},
		"crew:tactical_officer_71806": {
			canEquip: d("Tactical Officer")
		},
		"tech:ferengi_probe_71806": {
			canEquip: d("Ferengi Probe")
		},
		"tech:inverse_tachyon_pulse_71807": {
			canEquip: d("Inverse Tachyon Pulse")
		},
		"resource:emergency_force_field_72001r": {
			cost: function (a, b, d) {
				if (!d) return 0;
				var e = 0;
				return $.each(d.ships || [], function (a, b) {
					e += c(b, "shields", b, d)
				}), Math.ceil(e / 2)
			}
		},
		"crew:luther_sloan_72001p": {
			factionPenalty: function (a, c, d) {
				return b.hasFaction(c, "federation", c, d) ? 0 : 1
			}
		},
		"weapon:tricobalt_device_72001p": {
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && "Intrepid Class" != b["class"] ? g(a, b, c, d) + 4 : d
					}
				}
			}
		},
		"tech:variable_geometry_pylons_72001p": {
			canEquip: function (a, b, c) {
				return "Intrepid Class" != b["class"] ? !1 : d("Variable Geometry Pylons")(a, b, c)
			}
		},
		"captain:mendak_cap_71794": {
			canEquipCaptain: function (a, c, d) {
				return b.hasFaction(c, "romulan", c, d)
			}
		},
		"admiral:mendak_71794": {
			canEquipAdmiral: function (a, c, d) {
				return b.hasFaction(c, "romulan", c, d)
			}
		},
		"captain:k_temoc_72009": {
			upgradeSlots: [{
				type: ["talent"],
				rules: "Klingon Talents Only",
				canEquip: function (a, b, c) {
					return h(a, "klingon", b, c)
				}
			}],
			intercept: {
				ship: {
					cost: function (a, b, c, d) {
						return f(a) && h(a, "klingon", b, c) && (d = g(a, b, c, d) - 1), d
					},
					factionPenalty: function (a, b, c, d) {
						return f(a) && !h(a, "klingon", b, c) && (d = 2 * g(a, b, c, d)), d
					}
				}
			}
		},
		"talent:devotion_to_duty_72009": {
			canEquipFaction: function (a, b, c) {
				return h(b, "klingon", b, c) && h(b.captain, "klingon", b, c)
			}
		},
		"crew:tactical_officer_72009": {
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && !h(b, "klingon", b, c) ? g(a, b, c, d) + 3 : d
					}
				}
			},
			canEquip: d("Tactical Officer")
		},
		"tech:cryogenic_stasis_72009": {
			upgradeSlots: j(2, {
				type: ["crew"],
				rules: "Non-Borg, Combined cost 5 or less",
				faceDown: !0,
				canEquip: function (b, d, e, f) {
					if (h(b, "borg", d, e)) return !1;
					var g = 0;
					return $.each(a("upgradeSlots")(d), function (a, b) {
						f != b && b.occupant && "Cryogenic Stasis" == b.source && (g = c(b.occupant, "cost", d, e))
					}), g + c(b, "cost", d, e) <= 5
				},
				intercept: {
					ship: {
						free: function () {
							return !0
						}
					}
				}
			})
		},
		"talent:coordinated_attack_72010": {
			canEquipFaction: function (a, c, d) {
				return b.hasFaction(c, "romulan", c, d) && c.captain && b.hasFaction(c.captain, "romulan", c, d)
			}
		},
		"crew:bridge_officer_72010": {
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && !h(b, "romulan", b, c) ? g(a, b, c, d) + 2 : d
					}
				}
			},
			canEquip: d("Bridge Officer")
		},
		"talent:federation_task_force_72008": {
			canEquipFaction: function (a, b, c) {
				return h(b, "federation", b, c) && b.captain && h(b.captain, "federation", b, c)
			}
		},
		"talent:balance_of_terror_e_72002h": {
			upgradeSlots: [{
				type: ["talent"],
				rules: "",
				faceDown: !0,
				canEquip: function (a, d, e) {
					return b.match(a, d) && c(a, "cost", d, e) <= 5
				},
				intercept: {
					ship: {
						free: function () {
							return !0
						}
					}
				}
			}],
			canEquip: d("Balance of Terror"),
			intercept: {
				self: {
					cost: {
						priority: 1e3,
						fn: function () {
							return 3
						}
					}
				}
			}
		},
		"crew:balance_of_terror_c_72002h": {
			upgradeSlots: [{
				type: ["crew"],
				rules: "",
				faceDown: !0,
				canEquip: function (a, d, e) {
					return b.match(a, d) && c(a, "cost", d, e) <= 5
				},
				intercept: {
					ship: {
						free: function () {
							return !0
						}
					}
				}
			}],
			canEquip: d("Balance of Terror"),
			intercept: {
				self: {
					cost: {
						priority: 1e3,
						fn: function () {
							return 3
						}
					}
				}
			}
		},
		"tech:balance_of_terror_t_72002h": {
			upgradeSlots: [{
				type: ["tech"],
				rules: "",
				faceDown: !0,
				canEquip: function (a, d, e) {
					return b.match(a, d) && c(a, "cost", d, e) <= 5
				},
				intercept: {
					ship: {
						free: function () {
							return !0
						}
					}
				}
			}],
			canEquip: d("Balance of Terror"),
			intercept: {
				self: {
					cost: {
						priority: 1e3,
						fn: function () {
							return 3
						}
					}
				}
			}
		},
		"weapon:balance_of_terror_w_72002h": {
			upgradeSlots: [{
				type: ["weapon"],
				rules: "",
				faceDown: !0,
				canEquip: function (a, d, e) {
					return b.match(a, d) && c(a, "cost", d, e) <= 5
				},
				intercept: {
					ship: {
						free: function () {
							return !0
						}
					}
				}
			}],
			canEquip: d("Balance of Terror"),
			intercept: {
				self: {
					cost: {
						priority: 1e3,
						fn: function () {
							return 3
						}
					}
				}
			}
		},
		"weapon:biological_weapon_72012": {
			canEquip: function (a, b, c) {
				return "Species 8472 Bioship" == b["class"]
			}
		},
		"weapon:energy_blast_72012": {
			canEquip: function (a, b, c) {
				return "Species 8472 Bioship" == b["class"]
			}
		},
		"tech:biological_technology_72012": {
			canEquip: function (a, b, c) {
				return "Species 8472 Bioship" != b["class"] ? !1 : d("Biological Technology")(a, b, c)
			}
		},
		"tech:biogenic_field_72012": {
			canEquip: function (a, b, c) {
				return "Species 8472 Bioship" != b["class"] ? !1 : d("Biogenic Field")(a, b, c)
			}
		},
		"tech:electrodynamic_fluid_72012": {
			canEquip: function (a, b, c) {
				return "Species 8472 Bioship" == b["class"]
			}
		},
		"tech:fluidic_space_72012": {
			canEquip: d("Fluidic Space"),
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && !h(b, "species-8472", b, c) ? g(a, b, c, d) + 5 : d
					}
				}
			}
		},
		"talent:first_maje_71793": {
			canEquipFaction: function (a, b, c) {
				return h(b, "kazon", b, c) && h(b.captain, "kazon", b, c)
			},
			upgradeSlots: [{
				type: ["tech"]
			}],
			intercept: {
				ship: {
					skill: function (a, b, c, d) {
						return a == b.captain ? g(a, b, c, d) + 2 : d
					}
				}
			}
		},
		"ship:nistrim_raider_71282": {
			upgradeSlots: [k()]
		},
		"ship:kazon_raider_71282": {
			upgradeSlots: [k()]
		},
		"ship:kazon_starship_71646c": {
			upgradeSlots: [k()]
		},
		"ship:relora_sankur_71646c": {
			upgradeSlots: [k()]
		},
		"ship:ogla_razik_71793": {
			upgradeSlots: [k()]
		},
		"ship:quark_s_treasure_72013": {
			intercept: {
				ship: {
					factionPenalty: function (a, b, c, d) {
						return "crew" == a.type || "tech" == a.type ? 0 : d
					}
				}
			}
		},
		"captain:zek_cap_72013": {
			canEquipCaptain: function (a, b, c) {
				return h(b, "ferengi", b, c)
			}
		},
		"captain:brunt_72013": {
			upgradeSlots: [{
				type: ["talent"],
				rules: "Grand Nagus Only",
				canEquip: function (a) {
					return "Grand Nagus" == a.name
				}
			}]
		},
		"admiral:zek_72013": {
			canEquipAdmiral: function (a, b, c) {
				return h(b, "ferengi", b, c)
			}
		},
		"talent:smugglers_72013": {
			canEquipFaction: function (a, b, c) {
				return h(b, "ferengi", b, c) && h(b.captain, "ferengi", b, c)
			}
		},
		"tech:cargo_hold_72013": {
			upgradeSlots: j(2, {
				type: ["crew", "tech"],
				rules: "Combined cost 4SP or less",
				canEquip: function (b, d, e, f) {
					var g = 0;
					return $.each(a("upgradeSlots")(d), function (a, b) {
						f != b && b.occupant && "Cargo Hold" == b.source && (g = c(b.occupant, "cost", d, e))
					}), g + c(b, "cost", d, e) <= 4
				}
			}),
			canEquip: function (a, b, c) {
				return h(b, "ferengi", b, c) ? d("Cargo Hold")(a, b, c) : !1
			}
		},
		"tech:inversion_wave_72013": {
			canEquip: d("Inversion Wave")
		},
		"tech:high_energy_sensor_sweep_72011": {
			canEquip: d("High Energy Sensor Sweep")
		},
		"weapon:arsenal_72011": {
			upgradeSlots: j(2, {
				type: ["weapon"]
			}),
			canEquip: d("Arsenal")
		},
		"question:aft_torpedo_launcher_72011": {
			isSlotCompatible: function (a) {
				return $.inArray("tech", a) >= 0 || $.inArray("weapon", a) >= 0 || $.inArray("crew", a) >= 0
			},
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && !h(b, "federation", b, c) ? g(a, b, c, d) + 5 : d
					}
				}
			},
			canEquip: function (a, b, c) {
				return b.classData && b.classData.rearArc ? !1 : b.hull >= 4
			}
		},
		"crew:vulcan_engineer_72002p": {
			factionPenalty: function (a, b, c) {
				return b && h(b, "vulcan", b, c) ? 0 : 1
			}
		},
		"weapon:dual_phaser_banks_72002p": {
			canEquip: function (a, b, c) {
				return h(b, "federation", b, c) ? d("Dual Phaser Banks")(a, b, c) : !1
			},
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && "Constitution Class" != b["class"] && "Constitution Refit Class" != b["class"] ? g(a, b, c, d) + 3 : d
					}
				}
			}
		},
		"question:astrogator_72002p": {
			isSlotCompatible: function (a) {
				return $.inArray("weapon", a) >= 0 || $.inArray("crew", a) >= 0
			},
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && !h(b, "federation", b, c) ? g(a, b, c, d) + 5 : d
					}
				}
			},
			canEquip: function (a, b, c) {
				return "Constitution Class" != b["class"] && "Constitution Refit Class" != b["class"] ? !1 : d("Astrogator")(a, b, c)
			}
		},
		"captain:lovok_blind_belak": {
			upgradeSlots: [{
				type: ["talent"],
				rules: "Tal Shiar Only",
				canEquip: function (a) {
					return "Tal Shiar" == a.name
				}
			}]
		},
		"talent:tal_shiar_blind_belak": {
			canEquipFaction: function (a, b, c) {
				return h(b.captain, "romulan", b, c)
			}
		},
		"captain:bioship_omega_pilot_blind_bioship": {
			canEquipCaptain: function (a, b, c) {
				return h(b, "species-8472", b, c)
			}
		},
		"weapon:energy_weapon_blind_bioship": {
			canEquip: function (a, b, c) {
				return h(b, "species-8472", b, c) ? d("Energy Weapon")(a, b, c) : !1
			}
		},
		"tech:neuro_peptides_blind_bioship": {
			canEquip: function (a, b, c) {
				return h(b, "species-8472", b, c) ? d("Neuro Peptides")(a, b, c) : !1
			}
		},
		"tech:organic_conduits_blind_bioship": {
			canEquip: function (a, b, c) {
				return h(b, "species-8472", b, c)
			}
		},
		"tech:resisitant_hull_blind_bioship": {
			canEquip: function (a, b, c) {
				return h(b, "species-8472", b, c) ? d("Resistant Hull")(a, b, c) : !1
			}
		},
		"weapon:aft_weapons_array_blind_aldara": {
			canEquip: d("Aft Weapons Array"),
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && "Cardassian Galor Class" != b["class"] ? g(a, b, c, d) + 5 : d
					}
				}
			}
		},
		"tech:high_energy_subspace_field_blind_aldara": {
			canEquip: d("High Energy Subspace Field"),
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && !h(b, "dominion", b, c) ? g(a, b, c, d) + 5 : d
					}
				}
			}
		},
		"weapon:upgraded_phasers_blind_lakota": {
			canEquip: function (a, b, e) {
				return c(b, "attack", b, e) > 3 ? !1 : d("Upgraded Phasers")(a, b, e)
			},
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && !h(b, "federation", b, c) ? g(a, b, c, d) + 5 : d
					}
				}
			}
		},
		"tech:reactor_core_blind_tohkaht": {
			canEquip: d("Reactor Core")
		},
		"weapon:pulse_firing_particle_cannon_72003p": {
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && !h(b, "xindi", b, c) ? g(a, b, c, d) + 5 : d
					}
				}
			}
		},
		"tech:phase_deflector_pulse_72003p": {
			canEquip: function (a, b, c) {
				return h(b, "xindi", b, c) ? d("Phase Deflector Pulse")(a, b, c) : !1
			}
		},
		"tech:targeting_systems_blind_buruk": {
			canEquip: d("Targeting Systems")
		},
		"crew:kurak_blind_buruk": {
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && !h(b, "klingon", b, c) ? g(a, b, c, d) + 5 : d
					}
				}
			}
		},
		"talent:pursuit_blind_interceptor8": {
			canEquip: function (a, b, d) {
				return c(b, "hull", b, d) <= 3
			}
		},
		"crew:ro_laren_blind_interceptor8": {
			canEquip: function (a, b, c) {
				return h(b, "federation", b, c) || h(b, "bajoran", b, c)
			}
		},
		"weapon:phaser_strike_blind_interceptor8": {
			canEquip: function (a, b, d) {
				return c(b, "hull", b, d) <= 3
			},
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && "Bajoran Interceptor" != b["class"] ? g(a, b, c, d) + 5 : d
					}
				}
			}
		},
		"tech:navigational_sensors_blind_interceptor8": {
			canEquip: function (a, b, c) {
				return "Bajoran Interceptor" != b["class"] ? !1 : d("Navigational Sensors")(a, b, c)
			}
		},
		"ship:nistrim_culluh_blind_nistrim_culluh": {
			upgradeSlots: [k()]
		},
		"talent:ambition_blind_nistrim_culluh": {
			canEquipFaction: function (a, b, c) {
				return h(b, "kazon", b, c) && h(b.captain, "kazon", b, c)
			}
		},
		"tech:stolen_technology_blind_nistrim_culluh": {
			canEquipFaction: function (a, b, c) {
				return h(b, "kazon", b, c)
			}
		},
		"talent:v_tosh_ka_tur_blind_seleya": {
			canEquipFaction: function (a, b, c) {
				return h(b, "vulcan", b, c) && h(b.captain, "vulcan", b, c)
			}
		},
		"crew:solin_blind_seleya": {
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && !h(b, "vulcan", b, c) ? g(a, b, c, d) + 4 : d
					}
				}
			}
		},
		"tech:power_distribution_net_blind_seleya": {
			canEquip: function (a, b, c) {
				return h(b, "vulcan", b, c) ? d("Power Distribution Net")(a, b, c) : !1
			}
		},
		"talent:kidnap_blind_nunks_marauder": {
			canEquipFaction: function (a, b, c) {
				return h(b, "ferengi", b, c) && h(b.captain, "ferengi", b, c)
			}
		},
		"captain:tuvok_72014": {
			upgradeSlots: [{
				type: ["tech"],
				rules: "Costs -1 SP",
				intercept: {
					ship: {
						cost: function (a, b, c, d) {
							return g(a, b, c, d) - 1
						}
					}
				}
			}]
		},
		"tech:unimatrix_shielding_72014": {
			canEquip: d("Unimatrix Shielding"),
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && !h(b, "federation", b, c) ? g(a, b, c, d) + 5 : d
					}
				},
				ship: {
					shields: function (a, b, c, d) {
						return a == b ? g(a, b, c, d) + 2 : d
					}
				}
			}
		},
		"tech:immersion_shielding_72014": {
			canEquip: d("Immersion Shielding"),
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && !h(b, "federation", b, c) ? g(a, b, c, d) + 3 : d
					}
				},
				ship: {
					shields: function (a, b, c, d) {
						return a == b ? g(a, b, c, d) + 1 : d
					}
				}
			}
		},
		"tech:parametallic_hull_plating_72014": {
			canEquip: d("Parametallic Hull Plating"),
			intercept: {
				self: {
					cost: function (a, b, c, d) {
						return b && !h(b, "federation", b, c) ? g(a, b, c, d) + 3 : d
					}
				}
			}
		},
		"weapon:photon_torpedoes_72014": {
			intercept: {
				self: {
					range: function (a, b, c, d) {
						return b && b["class"].indexOf("Shuttlecraft") >= 0 ? "1 - 2" : d
					}
				}
			}
		},
		"captain:martok_72015": {
			intercept: {
				ship: {
					cost: function (a, b, c, d) {
						return f(a) && h(a, "klingon", b, c) ? g(a, b, c, d) - 1 : d
					}
				}
			}
		},
		"talent:the_day_is_ours_72015": {
			canEquipFaction: function (a, b, c) {
				return h(b, "klingon", b, c) && h(b.captain, "klingon", b, c)
			}
		},
		"crew:jadzia_dax_72015": {
			intercept: {
				self: {
					factionPenalty: function (a, b, c, d) {
						return h(b, "klingon", b, c) ? 0 : d
					}
				}
			}
		},
		"crew:worf_72015": {
			intercept: {
				ship: {
					skill: function (a, b, c, d) {
						return a == b.captain ? g(a, b, c, d) + (h(a, "klingon", b, c) ? 3 : 1) : d
					}
				}
			}
		},
		"captain:telek_r_mor_72016": {
			upgradeSlots: [{
				type: ["talent"],
				rules: "Secret Research Only",
				canEquip: function (a, b, c) {
					return "Secret Research" == a.name
				}
			}]
		},
		"talent:secret_research_72016": {
			intercept: {
				ship: {
					cost: function (a, b, c, d) {
						return b && "Romulan Science Vessel" != b["class"] ? g(a, b, c, d) + 5 : d
					}
				}
			}
		},
		"tech:temporal_displacement_72016": {
			canEquip: function (a, b, c) {
				return b && "Romulan Science Vessel" == b["class"]
			}
		},
		"tech:advanced_scanning_72016": {
			intercept: {
				ship: {
					cost: function (a, b, c, d) {
						return b && "Romulan Science Vessel" != b["class"] ? g(a, b, c, d) + 5 : d
					}
				}
			}
		},
		"tech:signal_amplifier_72016": {
			intercept: {
				ship: {
					cost: function (a, b, c, d) {
						return b && "Romulan Science Vessel" != b["class"] ? g(a, b, c, d) + 5 : d
					}
				}
			},
			canEquip: d("Signal Amplifier")
		},
		"tech:warp_core_ejection_system_72016": {
			canEquip: d("Warp Core Ejection System")
		},
		"tech:test_cylinder_72016": {
			canEquip: function (a, b, c) {
				return b && "Romulan Science Vessel" == b["class"]
			}
		},
		"talent:ibix_dynasty_72004p": {
			upgradeSlots: j(2, {
				type: ["weapon"]
			})
		},
		"weapon:prototype_weapon_72004p": {
			canEquipFaction: function (a, b, c) {
				return h(b, "xindi", b, c)
			}
		},
		"talent:standby_battle_stations_constellation": {
			canEquip: function (a, b, c) {
				return b && !!~b.actions.indexOf("battlestations")
			}
		},
		"tech:auxiliary_control_room_constellation_tech": {
			canEquip: function (a, b, c) {
				return d("Auxiliary Control Room")(a, b, c)
			}
		},
		"weapon:auxiliary_control_room_constellation_weapon": {
			canEquip: function (a, b, c) {
				return d("Auxiliary Control Room")(a, b, c)
			}
		},
		"crew:automated_distress_beacon_constellation_crew": {
			canEquip: function (a, b, c) {
				return d("Automated Distress Beacon")(a, b, c)
			}
		},
		"tech:automated_distress_beacon_constellation_tech": {
			canEquip: function (a, b, c) {
				return d("Automated Distress Beacon")(a, b, c)
			}
		},
		"weapon:automated_distress_beacon_constellation_weapon": {
			canEquip: function (a, b, c) {
				return d("Automated Distress Beacon")(a, b, c)
			}
		},
		"crew:reman_bodyguards_jazkel": {
			intercept: {
				self: {
					canEquip: function (a, b, c) {
						return d("Reman Bodyguards")(a, b, c) ? !0 : d("Reman Bodyguards")(a, b, c) && b.captain && "Vrax" == b.captain.name ? !0 : !1
					},
					cost: function (a, b, c, d) {
						return b && b.captain && "Vrax" == b.captain.name ? g(a, b, c, d) - 2 : d
					}
				}
			}
		},
		"weapon:distuptor_banks_jazkel": {
			canEquip: function (a, b, c) {
				return d("Disruptor Banks")(a, b, c)
			}
		},
		"weapon:stand_by_torpedoes_amar": {
			canEquip: function (a, b, c) {
				return d("Stand By Torpedoes")(a, b, c)
			}
		},
		"weapon:charging_Weapons_tmet": {
			canEquip: function (a, b, c) {
				return d("CHARGING WEAPONS")(a, b, c)
			}
		},
		"tech:self_repair_technology_tmet": {
			canEquip: function (a, b, c) {
				return d("SELF REPAIR TECHNOLOGY")(a, b, c)
			},
			canEquipFaction: function (a, c, d) {
				return b.hasFaction(c, "romulan", c, d)
			}
		},
		"squadron:cover_fire_71203": {
			canEquip: function (a, b, c) {
				return d("Cover Fire")(a, b, c)
			}
		},
		"squadron:torpedo_attack_71203": {
			canEquip: function (a, b, c) {
				return d("Torpedo Attack")(a, b, c)
			}
		},
		"squadron:support_ship_71203": {
			canEquip: function (a, b, c) {
				return d("Support Ship")(a, b, c)
			}
		},
		"tech:counter_measures_71212": {
			canEquip: function (a, b, c) {
				return d("Counter Measures")(a, b, c)
			},
			cost: function (a, b, c, d) {
				return b && "Cardassian ATR-4107" != b["class"] ? g(a, b, c, d) + 5 : d
			}
		},
		"question:maintenance_crew_71212": {
			isSlotCompatible: function (a) {
				return $.inArray("tech", a) >= 0 || $.inArray("weapon", a) >= 0 || $.inArray("crew", a) >= 0
			},
			upgradeSlots: [{
				type: function (a, b) {
					return l(a, b)
				}
			}, {
				type: ["crew"]
			}],
			canEquip: function (a, b, c) {
				return d("Maintenance Crew")(a, b, c)
			}
		},
		"tech:navigational_station_71201": {
			canEquip: function (a, b, c) {
				return d("Navigational Station")(a, b, c)
			}
		},
		"tech:distress_signal_pi": {
			canEquip: function (a, b, c) {
				return d("Distress Signal")(a, b, c)
			}
		},
		"tech:gravition_field_generator_pi": {
			canEquip: function (a, b, c) {
				return d("Gravition Field Generator")(a, b, c)
			}
		},
		"tech:self_destruct_sequence_pi": {
			canEquip: function (a, b, c) {
				return d("Self Destruct Sequence")(a, b, c)
			}
		},
		"tech:agony_booth_71796": {
			canEquip: function (a, b, c) {
				return d("Agony Booth")(a, b, c)
			}
		},
		"captain:temporal_cold_war_vosk": {
			factionPenalty: function (a, b, c, d) {
				return "talent" == a.type ? 0 : d
			}
		},
		"tech:temporal_cold_war_temporal_conduit": {
			cost: function (a, c, d, e) {
				return c && !b.hasFaction(c, "mirror-universe", c, d) ? g(a, c, d, e) + 5 : e
			}
		},
		"weapon:photon_torpedoes_xindus": {
			attack: function (a, b, c, d) {
				return b && "Xindi Reptilian Warship" == b["class"] ? g(a, b, c, d) + 1 : d
			}
		},
		"talent:arming_sequence_weapon_zero": {
			canEquip: function (a, b, c) {
				return b && "Xindi Weapon" == b["class"]
			}
		},
		"weapon:destructive_blast_weapon_zero": {
			canEquip: function (a, b, c) {
				return b && "Xindi Weapon" == b["class"]
			}
		},
		"weapon:rotating_emitters_weapon_zero": {
			canEquip: function (a, b, c) {
				return b && "Xindi Weapon" == b["class"]
			}
		},
		"tech:subspace_vortex_weapon_zero": {
			canEquip: function (a, c, d) {
				return b.hasFaction(c, "xindi", c, d)
			}
		},
		"tech:self_destruct_weapon_zero": {
			canEquip: function (a, b, c) {
				return b && "Xindi Weapon" == b["class"]
			}
		},
		"crew:degra_weapon_zero": {
			intercept: {
				ship: {
					cost: function (a, c, d, e) {
						return "weapon" == a.type && b.hasFaction(a, "xindi", c, d) ? g(a, c, d, e) - 1 : e
					}
				}
			}
		},
		"crew:klingon_helmsman_amar": {
			intercept: {
				self: {
					canEquip: function (a, b, c) {
						if (b && b.classData && b.classData.maneuvers)
							for (i = 1; i < b.classData.maneuvers.max; i++)
								if (void 0 !== b.classData.maneuvers[i].about) return !0;
						return !1
					}
				},
				ship: {
					cost: function (a, c, d, e) {
						return c && !b.hasFaction(c, "klingon", c, d) ? g(a, c, d, e) + 5 : e
					}
				}
			}
		},
		"crew:klingon_navigator_amar": {
			canEquip: function (a, b, c) {
				return d("Klingon Navigator")(a, b, c)
			}
		},
		"captain:the_classic_movies_khan_singh": {
			intercept: {
				ship: {
					factionPenalty: function (a, b, c, d) {
						return f(a) ? 0 : d
					}
				}
			},
			upgradeSlots: [{}].concat(j(3, {
				type: e,
				faceDown: !0,
				intercept: {
					ship: {
						cost: function () {
							return 4
						},
						factionPenalty: function () {
							return 0
						},
						canEquip: function (a, b, d, e) {
							return c(a, "cost", b, d) <= 6 ? e : !1
						}
					}
				}
			}))
		},
		"crew:nijil_jazkal": {
			upgradeSlots: j(1, {
				type: ["tech"],
				intercept: {
					ship: {
						cost: function (a, b, c, d) {
							return d = g(a, b, c, d) - 1, 1 > d && (d = 1), d
						},
						canEquip: function (a, c, d, e) {
							return b.hasFaction(a, "romulan", c, d) ? e : !1
						}
					}
				}
			})
		},
		"captain:tebok_tmet": {
			intercept: {
				ship: {
					cost: function (d, e, f, g) {
						var h = !1,
							i = 0,
							j = 0;
						return $.each(f.ships, function (a, c) {
							b.hasFaction(c, "romulan", c, f) && (j += 1)
						}), 2 > j ? g : ($.each(a("upgradeSlots")(e), function (a, g) {
							if (g.occupant && g.occupant != d && "talent" == g.occupant.type && b.hasFaction(g.occupant, "romulan", e, f)) {
								var j = c(g.occupant, "cost", e, f);
								if (j > 0) return h = g.occupant, i = j, !1
							}
						}), i > 0 ? g - 1 : g)
					}
				}
			}
		},
		"captain:kurn_72241": {
			upgradeSlots: [{
				type: ["talent"],
				rules: "Klingon only",
				canEquip: function (a, c, d, e) {
					return b.hasFaction(a, "klingon", c, d)
				}
			}]
		},
		"tech:emergency_power_72241": {
			canEquip: function (a, b, c) {
				return d("Emergency Power")(a, b, c)
			}
		},
		"weapon:photon_torpedoes_72241": {
			intercept: {
				self: {
					attack: function (a, b, c, d) {
						return b && "Vor'cha Class" == b["class"] ? g(a, b, c, d) + 1 : d
					}
				}
			}
		},
		"talent:command_pod_72242": {
			canEquip: function (a, b, c) {
				return b && "D7 Class" == b["class"]
			}
		},
		"crew:romulan_technical_officer_72242": {
			canEquip: function (a, b, c) {
				return d("Romulan Technical Officer")(a, b, c)
			}
		},
		"tech:impulse_drive_72242": {
			canEquip: function (a, b, c) {
				return d("Impulse Drive")(a, b, c)
			}
		},
		"captain:the_classic_movies_kruge": {
			upgradeSlots: [{}, {
				type: ["crew"]
			}]
		},
		"crew:geordi_la_forge_71531": {
			upgradeSlots: [{
				type: ["tech"]
			}]
		},
		"talent:i_am_the_borg_72255": {
			rules: "Borg Queen only",
			canEquip: function (a, b, c) {
				return b.captain && "Borg Queen" == b.captain.name
			}
		},
		"borg:borg_support_vehicle_dock_72255": {
			rules: "Borg Cube only",
			canEquip: function (a, b, c) {
				return b && "Borg Cube" == b["class"]
			}
		},
		"tech:temporal_vortex_72255": {
			rules: "Borg ship only",
			canEquipFaction: function (a, c, d) {
				return b.hasFaction(c, "borg", c, d)
			}
		},
		"weapon:torpedo_bay_enterprise_a": {
			upgradeSlots: [{
				type: ["weapon"],
				rules: "Photon Torpedoes Only",
				canEquip: function (a) {
					return "Photon Torpedoes" == a.name
				}
			}]
		},
		"question:delta_shift_cairo": {
			isSlotCompatible: function (a) {
				return $.inArray("tech", a) >= 0 || $.inArray("weapon", a) >= 0 || $.inArray("crew", a) >= 0
			},
			upgradeSlots: [{
				type: function (a, b) {
					return l(a, b)
				}
			}],
			canEquip: function (a, b, c) {
				return d("Delta Shift")(a, b, c)
			}
		},
		"captain:james_t_kirk_bounty": {
			intercept: {
				ship: {
					cost: function (a, c, d, e) {
						return "crew" == a.type && b.hasFaction(a, "federation", c, d) ? g(a, c, d, e) - 1 : e
					}
				}
			}
		},
		"question:computer_core_venture": {
			isSlotCompatible: function (a) {
				return $.inArray("weapon", a) >= 0 || $.inArray("crew", a) >= 0
			},
			upgradeSlots: [{
				type: ["tech"]
			}]
		},
		"weapon:additional_phaser_arrays_venture": {
			canEquip: function (a, b, c) {
				return d("Additional Phaser Arrays")(a, b, c)
			}
		},
		"tech:high_cpaacity_deflector_shield_grid_venture": {
			canEquip: function (a, b, c) {
				return d("High-Capacty Deflector Shield Grid")(a, b, c)
			}
		},
		"tech:control_central_rateg": {
			canEquip: function (a, b, c) {
				return d("Control Central")(a, b, c)
			}
		},
		"weapon:main_batteries_rateg": {
			canEquip: function (a, b, c) {
				return d("Main Batteries")(a, b, c)
			},
			upgradeSlots: [{
				type: ["weapon"]
			}]
		},
		"tech:deflector_control_enterprise_b": {
			rules: "Only one per ship",
			canEquip: d("Deflector Control")
		},
		"tech:holo_communicator_enterprise_b": {
			rules: "Only one per ship",
			canEquip: d("Holo-Communicator")
		},
		"tech:resonance_burst_enterprise_b": {
			rules: "Only one per ship",
			canEquip: d("Resonance Burst")
		},
		"tech:full_reverse_enterprise_b": {
			rules: "Only one per ship",
			canEquip: d("Full Reverse")
		},	
		"crew:lursa_crew_72282p": {
			upgradeSlots: [{
				type: ["talent"]
			}],
			intercept: {
				ship: {
					skill: function (a, b, c, d) {
						return a == b.captain ? g(a, b, c, d) + 4 : d
					}
				}
			}
		}
	}
}]);
var module = angular.module("utopia-card-ship-class", []);
module.directive("cardShipClass", function () {
	return {
		scope: {
			shipClass: "=",
			ship: "=",
			fleet: "="
		},
		templateUrl: "card-ship-class.html",
		controller: ["$scope", function (a) {
			a.abs = Math.abs, a.speeds = [];
			for (var b = a.shipClass.maneuvers, c = b.max; c >= b.min; c--)(0 != c || b[0]) && a.speeds.push(c);
			for (a.speeds.length < 7 && b.min > -2 && a.speeds.push(9), a.speeds.length < 7 && b.min > -1 && a.speeds.push(9); a.speeds.length < 7;) a.speeds.unshift(9);
			a.getBaseTileName = function (a) {
				return a.unique ? a.name : a["class"]
			}
		}]
	}
});
var module = angular.module("utopia-card-ship", []);
module.directive("cardShip", function () {
	return {
		scope: {
			ship: "=",
			fleet: "=",
			dragStore: "=",
			dragSource: "="
		},
		templateUrl: "card-ship.html",
		controller: ["$scope", function (a) {}]
	}
});
var module = angular.module("utopia-card-token", []);
module.directive("cardToken", function () {
	return {
		scope: {
			token: "=",
			ship: "=",
			fleet: "=",
			dragStore: "=",
			dragSource: "="
		},
		templateUrl: "card-token.html",
		controller: ["$scope", function (a) {}]
	}
});
var module = angular.module("utopia-card-upgrade", []);
module.directive("cardUpgrade", function () {
	return {
		scope: {
			upgrade: "=",
			ship: "=",
			fleet: "=",
			dragStore: "=",
			dragSource: "="
		},
		templateUrl: "card-upgrade.html",
		controller: ["$scope", function (a) {
			a.range = function (a) {
				return new Array(a)
			}, a.isDefined = function (a) {
				return void 0 !== a
			}
		}]
	}
});
var module = angular.module("utopia-card", ["utopia-tooltip", "utopia-card-ship", "utopia-card-ship-class", "utopia-card-upgrade", "utopia-card-resource", "utopia-dragdrop", "utopia-valueof"]);
module.directive("card", function () {
	return {
		scope: {
			card: "=",
			ship: "=",
			fleet: "=",
			dragStore: "=",
			dragSource: "@"
		},
		restrict: "E",
		templateUrl: "card.html"
	}
}), module.filter("icons", function () {
	return function (a) {
		return a.replace(/\[([^\]]*)\]/g, "<i class='fs fs-$1'></i>").replace(/\n/g, "<br/>")
	}
});
var module = angular.module("utopia-valueof", []);
module.filter("removeDashes", ["$filter", function (a) {
	return function (a) {
		return a ? a.replace(/\-/g, " ") : a
	}
}]), module.factory("globalInterceptors", function () {
	return {
		cost: {
			priority: 1e3,
			source: "Cost cannot be negative",
			hidden: !0,
			fn: function (a, b, c, d) {
				return d = d instanceof Function ? d(a, b, c) : d, 0 > d ? 0 : d
			}
		}
	}
}), module.filter("upgradeSlots", function () {
	return function (a) {
		var b = [];
		a.resource && a.resource.upgradeSlots && (b = b.concat(a.resource.upgradeSlots)), a.captain && a.captain.upgradeSlots && (b = b.concat(a.captain.upgradeSlots)), a.admiral && a.admiral.upgradeSlots && (b = b.concat(a.admiral.upgradeSlots)), b = b.concat(a.upgrades).concat(a.upgradeSlots);
		for (var c = []; b.length > 0;) {
			var d = b.shift();
			d && (c.push(d), d.occupant && d.occupant.upgradeSlots && !d.faceDown && (b = d.occupant.upgradeSlots.concat(b)))
		}
		return c
	}
}), module.filter("shipInterceptors", ["$filter", function (a) {
	var b = a("upgradeSlots");
	return function (a, c, d, e, f) {
		var g = [],
			h = b(c);
		return $.each(h, function (b, c) {
			c.occupant && c.occupant.intercept[d][e] && !c.faceDown && wrapInterceptors(c.occupant.intercept[d][e], c.occupant, g), (f && c == f || a == c.occupant) && c.intercept && c.intercept[d] && c.intercept[d][e] && wrapInterceptors(c.intercept[d][e], c.source || "Unknown", g)
		}), c.resource && c.resource.intercept[d][e] && wrapInterceptors(c.resource.intercept[d][e], c.resource, g), c.captain && c.captain.intercept[d][e] && wrapInterceptors(c.captain.intercept[d][e], c.captain, g), c.admiral && c.admiral.intercept[d][e] && wrapInterceptors(c.admiral.intercept[d][e], c.admiral, g), c.intercept && c.intercept[d][e] && wrapInterceptors(c.intercept[d][e], c, g), g
	}
}]), module.filter("interceptors", ["$filter", "globalInterceptors", function (a, b) {
	var c = a("shipInterceptors");
	return function (a, d, e, f, g) {
		var h = [];
		return a.intercept && a.intercept.self && a.intercept.self[f] && wrapInterceptors(a.intercept.self[f], a, h), d && (h = h.concat(c(a, d, "ship", f, g))), e && ($.each(e.ships || [], function (b, d) {
			h = h.concat(c(a, d, "fleet", f))
		}), e.resource && (h = h.concat(c(a, e.resource, "fleet", f)))), b[f] && (h = h.concat(b[f])), h
	}
}]), module.filter("valueOf", ["$filter", function (a) {
	var b = a("interceptors");
	return function (a, c, d, e, f, g) {
		data = a[c], data = data instanceof Function ? data(a, d, e) : data;
		var h = [{
			source: "Printed Value",
			value: data
		}];
		if (d) {
			var i = b(a, d, e, c, f);
			i.sort(function (a, b) {
				return a.priority > b.priority ? 1 : -1
			}), $.each(i, function (b, c) {
				var f = data;
				data = c.fn(a, d, e, data), data == f || c.hidden || (data = data instanceof Function ? data(a, d, e) : data, f = f instanceof Function ? f(a, d, e) : f, data != f && h.push({
					source: c.source,
					value: data - f
				}))
			})
		}
		return data instanceof Function && (data = data(a, d, e)), g && g.modifiers ? h : data
	}
}]), angular.module("utopia").run(["$templateCache", function (a) {
	"use strict";
	a.put("fleet-builder.html", '<div class="fleet-open-export" ng-show="!searchOptions.showExport">\r\n  <button class="fleet-search-bigger" ng-click="searchOptions.showExport = true"><i class="fa fa-chevron-left"></i> Export</button>\r\n</div>\r\n\r\n<div class="fleet-open-search" ng-show="searchOptions.columns < 1">\r\n  <button class="fleet-search-bigger" ng-click="searchOptions.columns = 1">Search <i class="fa fa-chevron-right"></i></button>\r\n</div>\r\n\r\n<div class="fleet-ship-container" ng-repeat="ship in fleet.ships track by $index">\r\n\r\n    <div class="fleet-ship-top">\r\n        <div class="fleet-ship-top-left" ng-class="{\'fleet-ship-top-left-first\':$first}"></div>\r\n       <div class="fleet-ship-title font-staw" ng-class="{\'fleet-ship-title-long\': ship.name.length >= 18, \'fleet-ship-title-longer\': ship.name.length >= 21}">{{ ship.name }}</div>\r\n       <div class="fleet-ship-top-spacer"></div>\r\n       <div class="fleet-ship-title fleet-ship-cost font-staw">{{ getTotalCost(ship,fleet) }} SP</div>\r\n     <div class="fleet-ship-top-spacer"></div>\r\n       <div class="fleet-ship-top-spacer"></div>\r\n       <div class="toggle-button-value pull-left" ng-class="{\'toggle-button-value-active\': !ship.hideEmptySlots}"></div>\r\n     <div class="fleet-ship-title fleet-ship-cost font-staw">\r\n            <button class="title-button" ng-click="ship.hideEmptySlots = !ship.hideEmptySlots">Show Empty Slots</button>\r\n        </div>\r\n      <div class="fleet-ship-top-right"></div>\r\n    </div>\r\n  <div class="fleet-ship-middle">\r\n     <div class="fleet-ship-left"></div>\r\n     \r\n        <div class="fleet-ship-inner">\r\n\r\n          <div class="card-container" ng-class="{\'zoom\':zoom}">\r\n             <card card="ship" fleet="fleet" drag-store="dragStore"></card>\r\n          </div><!--\r\n          Stupid whitespace breaks card alignment\r\n      --><div class="card-container" ng-class="{\'zoom\':zoom}">\r\n             <card card="ship.classData" ship="ship" fleet="fleet" drag-store="dragStore"></card>\r\n            </div><!--\r\n       --><div class="card-container" ng-class="{\'zoom\':zoom}" ng-show="!ship.squadron && fleet.resource && (fleet.resource|valueOf:\'showShipResourceSlot\':ship:fleet)" droppable can-drop="$item.type == fleet.resource.slotType" drop="setShipResource(fleet,ship,$item)" drag-store="dragStore">\r\n               <div class="card-outer card-drop-target font-staw" ng-click="setSearchTypes([fleet.resource.slotType])">\r\n                    <div class="card-drop-target-inner">\r\n                        <div class="card-drop-target-type">\r\n                         <i class="fs fs-{{fleet.resource.slotType}}"></i><br/>{{fleet.resource.slotType|removeDashes}}\r\n                      </div>\r\n                  </div>\r\n              </div>\r\n              <card card="ship.resource" ship="ship" fleet="fleet" drag-store="dragStore"></card>\r\n         </div><!--\r\n          \r\n         --><div class="card-container" ng-class="{\'zoom\':zoom}" ng-hide="ship.squadron" droppable can-drop="$item.type == \'captain\' && $item != ship.captain" drop="setShipCaptain(fleet,ship,$item)" drag-store="dragStore">\r\n              <div class="card-outer card-drop-target font-staw" ng-click="setSearchTypes([\'captain\'])">\r\n                    <div class="card-drop-target-inner">\r\n                        <div class="card-drop-target-type">\r\n                         <i class="fs fs-captain"></i><br/>Captain\r\n                       </div>\r\n                  </div>\r\n              </div>\r\n              <card card="ship.captain" ship="ship" fleet="fleet" drag-store="dragStore"></card>\r\n          </div><!--\r\n\r\n       --><div class="card-container" ng-class="{\'zoom\':zoom}" ng-hide="!ship.admiral && ( ship.squadron || ship.hideEmptySlots || fleetHasAdmiral(fleet) )"\r\n                droppable can-drop="$item.type == \'admiral\' && $item != ship.admiral" drop="setShipAdmiral(fleet,ship,$item)" drag-store="dragStore">\r\n             <div class="card-outer card-drop-target font-staw" ng-click="setSearchTypes([\'admiral\'])">\r\n                    <div class="card-drop-target-inner">\r\n                        <div class="card-drop-target-type">\r\n                         <i class="fs fs-admiral"></i><br/>Admiral\r\n                       </div>\r\n                  </div>\r\n              </div>\r\n              <card card="ship.admiral" ship="ship" fleet="fleet" drag-store="dragStore"></card>\r\n          </div><!--\r\n          \r\n         --><div class="card-container" ng-class="{\'zoom\':zoom}" ng-mouseenter="hover = true" ng-mouseleave="hover = false"\r\n               ng-repeat="upgradeSlot in ship|upgradeSlots" ng-hide="!upgradeSlot.occupant && (ship.hideEmptySlots || (upgradeSlot|valueOf:\'hide\':ship:fleet))" \r\n             droppable can-drop="isUpgradeCompatible($item, upgradeSlot, ship, fleet)" drop="setUpgrade(fleet,ship,upgradeSlot,$item)" drag-store="dragStore">\r\n               <div class="card-outer card-drop-target font-staw" ng-click="setSearchTypes(upgradeSlot.type)">\r\n                 <div class="card-drop-target-title" ng-class="{\'card-drop-target-title-hover\':hover || upgradeSlot.occupant == dragStore.item}" ng-show="upgradeSlot.source && upgradeSlot.source != \'ship\'">{{upgradeSlot.source}}<div ng-show="upgradeSlot.rules">{{upgradeSlot.rules}}</div></div>\r\n                   <div class="card-drop-target-inner">\r\n                        <div class="card-drop-target-type" ng-repeat="type in upgradeSlot|valueOf:\'type\':ship:fleet">\r\n                         <i class="fs fs-{{type}}"></i><br/>{{type|removeDashes}}\r\n                        </div>\r\n                  </div>\r\n              </div>\r\n              <div class="card-drop-target-subtitle">{{upgradeSlot|valueOf:\'show\':ship:fleet}}</div>\r\n                <card card="upgradeSlot.occupant" ship="ship" fleet="fleet" drag-store="dragStore"></card>\r\n          </div>\r\n          \r\n        </div>\r\n\r\n  </div>\r\n  \r\n    <div class="fleet-ship-bottom" ng-show="$last && searchOptions.columns < 1 && !fleet.resource">\r\n     <div class="fleet-ship-bottom-left" ng-class="{\'fleet-ship-bottom-left-long\': fleet.ships.length > 0 || fleet.resource}"></div>\r\n   </div>\r\n      \r\n</div>\r\n\r\n<div class="fleet-ship-container" ng-hide="loading || ( searchOptions.columns < 1 && !fleet.resource )">\r\n\r\n  <div class="fleet-ship-top">\r\n        <div class="fleet-ship-top-left" ng-class="{\'fleet-ship-top-left-first\': fleet.ships.length == 0}"></div>\r\n     <div class="fleet-ship-title font-staw">Fleet Total</div>\r\n       <div class="fleet-ship-top-spacer"></div>\r\n       <div class="fleet-ship-title fleet-ship-cost font-staw">{{ getFleetCost(fleet) }} SP</div>\r\n      <div class="fleet-ship-top-right"></div>\r\n    </div>\r\n  \r\n    <div class="fleet-ship-middle">\r\n     <div class="fleet-ship-left"></div>\r\n     \r\n        <div class="fleet-ship-inner">\r\n\r\n          <div class="card-container" ng-class="{\'zoom\':zoom}" ng-hide="searchOptions.columns < 1">\r\n             <div class="card-outer card-drop-target font-staw" ng-click="setSearchTypes([\'ship\'])"\r\n                    droppable can-drop="$item.type == \'ship\'" drop="addFleetShip(fleet,$item)" drag-store="dragStore">\r\n                    <div class="card-drop-target-title" ng-if="!isMobile">Click to search this card type</div>\r\n                  <div class="card-drop-target-title" ng-if="isMobile">Tap to search this card type</div>\r\n                 <div class="card-drop-target-inner">\r\n                        <div class="card-drop-target-type">\r\n                         <i class="fs fs-ship"></i><br/>Ship\r\n                     </div>\r\n                  </div>\r\n                  <div ng-show="!isMobile" class="card-drop-target-subtitle">Drag here to add to fleet</div>\r\n                  <div ng-show="isMobile && (!dragStore.item || dragStore.item.type != \'ship\')" class="card-drop-target-subtitle">Tap a ship card to select it</div>\r\n                    <div ng-show="isMobile && dragStore.item && dragStore.item.type == \'ship\'" class="card-drop-target-subtitle">Tap here to add selected ship to fleet</div>\r\n             </div>\r\n          </div><!--\r\n          \r\n            --><div class="card-container" ng-class="{\'zoom\':zoom}" droppable can-drop="$item.type == \'resource\' && $item != fleet.resource" drop="setFleetResource(fleet,$item)" drag-store="dragStore">\r\n               <div class="card-outer card-drop-target font-staw" ng-click="setSearchTypes([\'resource\'])">\r\n                   <div class="card-drop-target-title"></div>\r\n                  <div class="card-drop-target-inner">\r\n                        <div class="card-drop-target-type">\r\n                         <i class="fs fs-resource"></i><br/>Resource\r\n                     </div>\r\n                  </div>\r\n                  <div class="card-drop-target-subtitle"></div>\r\n               </div>\r\n              <card card="fleet.resource" ship="ship" fleet="fleet" drag-store="dragStore"></card>\r\n            </div><!--\r\n          \r\n            --><div class="card-container" ng-class="{\'zoom\':zoom}" ng-repeat="upgradeSlot in fleet.resource.upgradeSlots"\r\n                droppable can-drop="isUpgradeCompatible($item, upgradeSlot) && $item != upgradeSlot.occupant" drop="setUpgrade(fleet,fleet.resource,upgradeSlot,$item)" drag-store="dragStore">\r\n             <div class="card-outer card-drop-target font-staw" ng-click="setSearchTypes(upgradeSlot.type)">\r\n                 <div class="card-drop-target-title">{{upgradeSlot.source}}<div ng-show="upgradeSlot.rules">{{upgradeSlot.rules}}</div></div>\r\n                    <div class="card-drop-target-inner">\r\n                        <div class="card-drop-target-type" ng-repeat="type in upgradeSlot.type">\r\n                            <i class="fs fs-{{type}}"></i><br/>{{type|removeDashes}}\r\n                        </div>\r\n                  </div>\r\n                  <div class="card-drop-target-subtitle"></div>\r\n               </div>\r\n              <card card="upgradeSlot.occupant" ship="ship" fleet="fleet" drag-store="dragStore"></card>\r\n          </div>\r\n          \r\n        </div>\r\n\r\n  </div>\r\n  \r\n    <div class="fleet-ship-bottom">\r\n     <div class="fleet-ship-bottom-left fleet-ship-bottom-left-long"></div>\r\n  </div>\r\n  \r\n</div>'),
		a.put("fleet-export.html", '<div class="fleet-close-export" ng-show="searchOptions.showExport">\r\n  <button class="fleet-search-bigger" ng-click="searchOptions.showExport = false"><i class="fa fa-chevron-right"></i> Export</button>\r\n</div>\r\n\r\n<div class="export-container">\r\n\r\n <div class="u-search-header"><div class="u-search-header-text">Copy Text Listing</div></div>\r\n\r\n    <label class="export-option"><input type="checkbox" ng-model="showSetNames"> Include Expansion Names</label>\r\n    \r\n    <textarea class="export-text" ng-model="fleetText"></textarea>\r\n  \r\n</div>'), a.put("fleet-list.html", '<div class="container-fluid">\r\n\r\n <div class="row" >\r\n      <div class="col-md-4">\r\n      </div>\r\n  </div>\r\n\r\n</div>'), a.put("search-filter-group.html", '<div class="u-search-header" ng-click="showContent = !showContent"><div class="u-search-header-text">{{title}}</div></div>\r\n<div class="u-search-content" ng-show="showContent" ng-transclude></div>'), a.put("search.html", '<div class="u-search">\r\n   \r\n    <div class="search-query-container">\r\n        <input class="u-search-query" ng-model="search.query" placeholder="Search">\r\n     <button ng-click="resetSearch()">Reset</button>\r\n     <button ng-click="showAdvanced = !showAdvanced">Advanced</button>\r\n   </div>\r\n\r\n  <div ng-show="showAdvanced && (!dragStore.item || dragStore.source == \'search\')">\r\n \r\n        <div class="u-search-size">\r\n         <button class="u-search-smaller" ng-click="modifySearchColumns(-1)"><i class="fa fa-chevron-left"></i></button>\r\n         <div class="u-search-size-text">Resize Search Results</div>\r\n         <button class="u-search-bigger" ng-click="modifySearchColumns(1)"><i class="fa fa-chevron-right"></i></button>\r\n      </div>\r\n  \r\n        <search-filter-group title="Faction" open>\r\n          <span ng-repeat="(faction,data) in search.factions">\r\n                <label class="u-label"><input type="checkbox" ng-model="data.search" > <div class="u-faction card-faction-{{faction}}"></div> {{faction|removeDashes}}</label>\r\n          </span>\r\n     </search-filter-group>\r\n\r\n      <search-filter-group title="Type" open>\r\n         <span class="u-search-type" ng-repeat="(type,data) in search.types">\r\n                <label class="u-label"><input type="checkbox" ng-model="data.search" > <i class="fs fs-{{type}}"></i> {{type|removeDashes}}</label>\r\n         </span>\r\n     </search-filter-group>\r\n\r\n      <search-filter-group title="Uniqueness" open>\r\n           <span>\r\n              <label class="u-label"><input type="checkbox" ng-model="search.unique"> <i class="fs fs-unique"></i> Unique</label>\r\n         </span>\r\n         <span>\r\n              <label class="u-label"><input type="checkbox" ng-model="search.generic"> <i class="fs"></i> Generic</label>\r\n         </span>\r\n     </search-filter-group>\r\n\r\n      <search-filter-group title="Order By" open>\r\n         <div class="u-search-filter-comment">\r\n               Order results by <select ng-model="search.sortBy" ng-options="sortable.value as sortable.name for sortable in sortables"></select>\r\n              <select ng-model="search.ascending"><option value="true">Ascending</option><option value="false">Descending</option></select>\r\n               <div class="u-order-default" ng-show="search.sortBy != defaults.search.sortBy || search.ascending != defaults.search.ascending">\r\n                    <button ng-click="defaults.search.sortBy = search.sortBy; defaults.search.ascending = search.ascending">Set as Default</button>\r\n                 <div>Default order is saved in browser for future sessions.</div>\r\n               </div>\r\n          </div>\r\n      </search-filter-group>\r\n      \r\n        <search-filter-group title="Custom Filter" open>\r\n            <div class="u-search-filter-comment" ng-init="search.filterOperator = \'<\'">\r\n               <select ng-model="search.filterField"><option value="">- No Filter -</option><option ng-repeat="sortable in sortables" value="{{sortable.value}}">{{sortable.name}}</option></select>\r\n               <select ng-model="search.filterOperator"><option value="<"><</option><option value="<="><=</option><option value="=">=</option><option value=">=">>=</option><option value=">">></option></select>\r\n              <input ng-model="search.filterValue" placeholder="Value"></input>\r\n           </div>\r\n      </search-filter-group>\r\n\r\n      <search-filter-group title="Owned Expansions">\r\n          <div class="u-search-filter-comment">\r\n               Expansion filter settings are stored in your browser for future sessions. Uncheck the expansions you don\'t own. New expansions are automatically checked. These settings are not affected by the "Reset" button.\r\n           </div>\r\n          <div class="u-search-filter-comment">\r\n               <label class="u-label"><input type="checkbox" ng-model="search.ignoreSetsFilter"> Temporarily show all cards</label>\r\n            </div>\r\n          <button ng-click="uncheckAllSets()">Uncheck all sets</button>\r\n           <button ng-click="checkAllSets()">Check all sets</button>\r\n           <div ng-repeat="set in setList | orderBy:\'-releaseDate\'" class="u-search-set" ng-hide="search.ignoreSetsFilter">\r\n              <label class="u-label"><input type="checkbox" ng-model="search.sets[set.id].search"> {{set.parentSet}}: {{set.name}}</label>\r\n            </div>\r\n      </search-filter-group>\r\n      \r\n    </div>\r\n\r\n</div>\r\n\r\n<div ng-init="resultLimit = 10">\r\n\r\n    <div class="u-loading" ng-show="loading">Loading cards...</div>\r\n\r\n <div class="card-container" ng-show="dragStore.item && dragStore.source != \'search\'" droppable can-drop="true" drop="$emit(\'removeFromFleetDropped\',$item)" drag-store="dragStore">\r\n     <div class="card-outer card-drop-target font-staw">\r\n         <div class="card-drop-target-inner">\r\n                <div class="card-drop-target-type">\r\n                 <i class="fs fs-captain"></i><br/>Remove From Fleet\r\n             </div>\r\n          </div>\r\n      </div>\r\n  </div>\r\n  \r\n    <div ng-hide="dragStore.item && dragStore.source != \'search\'">\r\n\r\n        <div class="card-container" ng-repeat="card in cards | cardFilter:search | sortBy:search.sortBy:search.ascending | limitTo:resultLimit*search.columns">\r\n         <card card="card" drag-store="dragStore" drag-source="search"></card>\r\n       </div>\r\n      \r\n        <div>\r\n           <button class="u-show-more" ng-hide="loading" ng-click="resultLimit = resultLimit + 10">Show More</button>\r\n      </div>\r\n      \r\n    </div>\r\n  \r\n</div>'), a.put("card-faction.html", '<div class="card-outer card-faction font-staw" ng-class="{ \'dragging\': faction == dragStore.item }" draggable drag-item="faction" drag-store="dragStore" drag-source="dragSource">\r\n\r\n    <div class="card-faction-image card-faction-{{faction.factions[0]}}"></div>\r\n\r\n <div class="card-faction-name">{{faction.name | uppercase}}</div>\r\n\r\n</div>'), a.put("card-resource.html", '<div class="card-outer card-resource font-staw" ng-class="{ \'dragging\': resource == dragStore.item }" draggable drag-item="resource" drag-store="dragStore" drag-source="dragSource">\r\n\r\n   <div class="card-resource-header">\r\n      <span class="card-title" ng-class="{\'card-title-long\': resource.name.length > 20}">{{resource.name | uppercase}}<span ng-hide="resource.hideCost"> ({{resource|valueOf:\'cost\':ship:fleet}} SP)</span></span>\r\n    </div>\r\n\r\n  <div class="card-text">\r\n     <div class="card-text-inner font-staw-alt" ng-bind-html="resource.text | icons"></div>\r\n  </div>\r\n\r\n</div>'), a.put("card-ship-class.html", '<div class="card-outer card-ship card-shipclass font-staw">\r\n\r\n    <div class="card-shipclass-arcs arc-faction-{{ship.factions[0]}}">\r\n      <div class="arc arc-fill arc-fore-90" ng-show="shipClass.frontArc == 90"></div>\r\n     <div class="arc arc-fill arc-fore-180" ng-show="shipClass.frontArc == 180"></div>\r\n       <div class="arc arc-rear-90" ng-show="shipClass.rearArc == 90"></div>\r\n       <div class="arc-hole"></div>\r\n        <div class="arc-name">{{getBaseTileName(ship)}}</div>\r\n       <div class="arc-stats">\r\n         <div class="arc-stat card-ship-stat-attack text-center">{{ship|valueOf:\'attack\':ship:fleet}}</div>\r\n            <div class="arc-stat card-ship-stat-agility text-center">{{ship|valueOf:\'agility\':ship:fleet}}</div>\r\n          <div class="arc-stat card-ship-stat-hull text-center">{{ship|valueOf:\'hull\':ship:fleet}}</div>\r\n            <div class="arc-stat card-ship-stat-shields text-center">{{ship|valueOf:\'shields\':ship:fleet}}</div>\r\n      </div>\r\n      <div class="arc-actions"><i ng-repeat="action in ship.actions" class="fs fs-{{action}}"></i></div>\r\n  </div>\r\n\r\n  <div class="card-image"></div>\r\n\r\n  <div class="card-corner-top-left pull-left">\r\n        <div class="card-corner-inner pull-right"></div>\r\n    </div>\r\n  <div class="card-corner-top-right pull-right">\r\n      <div class="card-corner-inner card-corner-inner-faction"></div>\r\n </div>\r\n  <div class="card-title-container text-center">\r\n      <span class="card-shipclass-title" ng-class="{\'card-title-long\': shipClass.name.length >= 20 }">{{shipClass.name | uppercase}}</span>\r\n </div>\r\n\r\n  <div class="card-border-left pull-left"></div>\r\n\r\n  <div class="card-border-right pull-right"></div>\r\n\r\n    <div class="card-class-maneuvers">\r\n      <div class="card-maneuver-row" ng-repeat="speed in speeds track by $index">\r\n         <div class="card-maneuver-box" ng-class="{\'speed-reverse\': speed < 0}"><span ng-show="speed != 9">{{abs(speed)}}</span></div>\r\n         <div class="card-maneuver-box" ng-class="{\'card-maneuver-box-highlight\': shipClass.maneuvers[speed].turn || shipClass.maneuvers[speed][\'90-degree-rotate\']}">\r\n               <i class="fs fs-turn-left speed-{{shipClass.maneuvers[speed].turn}}" ng-show="shipClass.maneuvers[speed].turn"></i>\r\n             <i class="fs fs-90-rotate-left speed-{{shipClass.maneuvers[speed][\'90-degree-rotate\']}}" ng-show="shipClass.maneuvers[speed][\'90-degree-rotate\']"></i>\r\n          </div>\r\n          <div class="card-maneuver-box" ng-class="{\'card-maneuver-box-highlight\': shipClass.maneuvers[speed].bank || shipClass.maneuvers[speed].spin || shipClass.maneuvers[speed].flank || shipClass.maneuvers[speed][\'45-degree-rotate\']}">\r\n                <i class="fs fs-bank-left speed-{{shipClass.maneuvers[speed].bank}}" ng-show="shipClass.maneuvers[speed].bank"></i>\r\n             <i class="fs fs-spin-left speed-{{shipClass.maneuvers[speed].spin}}" ng-show="shipClass.maneuvers[speed].spin"></i>\r\n             <i class="fs fs-left-flank speed-{{shipClass.maneuvers[speed].flank}}" ng-show="shipClass.maneuvers[speed].flank"></i>\r\n              <i class="fs fs-45-rotate-left speed-{{shipClass.maneuvers[speed][\'45-degree-rotate\']}}" ng-show="shipClass.maneuvers[speed][\'45-degree-rotate\']"></i>\r\n          </div>\r\n          <div class="card-maneuver-box" ng-class="{\'card-maneuver-box-highlight\': shipClass.maneuvers[speed].straight || shipClass.maneuvers[speed].stop}">\r\n                <i class="fs speed-{{shipClass.maneuvers[speed].straight}}" ng-class="{\'fs-forward\': speed > 0, \'fs-reverse\': speed < 0}" ng-show="shipClass.maneuvers[speed].straight"></i>\r\n                <i class="fs fs-stop speed-{{shipClass.maneuvers[speed].stop}}" ng-show="shipClass.maneuvers[speed].stop"></i>\r\n          </div>\r\n          <div class="card-maneuver-box" ng-class="{\'card-maneuver-box-highlight\': shipClass.maneuvers[speed].bank || shipClass.maneuvers[speed].spin || shipClass.maneuvers[speed].flank || shipClass.maneuvers[speed][\'45-degree-rotate\']}">\r\n                <i class="fs fs-bank-right speed-{{shipClass.maneuvers[speed].bank}}" ng-show="shipClass.maneuvers[speed].bank"></i>\r\n                <i class="fs fs-spin-right speed-{{shipClass.maneuvers[speed].spin}}" ng-show="shipClass.maneuvers[speed].spin"></i>\r\n                <i class="fs fs-right-flank speed-{{shipClass.maneuvers[speed].flank}}" ng-show="shipClass.maneuvers[speed].flank"></i>\r\n             <i class="fs fs-45-rotate-right speed-{{shipClass.maneuvers[speed][\'45-degree-rotate\']}}" ng-show="shipClass.maneuvers[speed][\'45-degree-rotate\']"></i>\r\n         </div>\r\n          <div class="card-maneuver-box" ng-class="{\'card-maneuver-box-highlight\': shipClass.maneuvers[speed].turn || shipClass.maneuvers[speed][\'90-degree-rotate\']}">\r\n               <i class="fs fs-turn-right speed-{{shipClass.maneuvers[speed].turn}}" ng-show="shipClass.maneuvers[speed].turn"></i>\r\n                <i class="fs fs-90-rotate-right speed-{{shipClass.maneuvers[speed][\'90-degree-rotate\']}}" ng-show="shipClass.maneuvers[speed][\'90-degree-rotate\']"></i>\r\n         </div>\r\n          <div class="card-maneuver-box" ng-class="{\'card-maneuver-box-highlight\': shipClass.maneuvers[speed].about}">\r\n              <i class="fs fs-come-about speed-{{shipClass.maneuvers[speed].about}}" ng-show="shipClass.maneuvers[speed].about"></i>\r\n          </div>\r\n      </div>\r\n  </div>\r\n\r\n  <div class="card-corner-bottom-left pull-left">\r\n     <div class="card-corner-inner"></div>\r\n   </div>\r\n  \r\n    <div class="card-corner-bottom-right pull-right">\r\n       <div class="card-corner-inner"></div>\r\n   </div>\r\n  \r\n    <div class="card-border-bottom"></div>\r\n\r\n  <div style="clear: both"></div>\r\n\r\n</div>'), a.put("card-ship.html", '<div class="card-outer card-ship font-staw" ng-class="{ \'card-unique\': ship.unique, \'card-mirror\': ship.mirror, \'dragging\': ship == dragStore.item }" draggable drag-item="ship" drag-store="dragStore" drag-source="dragSource">\r\n\r\n <div class="card-image"></div>\r\n\r\n  <div class="card-corner-top-left pull-left"><i ng-if="ship.unique" class="card-unique-icon fs fs-unique pull-left"></i>\r\n     <div class="card-corner-inner pull-right"></div>\r\n    </div>\r\n  <div class="card-corner-top-right pull-right"><i ng-repeat="faction in ship|valueOf:\'factions\':ship:fleet" class="card-ship-faction card-faction-{{faction}} card-faction-{{$index}} fs fs-blank" ng-class="{\'card-factions-multiple\': (ship|valueOf:\'factions\':ship:fleet).length > 1}"></i>\r\n     <div class="card-corner-inner card-corner-inner-faction"></div>\r\n </div>\r\n  <div class="card-title-container text-center">\r\n      <span class="card-title" ng-class="{\'card-title-long\': ship.name.length >= 20 }">{{ship.name | uppercase}}</span>\r\n </div>\r\n\r\n  <div class="card-ship-stats pull-left">\r\n     <div class="card-ship-stat card-ship-stat-attack text-right" tooltip-show="fleet" tooltip="ship|valueOf:\'attack\':ship:fleet:false:{modifiers:true}" tooltip-position="e"><span class="card-skill-plus" ng-show="ship.isShipModifier">+</span>{{ship|valueOf:\'attack\':ship:fleet}}</div>\r\n     <div class="card-ship-stat card-ship-stat-agility text-right" tooltip-show="fleet" tooltip="ship|valueOf:\'agility\':ship:fleet:false:{modifiers:true}" tooltip-position="e"><span class="card-skill-plus" ng-show="ship.isShipModifier">+</span>{{ship|valueOf:\'agility\':ship:fleet}}</div>\r\n      <div class="card-ship-stat card-ship-stat-hull text-right" tooltip-show="fleet" tooltip="ship|valueOf:\'hull\':ship:fleet:false:{modifiers:true}" tooltip-position="e"><span class="card-skill-plus" ng-show="ship.isShipModifier">+</span>{{ship|valueOf:\'hull\':ship:fleet}}</div>\r\n       <div class="card-ship-stat card-ship-stat-shields text-right" tooltip-show="fleet" tooltip="ship|valueOf:\'shields\':ship:fleet:false:{modifiers:true}" tooltip-position="e"><span class="card-skill-plus" ng-show="ship.isShipModifier">+</span>{{ship|valueOf:\'shields\':ship:fleet}}</div>\r\n  </div>\r\n\r\n  <div class="card-border-right pull-right"></div>\r\n\r\n    <div class="card-ship-silhouette pull-left"></div>\r\n\r\n  <div class="card-ship-class-container text-center">\r\n     <span class="card-ship-class" ng-class="{\'card-ship-class-long\': ship.class.length >= 25 }">{{ship.class | uppercase}}</span>\r\n </div>\r\n\r\n  <div class="card-text font-staw-alt"><div class="card-text-inner" ng-bind-html="ship.text | icons" ng-class="{\'card-text-inner-long\': ship.text.length > 230 }"></div></div>\r\n\r\n  <div class="card-ship-action-bar text-center">\r\n      <i ng-repeat="action in ship.actions" class="fs fs-{{action}}"></i>\r\n </div>\r\n\r\n  <div class="card-corner-bottom-right pull-right">\r\n       <div class="card-corner-inner"></div>\r\n   </div>\r\n\r\n  <div class="card-ship-cost pull-right">{{ship.cost}}</div>\r\n\r\n  <div class="card-ship-upgrade-bar">\r\n     <i ng-repeat="upgrade in ship.upgrades track by $index" class="fs fs-{{upgrade.type[0]}}" ng-class="{\'card-ship-upgrade-occupied\': upgrade.occupant}"></i>\r\n    </div>\r\n\r\n  <div style="clear: both"></div>\r\n\r\n</div>'), a.put("card-token.html", '<div class="card-outer card-token font-staw">\r\n\r\n  <div class="card-token-header">\r\n     <span class="card-title" ng-class="{\'card-title-long\': token.name.length > 20}">{{token.name | uppercase}}</span>\r\n </div>\r\n\r\n  <div class="card-text">\r\n     <div class="card-text-inner font-staw-alt" ng-bind-html="token.text | icons"></div>\r\n </div>\r\n\r\n</div>'), a.put("card-upgrade.html", '<div class="card-outer card-upgrade font-staw" ng-class="{ \'card-unique\': upgrade.unique, \'card-mirror\': upgrade.mirror, \'dragging\': upgrade == dragStore.item }" draggable drag-item="upgrade" drag-store="dragStore" drag-source="dragSource">\r\n\r\n    <div class="card-image"></div>\r\n\r\n  <div class="card-corner-top-left pull-left"><i ng-if="upgrade.unique" class="card-unique-icon fs fs-unique pull-left"></i>\r\n      <div class="card-corner-inner pull-right"></div>\r\n    </div>\r\n\r\n  <div class="card-title-container text-left">\r\n        <span ng-if="upgrade.showType" class="card-captain pull-right">{{upgrade.type|uppercase|removeDashes}}</span>\r\n       <span ng-if="upgrade|valueOf:\'attack\':ship:fleet" class="card-weapon-attack pull-right" tooltip-show="ship" tooltip="upgrade|valueOf:\'attack\':ship:fleet:false:{modifiers:true}">{{upgrade|valueOf:\'attack\':ship:fleet}}</span>\r\n       <span class="card-title"\r\n            ng-class="{ \'card-title-long\': upgrade.name.length >= 24 || (upgrade.showType && upgrade.name.length + upgrade.type.length >= 24) || (upgrade.attack && upgrade.name.length >= 20),\r\n                       \'card-title-super-long\': upgrade.name.length >= 31 || upgrade.showType && upgrade.name.length + upgrade.type.length >= 31,\r\n            }">{{upgrade.name | uppercase}}</span>\r\n  </div>\r\n\r\n  <div class="card-border-left pull-left"></div>\r\n\r\n  <div class="card-text">\r\n     <div ng-if="upgrade.range" class="card-weapon-range pull-right">{{upgrade|valueOf:\'range\':ship:fleet}}</div>\r\n      <div class="card-text-inner font-staw-alt" ng-bind-html="upgrade.text | icons" ng-class="{\'card-text-inner-long\': upgrade.text.length > 300, \'card-text-inner-super-long\': upgrade.text.length > 530, \'text-left\': upgrade.range }"></div>\r\n    </div>\r\n\r\n  <div class="card-upgrade-cost pull-right"><div ng-repeat="faction in upgrade|valueOf:\'factions\':ship:fleet" class="card-upgrade-faction card-faction-{{ (upgrade|valueOf:\'factions\':ship:fleet).length - $index}}"><div class="card-upgrade-faction-black"></div><div class="card-upgrade-faction-icon card-faction-{{faction}}"></div></div><div class="card-upgrade-cost-value" ng-class="{\'card-upgrade-cost-free\': \'{{upgrade|valueOf:\'free\':ship:fleet}}\' }" tooltip-show="ship" tooltip="upgrade|valueOf:\'cost\':ship:fleet:false:{modifiers:true}">{{upgrade|valueOf:\'cost\':ship:fleet}}</div></div>\r\n\r\n    <div ng-if="upgrade.type == \'captain\' || upgrade.type == \'admiral\' || (upgrade|valueOf:\'skill\':ship:fleet)" class="card-skill-container pull-left">\r\n       <div class="card-skill" tooltip-show="ship" tooltip="upgrade|valueOf:\'skill\':ship:fleet:false:{modifiers:true}" tooltip-position="nw-alt"><span class="card-skill-plus" ng-show="upgrade.isSkillModifier && upgrade.skill >= 0">+</span>{{upgrade|valueOf:\'skill\':ship:fleet}}</div>\r\n    </div>\r\n\r\n  <div ng-if="!(upgrade|valueOf:\'skill\':ship:fleet) && upgrade.type != \'captain\' && upgrade.type != \'admiral\' " class="card-upgrade-type pull-left fs fs-{{upgrade.type}}"></div>\r\n\r\n   <div class="card-border-bottom">\r\n        <i ng-if="upgrade.talents" ng-repeat="talent in range(upgrade.talents) track by $index" class="fs fs-talent"></i>\r\n       <i ng-repeat="slot in upgrade.upgradeSlots track by $index" ng-if="slot.showOnCard" class="fs fs-{{slot.type[0]}}" ng-class="{\'card-upgrades-long\': upgrade.upgradeSlots.length > 2}"></i>\r\n    </div>\r\n\r\n  <div style="clear: both"></div>\r\n\r\n</div>'), a.put("card.html", '<div ng-if="card" ng-switch on="card.type">\r\n  <card-ship          ng-switch-when="ship" ship="card" drag-store="dragStore" drag-source="dragSource" fleet="fleet"></card-ship>\r\n    <card-ship          ng-switch-when="flagship" ship="card" drag-store="dragStore" drag-source="dragSource" fleet="fleet"></card-ship>\r\n    <card-ship-class    ng-switch-when="ship-class" ship-class="card" ship="ship" fleet="fleet"></card-ship-class>\r\n  <card-resource      ng-switch-when="resource" resource="card" drag-store="dragStore" drag-source="dragSource" ship="ship" fleet="fleet"></card-resource>\r\n    <card-token         ng-switch-when="token" token="card" drag-store="dragStore" drag-source="dragSource" ship="ship" fleet="fleet"></card-token>\r\n <card-faction       ng-switch-when="faction" faction="card" drag-store="dragStore" drag-source="dragSource" ship="ship" fleet="fleet"></card-faction>\r\n   <card-upgrade       ng-switch-default upgrade="card" drag-store="dragStore" drag-source="dragSource" ship="ship" fleet="fleet"></card-upgrade>\r\n</div>')
}]);
//# sourceMappingURL=utopia.min.js.map
