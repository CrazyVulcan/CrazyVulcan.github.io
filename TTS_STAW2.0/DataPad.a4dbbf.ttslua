-- List Builder for X-Wing 2.0
-- ~~~~~~
-- Script by Johnny Cheese
--
-- This module creates a set of buttons and text input on an object.
-- Script has 3 main modules: FFG spawner, TTS spawner and Squad Builder.
-- FFG spawner receives the link for a saved FFG web site squad and spawns said squad.
-- TTS spawner receives a string containingthe name of all pilots and upgrades and set up a table wich will be passed to the global newSpawner function.
-- Squad Builder offers options to build a squad, but does not apply any restrictions other than faction specific cards.
-- The cards with the same name are diferentiated by faction when possible, and will if needed, the script inquires the player wich version is being summoned.
-- The inquire happens in cases of pilots on the same faction using different ships (Sabine, Ezra, "Zeb") and in cases of upgrades with the same name (R2-D2 crew and astromech)
-- ~~~~~~


self.interactable = false


-- List and cost of variable cost upgrades based on base sizea
varCostS={}
varCostS[296] = {[1] = 2, [2] = 4,[3] = 7} --Engine Upgrade
varCostS[234] = {[1] = 2, [2] = 4,[3] = 6} --Expert Handling
varCostS[489] = {[1] = 3, [2] = 6,[3] = 9} --Hate
varCostS[612] = {[1] = 7, [2] = 8,[3] = 9} --Snap Shot

-- List and cost of variable cost upgrades based on agility value
varCostA={}
varCostA[282] = {[0] = 3,[1] = 5,[2] = 7,[3] = 9} --R2 Astromech
varCostA[297] = {[0] = 2,[1] = 3,[2] = 5,[3] = 7} --Hull Upgrade
varCostA[299] = {[0] = 3,[1] = 4,[2] = 6,[3] = 8} --Shield Upgrade
varCostA[301] = {[0] = 3,[1] = 4,[2] = 6,[3] = 8} --Stealth Device
varCostA[315] = {[0] = 4,[1] = 6,[2] = 8,[3] = 10} --R2-D2 (Astromech)

varCostI={}
varCostI[245]={[0]=2,[1]=4,[2]=6,[3]=8,[4]=10,[5]=12,[6]=14} --Squad Leader
varCostI[246]={[0]=3,[1]=3,[2]=3,[3]=3,[4]=3,[5]=4,[6]=5} --Swarm Tactics
varCostI[276]={[0]=2,[1]=3,[2]=4,[3]=5,[4]=6,[5]=7,[6]=8} --Seasoned Navigator
varCostI[290]={[0]=0,[1]=1,[2]=2,[3]=3,[4]=4,[5]=5,[6]=6} --Inertial Dampeners
varCostI[463]={[0]=4,[1]=5,[2]=6,[3]=7,[4]=8,[5]=9,[6]=10} -- Primed Thrusters
varCostI[251]={[0]=4,[1]=4,[2]=4,[3]=8,[4]=16,[5]=24,[6]=32} --Supernatural Reflexes
varCostI[479]={[0]=2,[1]=3,[2]=4,[3]=5,[4]=6,[5]=7,[6]=8} -- BB8
varCostI[480]={[0]=0,[1]=1,[2]=2,[3]=3,[4]=4,[5]=5,[6]=6} -- bb astromech
varCostI[545]={[0]=0,[1]=2,[2]=4,[3]=6,[4]=8,[5]=10,[6]=12} -- Battle Meditation
varCostI[548]={[0]=14,[1]=15,[2]=16,[3]=17,[4]=18,[5]=19,[6]=20} -- Delta-7B
varCostI[549]={[0]=0,[1]=0,[2]=1,[3]=2,[4]=3,[5]=5,[6]=5} -- Calibrated laser Targeting
varCostI[614]={[0]=3,[1]=3,[2]=3,[3]=4,[4]=7,[5]=10,[6]=13} -- Precognitive Reflexes
varCostI[610]={[0]=12,[1]=12,[2]=12,[3]=12,[4]=14,[5]=21,[6]=28} -- Ensnare

--tables referenced by upgrades that adds actions to ships
addAction={}
addAction[294]={[1]='B'} --Afterbuners
addAction[231]={[1]='Dare'} --Daredevil
addAction[232]={[1]='E'} --Debris Gambit
addAction[304]={[1]='C'} --C3PO Reb
addAction[311]={[1]='F',[2]='E'} --Lando Calrissian Reb
addAction[313]={[1]='TL'} --Magva Yarro
addAction[474]={[1]='E'} --Han Solo Res
addAction[327]={[1]='E'}--Millenium Falcon Reb (E)
addAction[472]={[1]='C'}--C-3PO Res (C)
addAction[616]={[1]='C'}--C-3PO Rep (C)
addAction[475]={[1]='TL'}--Rose Tico (TL)
addAction[331]={[1]='Piv'}--Pivot Wing (Pivot)
addAction[332]={[1]='Piv'}--Pivot Wing (Pivot)
addAction[333]={[1]='B'}--Servomotor (B)
addAction[334]={[1]='B'}--Servomotor (B)
addAction[251]={[1]='B',[2]='BR'}--Supernatural Reflexes (B,BR)
addAction[479]={[1]='BR'}--BB-8 (B,BR)
addAction[480]={[1]='BR'}--BB Astro (BR)
addAction[340]={[1]='TL'}--Krennic (TL)
addAction[486]={[1]='BR'}--Integrated S-Foils (BR)
addAction[487]={[1]='BR'}--Integrated S-Foils (BR)
addAction[345]={[1]='R'}--Minister Tua (Reinforce)
addAction[531]={[1]='C'}--Kraken(C)
addAction[352]={[1]='C'}-- 0-0-0 (C)
addAction[535]={[1]='Piv'}--Grappling Struts (Pivot)
addAction[555]={[1]='Piv'}--Grappling Struts (Pivot)
addAction[594]={[1]='Piv'}--Landing Struts(Pivot)
addAction[595]={[1]='Piv'}--Landing Struts(Pivot)
addAction[355]={[1]='B'}--Cad Bane (B)
addAction[357]={[1]='C'}--IG-88D (C)
addAction[542]={[1]='CL'}--Scimitar (CL)
addAction[286]={[1]='CL'}--Cloaking Device (CL)
addAction[551]={[1]='C'}--R4-P44 (C)
addAction[577]={[1]='C'}--Passive Sensors(C,TL)
addAction[376]={[1]='BR'}--Mist Hunter(BR)
addAction[582]={[1]='C'}--GA-97(C)
addAction[381]={[1]='F'}--Composure(F)
addAction[587]={[1]='C'}--PZ-4CO (C)
addAction[593]={[1]='R'}--Angled Deflectors (Reinforce)
addAction[704]={[1]='C'}--K-2SO (C)

--table referenced by upgrades that adds actions to all ships in a squad.
addSqdAction={}
addSqdAction[309]={[1]='E'} --Jyn Erso
addSqdAction[337]={[1]='Piv'}--Ciena Ree (Pivot)
addSqdAction[346]={[1]='B'}--Moff Jerjerrod (B)
addSqdAction[538]={[1]='F'}--Darth Sidious (F)
addSqdAction[554]={[1]='TL'}--Synchronized Console (TL)

-- FFG uses full name on factions, so a conversion is needed
STAWFaction = {}
STAWFaction[0] = 'Dum'
STAWFaction[1] = 'Fed'
STAWFaction[2] = 'Kli'
STAWFaction[3] = 'Rom'
STAWFaction[4] = 'Dom'
STAWFaction[5] = 'Ind'
STAWFaction[6] = 'Brg'
STAWFaction[7] = 'MU'
STAWFaction[8] = '8472'

cardBackDB = {}
cardBackDB['Dum'] = ''
cardBackDB['Fed'] = 'http://raw.githubusercontent.com/CrazyVulcan/TTS_STAW2.0/master/assets/textures/cardback/Rebelback.png'
cardBackDB['Kli'] = 'http://raw.githubusercontent.com/CrazyVulcan/TTS_STAW2.0/master/assets/textures/cardback/Empireback.png'
cardBackDB['Rom'] = 'http://raw.githubusercontent.com/CrazyVulcan/TTS_STAW2.0/master/assets/textures/cardback/Scumback.png'
cardBackDB['Dom'] = 'http://raw.githubusercontent.com/CrazyVulcan/TTS_STAW2.0/master/assets/textures/cardback/Resback.jpg'
cardBackDB['Ind'] = 'http://raw.githubusercontent.com/CrazyVulcan/TTS_STAW2.0/master/assets/textures/cardback/FOback.png'
cardBackDB['Brg'] = 'http://raw.githubusercontent.com/CrazyVulcan/TTS_STAW2.0/master/assets/textures/cardback/REPback.jpg'
cardBackDB['MU'] = 'http://raw.githubusercontent.com/CrazyVulcan/TTS_STAW2.0/master/assets/textures/cardback/CISback.jpg'
cardBackDB['8472'] = 'http://raw.githubusercontent.com/CrazyVulcan/TTS_STAW2.0/master/assets/textures/cardback/CISback.jpg'





-- Attempt on Unified Data Base, based on XWS (dropped after w1, too much hassle) and FFG conversion table
masterShipDB={}
masterShipDB[0]={['name']='',['Shield']=0,['size']=1,['agi']=1,['XWS']='',['Fac']={[0]=true},['arcs']={'front'}}

masterShipDB[1]={['name']='Modified YT-1300',['Shield']=5,['dTurret']=1,['size']=3,['agi']=1,['XWS']='modifiedyt1300lightfreighter', ['Fac']={[1]=true}, ['arcs']={'doubleturret'},
                            ['moveSet']={'wbl1','bs1','wbr1','wtl2','bbl2','bs2','bbr2','wtr2','rbl3s','wtl3','wbl3','bs3','wbr3','wtr3','rbr3s','ws4','rk4'}}
--masterShipDB[2]={['name']='',['Shield']=0,['size']=0,['agi']=0,['XWS']='', ['Fac']={[0]=true}}
masterShipDB[3]={['name']='StarViper',['Shield']=1,['size']=1,['agi']=3,['XWS']='starviperclassattackplatform', ['Fac']={[3]=true}, ['arcs']={'front'},
                ['moveSet']={'wtl1','bbl1','bs1','bbr1','wtr1','wtl2','bbl2','bs2','bbr2','wtr2','rbl3s','wbl3','bs3','wbr3','rbr3s','ws4' } }
masterShipDB[4]={['name']='Scurrg H6 Bomber',['Shield']=4,['size']=2,['agi']=1,['XWS']='scurrgh6bomber', ['Fac']={[3]=true}, ['arcs']={'front'},
                            ['moveSet']={'bbl1','bs1','bbr1','wtl2','wbl2','bs2','wbr2','wtr2','rtl3t','rtl3','wbl3','ws3','wbr3','rtr3','rtr3t','rs4'}}



masterCaptainDB={}
masterCaptainDB[0]={['name']='',['Faction']= 0,['ship_type']=0,['cost']=0,['slot']={},['Shield']=0,['card']='',['cardB']='',['init']=0,['actSet']={}}

masterCaptainDB[]={['name']='Wedge Antilles',['Faction']= 1,['ship_type']=33,['cost']=55,['slot']={1, 5, 10, 14, 18},['Shield']=2,
                  ['card']='http://sb-cdn.fantasyflightgames.com/card_images/Card_Pilot_1.png',['init']=6,['actSet']={'F','TL', 'BR'}}
masterCaptainDB[]={['name']='Luke Skywalker',['Faction']= 1,['ship_type']=33,['cost']=62,['slot']={17, 5, 10, 14, 18},['Shield']=2,['Force']=2,
                  ['card']='http://sb-cdn.fantasyflightgames.com/card_images/Card_Pilot_2.png',['init']=5,['actSet']={'F','TL', 'BR'}}
masterCaptainDB[]={['name']='Thane Kyrell',['Faction']= 1,['ship_type']=33,['cost']=48,['slot']={1, 5, 10, 14, 18},['Shield']=2,
                  ['card']='http://sb-cdn.fantasyflightgames.com/card_images/Card_Pilot_3.png',['init']=5,['actSet']={'F','TL', 'BR'}}
masterCaptainDB[]={['name']='Garven Dreis',['Faction']= 1,['ship_type']=33,['cost']=47,['slot']={1, 5, 10, 14, 18},['Shield']=2,
                  ['card']='http://sb-cdn.fantasyflightgames.com/card_images/Card_Pilot_4.png',['init']=4,['actSet']={'F','TL', 'BR'}}





masterUpgradesDB={}

masterUpgradesDB[]={['name']='Crack Shot',['slot']=1,['cost']=1,['Charge']=1,['card']='http://sb-cdn.fantasyflightgames.com/card_images/Card_Upgrade_1.png',['restriction']={ }}
masterUpgradesDB[]={['name']='Daredevil',['slot']=1,['cost']=2,['card']='http://sb-cdn.fantasyflightgames.com/card_images/Card_Upgrade_2.png',['restriction']={['Size']={[1]=true}}}
masterUpgradesDB[]={['name']='Debris Gambit',['slot']=1,['cost']=4,['card']='http://sb-cdn.fantasyflightgames.com/card_images/Card_Upgrade_3.png',['restriction']={['Size']={[1]=true,[2]=true}}}
masterUpgradesDB[]={['name']='Elusive',['slot']=1,['cost']=3,['Charge']=1,['card']='http://sb-cdn.fantasyflightgames.com/card_images/Card_Upgrade_4.png',['restriction']={['Size']={[1]=true,[2]=true}}}
masterUpgradesDB[]={['name']='Expert Handling',['slot']=1,['cost']='s',['card']='http://sb-cdn.fantasyflightgames.com/card_images/Card_Upgrade_5.png',['restriction']={ }}










ffgSpecial = {}
ffgSpecial[315]= 'Crew'--r2d2crew
ffgSpecial[324]= 'Astr'--r2d2astro
ffgSpecial[321]= 'Rebel Gunner'--hanReb
ffgSpecial[389]= 'Scum Gunner'--hanScu
ffgSpecial[474]= 'Resist. Crew'--Han Res
ffgSpecial[311]= 'Rebel Crew'--landoReb
ffgSpecial[385]= 'Scum Crew' --landoScu
ffgSpecial[306]= 'Rebel Crew' --chewReb
ffgSpecial[382]= 'Scum Crew' --chewScu
ffgSpecial[473]= 'Resist. Crew' --chewRes
ffgSpecial[472]= 'Resist. Crew'--3po Res
ffgSpecial[304]= 'Rebel Crew' --3po Reb


-- on load initiate the process
function onLoad()
    initiate()
end

-- Initial function: Creates a start button for each mode: FFG Spawner (paste the link of the squad in the FFG web site and spawn), TTS Spawner (write or paste a snippet and spawn) and List Builder (offers options to build a squadron on the fly)
function initiate()
    self.clearButtons()
    self.clearInputs()
    self.createButton({click_function = 'ffgStart', function_owner = self, label = 'FFG Spawner', position = {0,0.45,-0.2}, width = 1600, height = 380, font_size = 250, scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'singleSpawner', function_owner = self, label = 'Single Spawner', position = {0,0.45,0.1}, width = 1600, height = 380, font_size = 200, scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'spawnerStart', function_owner = self, label = 'TTS Spawner', position = {0,0.45,0.4}, width = 1600, height = 380, font_size = 250, scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'builderStart', function_owner = self, label = 'Builder', position = {0,0.45,0.7}, width = 1600, height = 380, font_size = 250, scale = {0.25,0.25,0.25}})
end


--Spawn from FFG squad shareable link. User must paste his link on the input field, load the squad, then press the spawn squad button. Maybe streamline the process and do it with one button?
function ffgStart()
    self.clearButtons()
    self.createButton({click_function = 'DummyFFG', function_owner = self, label = 'Paste squad link', position = {0,0.45,-0.3}, width = 1800, height = 520, font_size = 240,  scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'ffgLoad', function_owner = self, label = 'Load Squad', position = {0,0.45,0.6}, width = 1800, height = 520, font_size = 240,  scale = {0.15,0.15,0.15}})
    self.createInput({input_function = 'action2', function_owner = self, position = {0,0.45,0.2}, width = 1000, height = 500, font_size = 50, scale = {0.5,0.5,0.5}})
    self.createButton({click_function = 'FFGinitiate', function_owner = self, label = 'Back', position = {-0.5,0.45,0.8}, width = 1000, height = 300, font_size = 150,  scale = {0.21,0.21,0.21}})
    --self.createButton({click_function = 'printInput', function_owner = self, label = 'Print Input', position = {0,0.6,0.5}, width = 1000, height = 200, font_size = 150, tooltip = 'Print'})
    --self.createButton({click_function = 'parseList', function_owner = self, label = 'Parse', position = {0,0,3.2}, width = 1000, height = 200, font_size = 150, tooltip = 'Parse'})
end

function DummyFFG()
end

--prepares the link and call the json extractor
function FFGinitiate()
    if lista ~= nil then
        lista =  nil
    end
    if partList ~= nil then
        partList = nil
    end
    initiate()
end

--takes a link and converts it for the API link
function ffgLoad()
    if lista ~= nil then
        lista = string.gsub(lista, 'saved%-squads', 'api/squads')
        lista = string.gsub(lista, 'squad%-builder/tool', 'api/squads')
        ffgLoad2(lista)
    else
        print ('Please paste a link')
    end
end

function ffgClearName(string)  --Clars FFG name from all of their shenannigans
    name = string.gsub(string, '•', '')
    name = string.gsub(name, '’', '')
    name = string.gsub(name, '”', '"')
    name = string.gsub(name, '��', '"')
    name = string.gsub(name, '<italic>', '') --So stupid....
    name = string.gsub(name, '</italic>', '')
    name = string.gsub(name, ' %(Open%)', '')
    newName = string.gsub(name, ' %(Closed%)', '')
    return newName
end

--parses and organize the extracted json table and calls the spawner (TO-DO)
function ffgSpawn()
    if JSONlist ~=nil then
        partList = {}
        partList.Pilots = {}
        partList.Upgrades = {}
        partList.spawnCard = self
        partList.Faction = JSONlist['faction']['id']
        for k,v in pairs (JSONlist.deck) do
            --[[
            for key, value in pairs(v["pilot_card"]) do
                print(key)
            end
            --]]
            partList.Pilots[k] = v['pilot_card']['id']
            --[[
            print("Pilot Name: "..v["pilot_card"]['name'])
            print("Pilot ID: "..v['pilot_card']['id'])
            print("Pilot Cost: "..v['pilot_card']['cost'])
            print("Ship Type: "..v['pilot_card']['ship_type'])
            print()--]]
            partList.Upgrades[k] ={}
            for key,value in pairs (v['slots']) do
                partList.Upgrades[k][key] = value['id']
                --[[
                for i, uval in pairs(value) do
                    print("upgrade[" .. tostring(i) .. "]=" .. tostring(uval))
                end
                print("Upgrade Name: "..value['name'])
                print("Upgrade Id: "..value['id'])
                print("Upgrade Cost: "..value['cost'])
                print()
                --]]

            end
        end
        idSpawner(partList)
        partList = nil
        JSONlist = nil
        lista = nil
        FFGinitiate()
    else
        print('Please paste a link')
    end

end

--Extracts the json table from FFG site, reporting success or failure
function ffgLoad2(squadId, onLoaded)
    squadJson = squadId
    WebRequest.get(squadJson, function(request)
        if request.is_error then
            error("Failed to load squad JSON.")
        elseif request.is_done then
            --list = JSON.decode(request.text)
            JSONlist = JSON.decode(request.text)
            print("You've loaded a squad: "..JSONlist.name)
            print()
            ffgSpawn()
        end
    end)
end

--FFG spawner input field
function action2(obj, playerColor, value, editing)
    if not editing then
        lista = value
    else
        nl_index = string.find(value, '\n')
        if nl_index != nil then
            lista = string.sub(value, 1,nl_index-1)
            ffgLoad()
        end
    end
end

--TTS spawner input field
function action(obj, playerColor, value, editing)
    if not editing then
        lista = value
    else
        nl_index = string.find(value, '\n')
        if nl_index != nil then
            lista = string.sub(value, 1,nl_index-1)
            validCheck()
        end
    end
end

-- Single Spawner input field
function action3(obj, playerColor, value, editing)
    if not editing then
        single = value
    else
        nl_index = string.find(value, '\n')
        if nl_index != nil then
            single = string.sub(value, 1,nl_index-1)
            singleSearch()
        end
    end
end

-- Single Spawner: Receives a string, then goes across all card names and spawns that card with its appropriate components.
function singleSpawner()
    self.clearInputs()
    self.clearButtons()
    self.createButton({click_function = 'DummyFFG', function_owner = self, label = 'Type a card name', position = {0,0.45,-0.37}, width = 1800, height = 280, font_size = 200,  scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'singleSearch', function_owner = self, label = 'Search', position = {0.45,0.45,-0.17}, width = 1200, height = 320, font_size = 200,  scale = {0.15,0.15,0.15}})
    self.createInput({input_function = 'action3', function_owner = self, position = {-0.3,0.45,-0.17}, width = 1800, height = 200, font_size = 160, scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'initiate', function_owner = self, label = 'Back', position = {0.7,0.45,0.8}, width = 1000, height = 300, font_size = 150,  scale = {0.21,0.21,0.21}})
    self.createButton({click_function = 'DummyFFG', function_owner = self, label = 'Pilots', position = {-0.45,0.45,-0.025}, width = 1000, height = 280, font_size = 200,  scale = {0.20,0.20,0.20}})
    self.createButton({click_function = 'DummyFFG', function_owner = self, label = 'Upgrades', position = {0.45,0.45,-0.025}, width = 1000, height = 280, font_size = 200,  scale = {0.20,0.20,0.20}})
end

function singleSearch()
    self.clearButtons()
    self.clearInputs()
    singleSpawner()
    butPilCount = 0
    butPilData = {}
    butUpCount = 0
    butUpData = {}
    if single ~= nil then
        for k, v in pairs(masterPilotDB) do
            if string.find(string.lower(v['name']), string.lower(single), 1, true) then
                if butPilCount < 7 then
                    butPilCount = butPilCount + 1
                    self.createButton({click_function = 'singlePil'..butPilCount, function_owner = self, label = v['name']..' ('..masterShipDB[v['ship_type']]['name']..')', position = {-0.45,0.45,0+butPilCount*0.09}, width = 2800, height = 230, font_size = 120,  scale = {0.15,0.15,0.15}})
                    butPilData[butPilCount] = k
                end
            end
        end
        for k, v in pairs(masterUpgradesDB) do
            if string.find(string.lower(v['name']), string.lower(single), 1, true) then
                if butUpCount < 7 then
                    butUpCount = butUpCount+1
                    local upName = v['name']
                    if ffgSpecial[k] ~= nil then
                        upName = upName..' ('..ffgSpecial[k]..')'
                    end
                    butUpData[butUpCount] = k
                    self.createButton({click_function = 'singleUp'..butUpCount, function_owner = self, label = upName, position = {0.45,0.45,0+butUpCount*0.09}, width = 2800, height = 230, font_size = 120,  scale = {0.15,0.15,0.15}})
                end
            end
        end
    else
        print('Please type a card name')
    end
    single = nil
end

function singlePil1()
    local pilotPick = butPilData[1]
    singlePilotSpawn(pilotPick)
end
function singlePil2()
    local pilotPick = butPilData[2]
    singlePilotSpawn(pilotPick)
end
function singlePil3()
    local pilotPick = butPilData[3]
    singlePilotSpawn(pilotPick)
end
function singlePil4()
    local pilotPick = butPilData[4]
    singlePilotSpawn(pilotPick)
end
function singlePil5()
    local pilotPick = butPilData[5]
    singlePilotSpawn(pilotPick)
end
function singlePil6()
    local pilotPick = butPilData[6]
    singlePilotSpawn(pilotPick)
end
function singlePil7()
    local pilotPick = butPilData[7]
    singlePilotSpawn(pilotPick)
end

function singleUp1()
    local upPick = butUpData[1]
    singleUpSpawn(upPick)
end
function singleUp2()
    local upPick = butUpData[2]
    singleUpSpawn(upPick)
end
function singleUp3()
    local upPick = butUpData[3]
    singleUpSpawn(upPick)
end
function singleUp4()
    local upPick = butUpData[4]
    singleUpSpawn(upPick)
end
function singleUp5()
    local upPick = butUpData[5]
    singleUpSpawn(upPick)
end
function singleUp6()
    local upPick = butUpData[6]
    singleUpSpawn(upPick)
end
function singleUp7()
    local upPick = butUpData[7]
    singleUpSpawn(upPick)
end


function singlePilotSpawn(Id)
    partList={}
    partList.spawnCard = self
    partList.Pilots = {}
    partList.Pilots[1] = Id
    partList.Upgrades = {}
    partList.Upgrades[1] = {}
    partList.Faction = masterPilotDB[Id]['Faction']
    idSpawner(partList)
    singleSpawner()
end

function singleUpSpawn(upId)
    partList={}
    partList.spawnCard = self
    partList.Pilots = {}
    partList.Pilots[1] = 0
    partList.Upgrades = {}
    partList.Upgrades[1] = {}
    partList.Upgrades[1][1] = upId
    partList.Faction = STAWFaction[0]
    idSpawner(partList)
    singleSpawner()
end

--[[
    id table should look like this:
    idTable.Pilots = {[1]=id1, [2]=id2}
    idTable.Upgrades = {[1] = {[1]=upId1, [2]=upId2},
                        [2]={[1]=upId3, [2]=upId3}}
    idTable.Faction = masterPilotDB[id1]['Faction']
]]

dialSkin={
  [1]='http://raw.githubusercontent.com/CrazyVulcan/TTS_STAW2.0/master/assets/dial/skin/Rebel.png',
  [2]='http://raw.githubusercontent.com/CrazyVulcan/TTS_STAW2.0/master/assets/dial/skin/Empire.png',
  [3]='http://raw.githubusercontent.com/CrazyVulcan/TTS_STAW2.0/master/assets/dial/skin/Scum.png',
  [4]='http://raw.githubusercontent.com/CrazyVulcan/TTS_STAW2.0/master/assets/dial/skin/Resistance.png',
  [5]='http://raw.githubusercontent.com/CrazyVulcan/TTS_STAW2.0/master/assets/dial/skin/FO.png',
  [6]='http://raw.githubusercontent.com/CrazyVulcan/TTS_STAW2.0/master/assets/dial/skin/Republic.png',
  [7]='http://raw.githubusercontent.com/CrazyVulcan/TTS_STAW2.0/master/assets/dial/skin/CIS.png',}

function idSpawner(idTable)
    fList={}
    fList.Pilots = {}
    fList.Upgrades = {}
    if idTable.Faction == nil then
        fList.Faction = masterPilotDB[idTable.Pilots[1]]['Faction']
    else
        fList.Faction = idTable.Faction
    end
    fList.factionDial=dialSkin[fList.Faction]
    fList.sqdAction = {}
    for k,v in pairs (idTable.Pilots) do
        local name = masterPilotDB[v]['name']
        fList.Pilots[k] ={}
        fList.Pilots[k]['id'] = v
        fList.Pilots[k]['name'] = name
        fList.Pilots[k]['card'] = masterPilotDB[v]['card']
        fList.Pilots[k]['cardB'] = cardBackDB[STAWFaction[fList.Faction]]
        local Ship = masterPilotDB[v]['ship_type']
        fList.Pilots[k]['Ship'] = Ship
        fList.Pilots[k]['Size'] = masterShipDB[Ship]['size']
        fList.Pilots[k]['Shield'] = masterShipDB[Ship]['Shield']
        fList.Pilots[k]['bombD'] = 's1'
        fList.Pilots[k]['Data'] = {}
        fList.Pilots[k]['Data']['moveSet'] = masterShipDB[Ship]['moveSet']
        fList.Pilots[k]['Data']['arcs'] = masterShipDB[Ship]['arcs']
        fList.Pilots[k]['Data']['actSet'] = masterPilotDB[v]['actSet']
        fList.Pilots[k]['Data']['Faction'] = fList.Faction
        fList.Pilots[k]['Data']['Size'] = fList.Pilots[k]['Size']
        if v == 150 then  -- Emon Azzameen special drops
            fList.Pilots[k]['bombD'] = fList.Pilots[k]['bombD'] .. ':s3:tr3:te3'
        elseif v == 205 then  -- Sol Sixxa special drops
            fList.Pilots[k]['bombD'] = fList.Pilots[k]['bombD'] .. ':te1:tr1'
        elseif Ship == 19 then -- TIE Bomber special drops
            fList.Pilots[k]['bombD'] = fList.Pilots[k]['bombD'] .. ':be1:br1'
        end

        if masterShipDB[Ship]['sTurret'] ~= nil then
            fList.Pilots[k]['Turret'] = 1
        elseif masterShipDB[Ship]['dTurret'] ~= nil then
            fList.Pilots[k]['Turret'] = 2
        end
        id = v
        if masterPilotDB[id]['Condition'] ~= nil then
            fList.Pilots[k]['Condition'] = masterPilotDB[id]['Condition']
        end
        if masterPilotDB[id]['Charge'] ~= nil then
            fList.Pilots[k]['Charge'] = masterPilotDB[id]['Charge']
        else
            fList.Pilots[k]['Charge'] = 0
        end
        if masterPilotDB[id]['Force'] ~= nil then
            fList.Pilots[k]['Force'] = masterPilotDB[id]['Force']
        else
            fList.Pilots[k]['Force'] = 0
        end
        fList.Upgrades[k] = {}
        local skilled_bombardier = false
        for key,value in pairs (idTable.Upgrades[k]) do
            local name = masterUpgradesDB[value]['name']
            local upSlot = masterUpgradesDB[value]['slot']
            fList.Upgrades[k][key] = {}
            fList.Upgrades[k][key]['name'] = name
            fList.Upgrades[k][key]['card'] = masterUpgradesDB[value]['card']
            for a,b in pairs(addAction) do --Upgrades that adds an action to a ship
                if a == value then
                    for K,V in pairs(b) do
                        table.insert(fList.Pilots[k]['Data']['actSet'],V)
                    end
                end
            end
            for a,b in pairs(addSqdAction) do --upgrades that adds an action to the whole squad, sets up a list of actions that will be added later
                if a == value then
                    for K,V in pairs(b) do
                        table.insert(fList.sqdAction,V)
                    end
                end
            end
            if masterUpgradesDB[value]['cardB'] ==  nil then
                fList.Upgrades[k][key]['cardB'] = cardBackDB[tostring(upSlot)]
            else
                fList.Upgrades[k][key]['cardB'] = masterUpgradesDB[value]['cardB']
            end
            if masterUpgradesDB[value]['Charge'] ~= nil then
                fList.Upgrades[k][key]['Charge'] = masterUpgradesDB[value]['Charge']
            else
                fList.Upgrades[k][key]['Charge'] = 0
            end
            if fList.Pilots[k]['Turret'] == nil then
                if masterUpgradesDB[value]['sTurret']  then
                    fList.Pilots[k]['Turret'] = 1
                    if fList.Pilots[k]['Data']['arcs'] == nil then
                        fList.Pilots[k]['Data']['arcs'] = {'singleturret'}
                    else
                        table.insert(fList.Pilots[k]['Data']['arcs'], 'singleturret')
                    end
                end
            end
            if masterUpgradesDB[value]['Force'] ~= nil then
                fList.Pilots[k]['Force'] = fList.Pilots[k]['Force'] + masterUpgradesDB[value]['Force']
            end
            if masterUpgradesDB[value]['shd'] ~= nil then
                fList.Pilots[k]['Shield'] = fList.Pilots[k]['Shield'] + masterUpgradesDB[value]['shd']
            end
            if masterUpgradesDB[value]['Condition'] ~= nil then
                fList.Upgrades[k][key]['Condition'] = masterUpgradesDB[value]['Condition']
            else
                fList.Upgrades[k][key]['Condition'] = false
            end
            if upSlot == 12 then
                fList.Pilots[k]['Bomb']= true
                if name == 'DRK-1 Probe Droids' then
                    fList.Pilots[k]['Bomb']= false
                end
            elseif upSlot == 18 then
                fList.Upgrades[k][key]['Config'] = true
            end
            if value == 279 then  -- Skilled Bombardier special drops
                skilled_bombardier = true
                --fList.Pilots[k]['bombD'] = fList.Pilots[k]['bombD'] ..  ':s2:tr2:te2:be2:br2'
            elseif value == 255 then  -- Trajectory Simulator special drop
                fList.Pilots[k]['bombD'] = fList.Pilots[k]['bombD'] ..  ':s5r'
            end
        end
        if skilled_bombardier then
            local bombD = fList.Pilots[k]['bombD']
            parts = mysplit(bombD,':')
            for k, part in pairs(parts) do
                pre, speedstr, post = string.match(part, "(%a+)(%d)(%a*)")
                speed = tonumber(speedstr)
                if speed > 1 then
                    bombD = bombD .. ":" .. pre .. tostring(speed - 1) ..  post
                end
                if (pre == 's' and (speed < 5)) or (speed < 3) then
                    bombD = bombD .. ":" .. pre .. tostring(speed + 1) ..  post
                end
            end
            fList.Pilots[k]['bombD'] = bombD
        end

    end
    for k,v in pairs(fList.sqdAction) do -- adds Squad actions coming from specific upgrades
        for K,V in pairs(fList.Pilots) do
            table.insert(V['Data']['actSet'],v)
        end
    end
    if savingList == true then
        saveToDisk(fList)
    else
        fList.spawnCard = self
        spawnNow(fList)
    end
end

cardLua = [[
self.createButton({
  click_function = 'spawnerCaller',
  function_owner = self,
  label          = 'Spawn',
  position       = {0,0.02,0.35},
  rotation       = {0,0,0},
  scale          = {0.1,0.1,0.1},
  width          = 2000,
  height         = 500,
  font_size      = 400,
  color          = 'Black',
  font_color     = 'White',
  tooltip        = 'Click here to spawn the saved list',
})

function spawnerCaller()
    spawnTable = self.getTable("List")
    spawnTable.spawnCard = self
    Global.call('newSpawner', spawnTable)
    spawnTable = nil
end

function onSave()
    if state == nil then
        local state = {cardData=self.getTable("List")}
        return JSON.encode(state)
    end
end

-- Restore self state
function onLoad(savedData)
    --print("OnLoad: ".. self.getName() .. " " .. savedData)
    if savedData ~= "" then
        self.setTable("List", JSON.decode(savedData).cardData)
    end
end
]]

function saveToDisk(finalList)
    print('Saving to Disk')
    local accBag = getObjectFromGUID('53ad3d')-- Accessories bag
    local accList = accBag.getObjects()
    for k, v in pairs(accBag.getObjects()) do
        if v.name == 'Data Card' then
            dataDisk = accBag.takeObject({position = {-66,1,-15}, rotation = {0,90,0},scale={3.75,3.75,3.75}, guid = v.guid})
            dataDiskClone = dataDisk.clone()
            accBag.putObject(dataDiskClone)
            dataDisk.setTable("List",finalList)
            dataDisk.setName("New Disk")
            dataDisk.setLuaScript(cardLua)
            print("Done")
        end
    end
end


-- Builder first step: sets up basic list table and select faction.
function builderStart()
    self.clearButtons()
    partList = {}
    partList.Pilots = {}
    partList.Upgrades = {}
    partList.spawnCard = self
    availablePilots = {}
    availableUps = {}
    shipSlots = {}
    currentIndex = nil
    totalCost = nil
    self.createButton({click_function = 'Dummy1', function_owner = self, label = 'Choose Faction', position = {0,0.45,-0.3}, width = 1800, height = 520, font_size = 240,  scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'buiReb', function_owner = self, label = 'Rebel', position = {-0.6,0.45,0.1}, width = 1000, height = 380, font_size = 200,  scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'buiImp', function_owner = self, label = 'Imperial', position = {-0.6,0.45,0.4}, width = 1000, height = 380, font_size = 200,  scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'buiScu', function_owner = self, label = 'Scum', position = {-0.6,0.45,0.7}, width = 1000, height = 380, font_size = 200,  scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'buiRes', function_owner = self, label = 'Resistance', position = {0,0.45,0.1}, width = 1000, height = 380, font_size = 200,  scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'buiFor', function_owner = self, label = 'First Order', position = {0,0.45,0.4}, width = 1000, height = 380, font_size = 200,  scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'initiate', function_owner = self, label = 'Back', position = {0.55,0.45,0.75}, width = 900, height = 320, font_size = 150,  scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'buiRep', function_owner = self, label = 'Republic', position = {0.6,0.45,0.1}, width = 1000, height = 380, font_size = 200,  scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'buiCis', function_owner = self, label = 'CIS', position = {0.6,0.45,0.4}, width = 1000, height = 380, font_size = 200,  scale = {0.25,0.25,0.25}})
end


-- One function for each faction, forwards to main menu.
function buiReb()
    partList.Faction = 1
    mainMenu()
end

function buiImp()
    partList.Faction = 2
    mainMenu()
end

function buiScu()
    partList.Faction = 3
    mainMenu()
end

function buiRes()
    partList.Faction = 4
    mainMenu()
end

function buiFor()
    partList.Faction = 5
    mainMenu()
end

function buiRep()
    partList.Faction = 6
    mainMenu()
end

function buiCis()
    partList.Faction = 7
    mainMenu()
end

function initialSetUp()

end

-- Main Menu: shows wich ship is on the list, indicates how many points is dedicated to each ship.
-- Offers 3 options: reset (Back to initiate), add ship and spawn.
function mainMenu()
    totalCost = {}
    self.clearButtons()
    self.createButton({click_function = 'addShip', function_owner = self, label = 'Add Ship', position = {-0.45,0.45,-0.3}, width = 1300, height = 380, font_size = 200,  scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'builderSpawn', function_owner = self, label = 'Spawn List', position = {0.45,0.45,-0.3}, width = 1300, height = 380, font_size = 200,  scale = {0.25,0.25,0.25}})
    for i, pilot in pairs(partList.Pilots) do
        local cost = pilot[3]
        for k,v in pairs (partList.Upgrades[i]) do
            if v[3]~= nil then
                cost = cost+v[3]
            end
        end
        self.createButton({click_function = 'selectShip'..i, function_owner = self, label = pilot[2]..' ('..cost..')', position = {-0.4,0.45,-0.2+i*0.15}, width = 1500, height = 300, font_size = 130,  scale = {0.25,0.25,0.25}})
        totalCost[i] = cost
    end
    listCost = 0
    for i, cost in pairs(totalCost) do
        listCost = listCost + cost
    end
    self.createButton({click_function = 'Dummy1', function_owner = self, label = 'List cost: '..listCost, position = {0.4,0.45,0.8}, width = 1300, height = 320, font_size = 150,  scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'initiate', function_owner = self, label = 'RESET', position = {-0.5,0.45,0.8}, width = 1300, height = 320, font_size = 150,  scale = {0.25,0.25,0.25}})
end

-- Adding a ship will open a list of all available ship types.
function addShip()
    self.clearButtons()
    if partList.Pilots == nil then
        shipIndex = 1
    else
        shipIndex=1
        for i, pilot in pairs(partList.Pilots) do
            shipIndex = shipIndex + 1
        end
    end
    local modelIndex = 1
    local aux = 1
    local auxB = 0
    availableShips = {}
    for i, shipModel in pairs(masterShipDB) do
        for k, fac in pairs (shipModel['Fac']) do
            if  k == partList.Faction then
                Font=100
                availableShips[modelIndex] = i
                if aux > 7 then
                    aux=1
                    auxB=auxB+1
                end
                if string.len(i)>18 then
                    Font = 80
                end
                self.createButton({click_function = 'selectModel'..modelIndex, function_owner = self, label = shipModel['name'], position = {-0.52+auxB*0.6,0.45,aux*0.16-0.35}, width = 1000, height = 220, font_size = Font,  scale = {0.25,0.25,0.25}})
                aux = aux+1
                modelIndex=modelIndex+1
            end
        end
    end
end


function selectModelGeneric(arg)
    chosenModel = availableShips[arg]
    availableShips = {}
    self.clearButtons()
    availablePilots = {}

    local aux = 0
    local auxB = 0
    local index = 1
    for k, v in pairs(masterPilotDB) do
        if v['ship_type'] == chosenModel then
            if v['Faction']==partList.Faction then
                cost = v['cost']
                availablePilots[index] = {}
                availablePilots[index][1] = k
                availablePilots[index][2] = v['name']
                availablePilots[index][3] = cost
                self.createButton({click_function = 'setPilot'..index, function_owner = self, label = v['name']..' ('..cost..')', position = {-0.5+auxB,0.45,-0.2+aux*0.15}, width = 1600, height = 220, font_size = 125,  scale = {0.25,0.25,0.25}})
                aux= aux+1
                if aux>6 then
                    aux = 0
                    auxB = auxB+1
                end
                index = index+1
            end
        end
    end
    chosenModel = nil
end

--selecting a ship type will open a list of every pilot for that ship. MUST REWRITE! 18 ship types, with more to come. Each option should set a variable and call an unified function to spawn the pilot buttons!
function selectModel1()
    selectModelGeneric(1)
end

function selectModel2()
    selectModelGeneric(2)
end

function selectModel3()
    selectModelGeneric(3)
end

function selectModel4()
    selectModelGeneric(4)
end

function selectModel5()
    selectModelGeneric(5)
end

function selectModel6()
    selectModelGeneric(6)
end

function selectModel7()
    selectModelGeneric(7)
end

function selectModel8()
    selectModelGeneric(8)
end

function selectModel9()
    selectModelGeneric(9)
end

function selectModel10()
    selectModelGeneric(10)
end

function selectModel11()
    selectModelGeneric(11)
end

function selectModel12()
    selectModelGeneric(12)
end

function selectModel13()
    selectModelGeneric(13)
end

function selectModel14()
    selectModelGeneric(14)
end

function selectModel15()
    selectModelGeneric(15)
end

function selectModel16()
    selectModelGeneric(16)
end

function selectModel17()
    selectModelGeneric(17)
end

function selectModel18()
    selectModelGeneric(18)
end

function selectModel19()
    selectModelGeneric(19)
end

function selectModel20()
    selectModelGeneric(20)
end


-- Selecting a pilot will add ship model and pilot to part list, update max index and go back to main menu. MUST REWRITE! Each pilot option should set variables and call an unified function to set up the part list!
function setPilotGeneric(arg)
    self.clearButtons()
    partList.Pilots[shipIndex] = {}
    partList.Pilots[shipIndex][1] = availablePilots[arg][1]
    partList.Pilots[shipIndex][2] = availablePilots[arg][2]
    partList.Pilots[shipIndex][3] = availablePilots[arg][3]
    partList.Upgrades[shipIndex] = {}
    for ind, slot in pairs(masterPilotDB[availablePilots[arg][1]]['slot']) do
        partList.Upgrades[shipIndex][ind] = {}
        partList.Upgrades[shipIndex][ind][4]= slot        --id of the slot
        local slotNam = slotName[slot]
        partList.Upgrades[shipIndex][ind][5]= slotNam     --String of the Slot Name
        partList.Upgrades[shipIndex][ind][6]=false        --slot has been removed? T for yes, F for no
    end
    availablePilots = nil
    mainMenu()
end


function setPilot1()
    setPilotGeneric(1)
end

function setPilot2()
    setPilotGeneric(2)
end

function setPilot3()
    setPilotGeneric(3)
end

function setPilot4()
    setPilotGeneric(4)
end

function setPilot5()
    setPilotGeneric(5)
end

function setPilot6()
    setPilotGeneric(6)
end

function setPilot7()
    setPilotGeneric(7)
end

function setPilot8()
    setPilotGeneric(8)
end

function setPilot9()
    setPilotGeneric(9)
end

function setPilot10()
    setPilotGeneric(10)
end

function setPilot11()
    setPilotGeneric(11)
end

function setPilot12()
    setPilotGeneric(12)
end

function setPilot13()
    setPilotGeneric(13)
end

function setPilot14()
    setPilotGeneric(14)
end

function setPilot15()
    setPilotGeneric(15)
end

function builderSpawn()
    finalList = {}
    finalList.Pilots = {}
    for i, pilot in pairs(partList.Pilots) do
        finalList.Pilots[i] = pilot[1]
    end
    finalList.Faction = partList.Faction
    finalList.spawnCard = partList.spawnCard
    finalList.Upgrades = {}
    for i, upList in pairs(partList.Upgrades) do
        finalList.Upgrades[i] = {}
        for k, Up in pairs(upList) do
            table.insert(finalList.Upgrades[i], Up[1])
        end
    end
    idSpawner(finalList)
end

-- Selecting a ship that is on the main menu will show wich slots are empty and wich ones are taken, indicating how many points are being used on this ship and how many points the list as a whole is using.
-- To Do: Set up auxiliary table with slots and upgrades so the correct buttons are spawned. Stablishes variables for special cases (Froce Powers, dual slots). Show point costs of each ship and full squad.
function selectShipGeneric(arg)
    self.clearButtons()
    local aux = 1
    local auxB = 0
    shipIndex = arg -- constant for the select ship number
    local index = 1
    availableSlots = {}
    addedSlot={}
    lastSlot=0
    slotNum=0
    totalCost[shipIndex] = 0
    pilotId= partList.Pilots[shipIndex][1]
    pilotName= partList.Pilots[shipIndex][2]
    shipCost= partList.Pilots[shipIndex][3]
    shipSlots[shipIndex]={}


    --Adds all possible slots for given ship
    for k, v in pairs(partList.Upgrades[shipIndex]) do
        partList.Upgrades[shipIndex][k][6] = true
    end


    for k, v in pairs(masterPilotDB[pilotId]['slot']) do
        slotNum=slotNum+1
        partList.Upgrades[shipIndex][k][6]=false
        addedSlot[slotNum]=true
    end

    --Checks and adds slot for every upgrade that adds a slot
    for k, Upg in pairs(partList.Upgrades[shipIndex]) do
        if Upg[1] ~=nil then
            if masterUpgradesDB[Upg[1]]['addSlot'] ~= nil then
                for i, addSlot in pairs(masterUpgradesDB[Upg[1]]['addSlot']) do
                    slotNum=slotNum+1
                    if partList.Upgrades[shipIndex][slotNum] == nil then
                        partList.Upgrades[shipIndex][slotNum] = {}
                        partList.Upgrades[shipIndex][slotNum][4] = addSlot
                        partList.Upgrades[shipIndex][slotNum][5] = slotName[addSlot]
                        partList.Upgrades[shipIndex][slotNum][6] = false
                        addedSlot[slotNum]=true
                    else
                        partList.Upgrades[shipIndex][slotNum][6] = false
                    end
                end
            end
        end
    end

    for k, Upg in pairs(partList.Upgrades[shipIndex]) do
        if Upg[1] ~=nil then
            if masterUpgradesDB[Upg[1]]['remSlot'] ~= nil then
                for u, s in pairs (masterUpgradesDB[Upg[1]]['remSlot']) do
                    local rem = true
                    for i, v in pairs (partList.Upgrades[shipIndex]) do
                        if v[4] == s and rem ==true then
                            v[6]=true
                            rem=false
                        end
                    end
                end
            end
        end
    end

    for k, v in pairs(partList.Upgrades[shipIndex]) do
        if v[6]==true then
            v[1]=nil
            v[2]=nil
            v[3]=nil
        end
    end

    for i, slots in pairs(partList.Upgrades[shipIndex]) do
        if aux > 5 then
            aux = 1
            auxB = auxB+1
        end
        if partList.Upgrades[shipIndex][i][6] == true then

        elseif partList.Upgrades[shipIndex][i][1] == nil then
            self.createButton({click_function = 'selectSlot'..i, function_owner = self, label = partList.Upgrades[shipIndex][i][5], position = {-0.4+auxB*0.8,0.45,-0.22+aux*0.15}, width = 1500, height = 300, font_size = 120,  scale = {0.25,0.25,0.25}})
            aux=aux+1
        else
            self.createButton({click_function = 'selectSlot'..i, function_owner = self, label = partList.Upgrades[shipIndex][i][2]..' ('..partList.Upgrades[shipIndex][i][3]..')', position = {-0.4+auxB*0.8,0.45,-0.22+aux*0.15}, width = 1500, height = 300, font_size = 120,  scale = {0.25,0.25,0.25}})
            aux=aux+1
        end
        local index=index+1
    end

    for i, pilot in pairs(partList.Pilots) do
        local cost = pilot[3]
        for k,v in pairs (partList.Upgrades[i]) do
            if v[3]~= nil then
                cost = cost+v[3]
            end
        end
        totalCost[i] = cost
    end
    listCost = 0
    for i, cost in pairs(totalCost) do
        listCost = listCost + cost
    end

    self.createButton({click_function = 'Dummy1', function_owner = self, label = partList.Pilots[shipIndex][2]..' ('..partList.Pilots[shipIndex][3]..')', position = {-0.3,0.45,-0.35}, width = 2000, height = 320, font_size = 150,  scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'mainMenu', function_owner = self, label = 'Back', position = { 0.5,0.45,-0.35}, width = 1000, height = 320, font_size = 150,  scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'removeShip', function_owner = self, label = 'Remove Ship', position = { 0.6,0.45,0.75}, width = 1000, height = 320, font_size = 150,  scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'Dummy1', function_owner = self, label = 'Ship cost: '..totalCost[shipIndex], position = {-0.6,0.45,0.8}, width = 1000, height = 220, font_size = 150,  scale = {0.25,0.25,0.25}})

    self.createButton({click_function = 'Dummy1', function_owner = self, label = 'List cost: '..listCost, position = {0,0.45,0.8}, width = 1000, height = 220, font_size = 150,  scale = {0.25,0.25,0.25}})
end

function removeShip()
    partList.Pilots[shipIndex] = nil
    partList.Upgrades[shipIndex] = nil
    totalCost[shipIndex] = nil
    for i, index in pairs(partList.Pilots) do
        if i > shipIndex then
            partList.Pilots[i-1] = partList.Pilots[i]
            partList.Pilots[i] = nil
            partList.Upgrades[i-1] = partList.Upgrades[i]
            partList.Upgrades[i] = nil
            totalCost[i-1] = totalCost[i]
            totalCost[i] = nil
        end
    end
    mainMenu()
end

function selectShip1()
    selectShipGeneric(1)
end

function selectShip2()
    selectShipGeneric(2)
end

function selectShip3()
    selectShipGeneric(3)
end

function selectShip4()
    selectShipGeneric(4)
end

function selectShip5()
    selectShipGeneric(5)
end

function selectShip6()
    selectShipGeneric(6)
end

function selectShip7()
    selectShipGeneric(7)
end

function selectShip8()
    selectShipGeneric(8)
end

function selectSlotGeneric(slotIndex)
    self.clearButtons()
    slotId = partList.Upgrades[shipIndex][slotIndex][4]             -- Value tied for this function!
    currSlotInd = slotIndex
    local index = 1
    local aux = 1
    local auxB = 0
    acailableUps = {}
    self.createButton({click_function = 'selectUpNone', label = 'None (0)', function_owner = self, position = {-0.45+auxB*0.6,0.45,-0.2}, width = 1500, height = 220, font_size = 120,  scale = {0.25,0.25,0.25}})
    for id, up in pairs(masterUpgradesDB) do
        if up['slot'] == slotId then
            local validUp=true
            if up['restriction']['Faction'] ~= nil then
                if up['restriction']['Faction'][partList.Faction]~=true then
                    validUp=false
                end
            end
            if up['restriction']['Size'] ~= nil then
                if up['restriction']['Size'][masterShipDB[masterPilotDB[partList.Pilots[shipIndex][1]]['ship_type']]['size']]~=true then
                    validUp=false
                end
            end
            if up['restriction']['ship'] ~= nil then
                if up['restriction']['ship'][masterPilotDB[partList.Pilots[shipIndex][1]]['ship_type']] ~= true then
                    validUp=false
                end
            end
            if validUp == true then
                if up['cost'] =='a' then
                    sAgi =   masterShipDB[masterPilotDB[ partList.Pilots[shipIndex][1] ]['ship_type'] ]['agi']
                    upCost = varCostA[id][sAgi]
                elseif up['cost'] == 's' then
                    sSize =   masterShipDB[masterPilotDB[ partList.Pilots[shipIndex][1] ]['ship_type'] ]['size']
                    upCost = varCostS[id][sSize]
                elseif up['cost'] == 'i' then
                    pInit = masterPilotDB[partList.Pilots[shipIndex][1]]['init']
                    upCost = varCostI[id][pInit]
                else
                    upCost = up['cost']
                end
                availableUps[index] = {[1]=id, [2]=up['name'], [3]=upCost}
                self.createButton({click_function = 'selectUp'..index, label = up['name']..' ('..upCost..')', function_owner = self, position = {-0.53+auxB*0.58,0.45,aux*0.1-0.1}, width = 1100, height = 200, font_size = 100,  scale = {0.25,0.25,0.25}})
                aux=aux+1
                index = index+1
                if aux > 8 then
                    aux=1
                    auxB=auxB+1
                end
                validUp= false
            end
        elseif slotId == 99 then
            local hpCheck={[3]=true,[5]=true,[6]=true}
            if hpCheck[up['slot']] == true then
                availableUps[index] = {[1]=id, [2]=up['name'], [3]=up['cost']}
                self.createButton({click_function = 'selectUp'..index, label = up['name']..' ('..up['cost']..')', function_owner = self, position = {-0.53+auxB*0.58,0.45,aux*0.1-0.1}, width = 1100, height = 200, font_size = 100,  scale = {0.25,0.25,0.25}})
                aux=aux+1
                index = index+1
                if aux > 8 then
                    aux=1
                    auxB=auxB+1
                end
            end
        end

    end

    self.createButton({click_function = 'backFromSelectUp', function_owner = self, label = 'Back', position = { 0.5,0.45,-0.35}, width = 1000, height = 320, font_size = 150,  scale = {0.25,0.25,0.25}})
end


function backFromSelectUp()
        if shipIndex == 1 then
            selectShip1()
        elseif shipIndex == 2 then
            selectShip2()
        elseif shipIndex == 3 then
            selectShip3()
        elseif shipIndex == 4 then
            selectShip4()
        elseif shipIndex == 5 then
            selectShip5()
        elseif shipIndex == 6 then
            selectShip6()
        elseif shipIndex == 7 then
            selectShip7()
        elseif shipIndex == 8 then
            selectShip8()
        end
    end

function selectSlot1()
    selectSlotGeneric(1)
end

function selectSlot2()
    selectSlotGeneric(2)
end

function selectSlot3()
    selectSlotGeneric(3)
end

function selectSlot4()
    selectSlotGeneric(4)
end

function selectSlot5()
    selectSlotGeneric(5)
end

function selectSlot6()
    selectSlotGeneric(6)
end

function selectSlot6()
    selectSlotGeneric(6)
end

function selectSlot7()
    selectSlotGeneric(7)
end

function selectSlot8()
    selectSlotGeneric(8)
end

function selectSlot9()
    selectSlotGeneric(9)
end

function selectSlot10()
    selectSlotGeneric(10)
end

function selectSlot11()
    selectSlotGeneric(11)
end

function selectSlot12()
    selectSlotGeneric(12)
end

function selectSlot13()
    selectSlotGeneric(13)
end

function selectSlot14()
    selectSlotGeneric(14)
end

function selectSlot14()
    selectSlotGeneric(14)
end

function selectSlot15()
    selectSlotGeneric(15)
end

function selectSlot16()
    selectSlotGeneric(16)
end

function selectSlot17()
    selectSlotGeneric(17)
end

function selectSlot18()
    selectSlotGeneric(18)
end

function selectSlot19()
    selectSlotGeneric(19)
end

function selectSlot99()
    selectSlotGeneric(99)
end


function selectUpNone()
    partList.Upgrades[shipIndex][currSlotInd][1] = nil     --first '1' tied to selectUp1, second value indicate the names
    partList.Upgrades[shipIndex][currSlotInd][2] = nil
    partList.Upgrades[shipIndex][currSlotInd][3] = nil
    if shipIndex == 1 then
        selectShip1()
    elseif shipIndex == 2 then
        selectShip2()
    elseif shipIndex == 3 then
        selectShip3()
    elseif shipIndex == 4 then
        selectShip4()
    elseif shipIndex == 5 then
        selectShip5()
    elseif shipIndex == 6 then
        selectShip6()
    elseif shipIndex == 7 then
        selectShip7()
    elseif shipIndex == 8 then
        selectShip8()
    end
end

function selectUpGeneric(arg)
    partList.Upgrades[shipIndex][currSlotInd][1] = availableUps[arg][1]      --first '1' tied to selectUp1, second value indicate the Id
    partList.Upgrades[shipIndex][currSlotInd][2] = availableUps[arg][2]      --first '1' tied to selectUp1, second value indicate the Name
    partList.Upgrades[shipIndex][currSlotInd][3] = availableUps[arg][3]      --first '1' tied to selectUp1, second value indicate the cost
    if shipIndex == 1 then
        selectShip1()
    elseif shipIndex == 2 then
        selectShip2()
    elseif shipIndex == 3 then
        selectShip3()
    elseif shipIndex == 4 then
        selectShip4()
    elseif shipIndex == 5 then
        selectShip5()
    elseif shipIndex == 6 then
        selectShip6()
    elseif shipIndex == 7 then
        selectShip7()
    elseif shipIndex == 8 then
        selectShip8()
    end
end

function selectUp1()
    selectUpGeneric(1)
end

function selectUp2()
    selectUpGeneric(2)
end

function selectUp3()
    selectUpGeneric(3)
end

function selectUp4()
    selectUpGeneric(4)
end

function selectUp5()
    selectUpGeneric(5)
end

function selectUp6()
    selectUpGeneric(6)
end

function selectUp7()
    selectUpGeneric(7)
end

function selectUp8()
    selectUpGeneric(8)
end

function selectUp9()
    selectUpGeneric(9)
end

function selectUp10()
    selectUpGeneric(10)
end

function selectUp11()
    selectUpGeneric(11)
end

function selectUp12()
    selectUpGeneric(12)
end

function selectUp13()
    selectUpGeneric(13)
end

function selectUp14()
    selectUpGeneric(14)
end

function selectUp15()
    selectUpGeneric(15)
end

function selectUp16()
    selectUpGeneric(16)
end

function selectUp17()
    selectUpGeneric(17)
end

function selectUp18()
    selectUpGeneric(18)
end

function selectUp19()
    selectUpGeneric(19)
end

function selectUp20()
    selectUpGeneric(20)
end

function selectUp21()
    selectUpGeneric(21)
end

function selectUp22()
    selectUpGeneric(22)
end

function selectUp23()
    selectUpGeneric(23)
end

function selectUp24()
    selectUpGeneric(24)
end

function selectUp25()
    selectUpGeneric(25)
end

function selectUp26()
    selectUpGeneric(26)
end

function selectUp27()
    selectUpGeneric(27)
end

function selectUp28()
    selectUpGeneric(28)
end





-- List Spawner starts here
-- First step: Create the table that ultimately will be provided to newSpawner. Then, inquires player wich faction his list belongs to.
function spawnerStart ()
    self.clearButtons()
    finalList = {}
    finalList.Pilots = {}
    finalList.Upgrades = {}
    finalList.Faction = 0
    finalList.Aux = {}
    finalList.AuxU = {}
    finalList.spawnCard = self
    self.createButton({click_function = 'Dummy1', function_owner = self, label = 'Choose Faction', position = {0,0.45,-0.3}, width = 1800, height = 520, font_size = 240,  scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'Reb', function_owner = self, label = 'Rebel', position = {-0.4,0.45,0}, width = 1200, height = 280, font_size = 200,  scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'Imp', function_owner = self, label = 'Imperial', position = {-0.4,0.45,0.2}, width = 1200, height = 280, font_size = 200,  scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'Rep', function_owner = self, label = 'Republic', position = {-0.4,0.45,0.4}, width = 1200, height = 280, font_size = 200,  scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'Res', function_owner = self, label = 'Resistance', position = {0.4,0.45,0}, width = 1200, height = 280, font_size = 200,  scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'For', function_owner = self, label = 'First Order', position = {0.4,0.45,0.2}, width = 1200, height = 280, font_size = 200,  scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'CIS', function_owner = self, label = 'CIS', position = {0.4,0.45,0.4}, width = 1200, height = 280, font_size = 200,  scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'Scu', function_owner = self, label = 'Scum', position = {-0.4,0.45,0.6}, width = 1200, height = 280, font_size = 200,  scale = {0.25,0.25,0.25}})


    self.createButton({click_function = 'initiate', function_owner = self, label = 'Back', position = {0.55,0.45,0.75}, width = 900, height = 320, font_size = 180,  scale = {0.25,0.25,0.25}})
end

--Set up faction in the table
function Reb()
    finalList.Faction = 1
    inputList()
end

function Imp()
    finalList.Faction = 2
    inputList()
end

function Scu()
    finalList.Faction = 3
    inputList()
end

function Res()
    finalList.Faction = 4
    inputList()
end

function For()
    finalList.Faction = 5
    inputList()
end

function Rep()
    finalList.Faction = 6
    inputList()
end

function CIS()
    finalList.Faction = 7
    inputList()
end

-- Dummy functions for label buttons
function Dummy()
end

function Dummy1()
    print('Please pick a faction')
end

function Dummy2()
    print('Please choose a ship for this pilot:')
end

function Dummy3()
    print('Please type or paste your list. Refer to the manual if help is needed formating the list!')
end

function Dummy4()
    print('Please choose a slot for this upgrade card:')
end

-- Second step: Create the input field where the list should be pasted/typed. Offers a button to spawn the list and a button to save to a data disk (FEATURE NOT IMPLEMENTED YET)
function inputList()
    savingList=false
    self.clearButtons()
    self.createButton({click_function = 'Dummy3', function_owner = self, label = 'Please type or paste your list', position = {-0,0.45,-0.4}, width = 2500, height = 280, font_size = 200, scale = {0.4,0.4,0.4}, tooltip = 'Click here to spawn yout list',  scale = {0.25,0.25,0.25}})
    --self.createButton({click_function = 'printInput', function_owner = self, label = 'print', position = {-0.5,0.45,-1}, width = 800, height = 240, font_size = 100, scale = {0.4,0.4,0.4}, tooltip = 'Click here to spawn yout list',  scale = {0.25,0.25,0.25}})
    self.createInput({input_function = 'action', function_owner = self, position = {0,0.45,0.12}, width = 3200, height = 1600, font_size = 200, scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'validCheck', function_owner = self, label = 'Spawn List', position = {-0.5,0.45,0.7}, width = 1400, height = 400, font_size = 200, scale = {0.4,0.4,0.4}, tooltip = 'Click here to spawn yout list',  scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'saveList', function_owner = self, label = 'Save to Disk', position = {0.5,0.45,0.7}, width = 1400, height = 400, font_size = 200, scale = {0.4,0.4,0.4}, tooltip = 'Click here to save your list in a data disk', scale = {0.25,0.25,0.25}})
end

-- This function is supposed to store the list in the script of the data disk object and set up a button wich will spawn the stored list calling the list parser and providing the string.
-- The disk can be saved in the TTS chest for easy retrieval. Could it be set up in a way to store and spawn several lists?

function saveList()
    print('Saving List')
    savingList = true
    validCheck()
end

-- print function to test the input
function printInput()
    print(lista)
    lista = string.gsub(lista, 'v2', '')
    print(lista)
end

-- Checks if the input is a valid string. If it is, call the list parser. If not, returns to the input list.
function validCheck()
    if lista == '' then
        Dummy3()
        inputList()
    else
        parseList()
    end
end

pilotsWithDash = {}
pilotsWithDash["g4r-gor v"] = true
pilotsWithDash["g4r-g0r v"] = true

alternateSpelling = {}
alternateSpelling["servomotor s-foils"] = 'Servomotor S-Foils (Open)'
alternateSpelling["pivot wing"] = 'Pivot Wing (Open)'
alternateSpelling["integrated s-foils"] = 'Integrated S-Foils (Open)'
alternateSpelling["grappling struts"] = 'Grappling Struts (Open)'
alternateSpelling["landing struts"] = 'Landing Struts (Open)'
alternateSpelling["stabilized s-foils"] = 'Stabilized S-Foils (Open)'
alternateSpelling["0-66"] = 'O-66'
alternateSpelling["g4r-gor v/m"] = 'G4R-G0R V/M'

-- Third Step: This function will decompose the input string and will propperly alocate each value on the propper position in the table.
-- Then, it calls for the next function, either inquiring for ships and version of upgrades or calling the spawner.
    function parseList()
        self.clearButtons()
        self.clearInputs()
        if lista ~= nil then
            parsedList = {}
            pilotsList = mysplit(lista, '/', true)
            local rest = ""
            for i, pilot in ipairs(pilotsList) do
                pilot = rest .. pilot
                if pilotsWithDash[string.lower(pilot)] ~= nil then
                    rest = pilot .. "/"
                else
                    table.insert(parsedList, mysplit(pilot,'+', true))
                    rest = ""
                end
            end
            pilotIndex = 0
            Aux = 0
            for i, pilot in ipairs(parsedList) do
                pilotIndex = pilotIndex + 1
                for k, cardN in ipairs(pilot) do
                    cardN = string.gsub(cardN, 'Hardpoint: ', '')
                    if alternateSpelling[string.lower(cardN)] ~= nil then
                        cardN = alternateSpelling[string.lower(cardN)]
                    end
                    if k == 1 then -- First card, the pilot
                        finalList.Aux[pilotIndex] = {}
                        finalList.AuxU[pilotIndex] = {}
                        local found = false
                        for id, pilot in pairs(masterPilotDB) do
                            if string.lower(pilot['name']) == string.lower(cardN) and pilot['Faction'] == finalList.Faction then
                                Aux = Aux + 1
                                finalList.Aux[pilotIndex][Aux] = id
                                finalList.Upgrades[pilotIndex] = {}
                                found = true
                            end
                        end
                        if not found then
                            printToAll("Unable to find pilot: " .. cardN .. " please check correct spelling", {1,0,0})
                            pilotIndex = pilotIndex - 1
                            break
                        end
                        if Aux == 1 then
                            finalList.Pilots[pilotIndex] = finalList.Aux[pilotIndex][1]
                            finalList.Aux[pilotIndex] = nil
                        end
                        Aux = 0
                    else -- The remaining cards, the upgrades
                        finalList.AuxU[pilotIndex][k] ={}
                        local found = false
                        for id, upg in pairs(masterUpgradesDB) do
                            if string.lower(upg['name']) == string.lower(cardN) then
                                found = true
                                if upg['restriction']['Faction'] == nil or upg['restriction']['Faction'][finalList.Faction] == true then
                                    Aux = Aux + 1
                                    finalList.AuxU[pilotIndex][k][Aux] = id
                                else
                                    printToAll('Upgrade "'.. cardN .. '" is restricted to another faction', {1,0,0})
                                end
                            end
                        end
                        if not found then
                            printToAll("Unable to find upgrade: " .. cardN .. " please check correct spelling", {1,0,0})
                            goto continue
                        end
                        if Aux == 1 then
                            finalList.Upgrades[pilotIndex][k-1] = finalList.AuxU[pilotIndex][k][Aux]
                            finalList.AuxU[pilotIndex][k] = nil
                        end
                        Aux = 0
                    end -- if Pilot and upgrade
                    ::continue::
                end -- for card
            end
            pChecker()
        else
            Dummy3()
            initiate()
        end
    end


-- Fourth step: This function checks for pilots with the same name in the same faction and stores de data por future inquire. If no inquire is needed, it calls the newSpawner function and reset all buttons.
function pChecker()
    repPN=0
    for i, pilot in pairs(finalList.Aux) do
        currPIndex = i
        repPL = {}
        for k, v in pairs(pilot) do
            repPL[k] = v
            repPN=repPN+1
        end
        pilot = nil
    end
    if repPN ~= 0 then
        pilotChoice(repPL)
    else
        uChecker()
    end
end

function uChecker()
    repUN=0
    repUL = {}
    for pilot, s in pairs(finalList.AuxU) do
        repUL[pilot] = {}
        for slot, up in pairs(s) do
            currIndex = pilot
            currSlot = slot
            repUL[pilot][currSlot] = {}
            for k,v in pairs(up) do
                repUL[pilot][slot][k] = v
                repUN=repUN+1
            end
        end
    end
    if repUN == 0 then
        repUL = nil
    end

    if repUN ~= 0 then
        upChoice(repUL)
    else
        idSpawner(finalList)
    end
end

-- luke skywalker+sense
-- luke skywalker + r2-d2
-- lando calrissian+han solo
-- sabine wren/luke skywalker + r2-d2
-- sabine wren/norra wexley+r2-d2
-- norra wexley+r2-d2/sabine wren
-- luke skywalker + r2-d2/sabine wren

-- Fifth Step: If pilots with several options of ships are present, for each pilot will create an inquire asking wich ship the pilot is in.
function pilotChoice(options)
    local name = (masterPilotDB[options[1]]['name'])
    local button1 = name..' ('.. masterShipDB[masterPilotDB[options[1]]['ship_type']]['name'] ..')'
    local button2 = name..' ('.. masterShipDB[masterPilotDB[options[2]]['ship_type']]['name'] ..')'
    self.clearButtons()
    self.createButton({click_function = 'Dummy2', function_owner = self, label = 'Please choose a ship for the following pilot', position = {0,0.45,-0.4}, width = 3400, height = 380, font_size = 170, scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'Dummy2', function_owner = self, label = name, position = {0,0.45,-0.1}, width = 1600, height = 380, font_size = 200, scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'setShip1', function_owner = self, label = button1, position = {0,0.45,0.1}, width = 2500, height = 380, font_size = 160, scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'setShip2', function_owner = self, label = button2, position = {0,0.45,0.3}, width = 2500, height = 380, font_size = 160, scale = {0.25,0.25,0.25}})
    if #options == 3 then
        local button3 = name..' ('.. masterShipDB[masterPilotDB[options[3]]['ship_type']]['name'] ..')'
        self.createButton({click_function = 'setShip3', function_owner = self, label = button3, position = {0,0.45,0.5}, width = 2500, height = 380, font_size = 180, scale = {0.25,0.25,0.25}})
    end
end



-- Stores the ship option for each pilot if needed. If there is no other inquire needed, will call upgrade inquire if need, if not, will call the newSpawner function.
function setShip1()
    finalList.Pilots[currPIndex] = repPL[1]
    finalList.Aux[currPIndex] = nil
    repPL = nil
    repPN= 0
    repUN= 0
    currPIndex = nil
    pChecker()
end

function setShip2()
    finalList.Pilots[currPIndex] = repPL[2]
    finalList.Aux[currPIndex] = nil
    repPL = nil
    repPN= 0
    repUN= 0
    currPIndex = nil
    pChecker()
end

function setShip3()
    finalList.Pilots[currPIndex] = repPL[3]
    finalList.Aux[currPIndex] = nil
    repPL = nil
    repPN= 0
    repUN= 0
    currPIndex = nil
    pChecker()
end

slotName = {}
slotName[1] = 'Talent' -- EPT
slotName[2] = 'Sensors' -- Sensor
slotName[3] = 'Cannon' -- Cannon
slotName[4] = 'Turret' -- Turret
slotName[5] = 'Torpedo' -- Torpedo
slotName[6] = 'Missile' -- Missile
slotName[7] = '' --
slotName[8] = 'Crew' -- Crew
slotName[9] = ''
slotName[10] = 'Astromech' --Astromech
slotName[11] = ''
slotName[12] = 'Device' -- Device
slotName[13] = 'Illicit' -- Ilicit
slotName[14] = 'Modification' -- Modification
slotName[15] = 'Title' -- Title
slotName[16] = 'Gunner' -- Gunner
slotName[17] = 'Force Talent' -- Force Power
slotName[18] = 'Configuration' -- Configuration
slotName[19] = 'Tech' -- Tech
slotName[20] = 'Relay' -- Relay
slotName[99] = 'HardPoint' -- Hardpoint



-- Sixth Step: If Upgrades with several options in the same faction are present, for each upgrade will create an inquire asking wich slot the upgrade is in.
function upChoice(options)
    local name = (masterUpgradesDB[options[currIndex][currSlot][1]]['name'])
    local Up1 = slotName[masterUpgradesDB[options[currIndex][currSlot][1]]['slot']]
    local Up2 = slotName[masterUpgradesDB[options[currIndex][currSlot][2]]['slot']]
    self.clearButtons()
    self.createButton({click_function = 'Dummy4', function_owner = self, label = 'Please choose a slot for the following upgrade', position = {0,0.45,-0.4}, width = 3400, height = 380, font_size = 170, scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'Dummy4', function_owner = self, label = name, position = {0,0.45,-0.1}, width = 1600, height = 380, font_size = 200, scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'setUp1', function_owner = self, label = Up1, position = {0,0.45,0.1}, width = 1200, height = 380, font_size = 180, scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'setUp2', function_owner = self, label = Up2, position = {0,0.45,0.3}, width = 1200, height = 380, font_size = 180, scale = {0.25,0.25,0.25}})
    if options == 3 then
        local Up3 = slotName[masterUpgradesDB[options[currIndex][currSlot][3]]['slot']]
        self.createButton({click_function = 'setUp3', function_owner = self, label = Up3, position = {0,0.45,0.8}, width = 1200, height = 380, font_size = 180, scale = {0.25,0.25,0.25}})
    end
end

function setUp1()
    finalList.Upgrades[currIndex][currSlot-1] = finalList.AuxU[currIndex][currSlot][1]
    finalList.AuxU[currIndex][currSlot] = nil
    repUL = nil
    repUN= 0
    currSlot = nil
    currIndex = nil
    uChecker()
end

function setUp2()
    finalList.Upgrades[currIndex][currSlot-1] = finalList.AuxU[currIndex][currSlot][2]
    finalList.AuxU[currIndex][currSlot] = nil
    repUL = nil
    repUN= 0
    currSlot = nil
    currIndex = nil
    uChecker()
end

function setUp3()
    finalList.Upgrades[currIndex][currSlot-1] = finalList.AuxU[currIndex][currSlot][3]
    finalList.AuxU[currIndex][currSlot] = nil
    repUL = nil
    repUN= 0
    currSlot = nil
    currIndex = nil
    uChecker()
end

variableCostSizeDB={}
variableCostSizeDB['engine upgrade'] = {['Small'] = 3, ['Medium'] = 6,['Large'] = 9}
variableCostSizeDB['expert handling'] = {['Small'] = 2, ['Medium'] = 3,['Large'] = 4}

variableCostAgiDB={}
variableCostAgiDB['hull upgrade'] = {[0] = 3,[1] = 4,[2] = 6,[3] = 8}
variableCostAgiDB['shield upgrade'] = {[0] = 3,[1] = 4,[2] = 6,[3] = 8}
variableCostAgiDB['stealth device'] = {[0] = 3,[1] = 4,[2] = 6,[3] = 8}

-- This function reads the list and informs the point cost of each ship, as well as the total point cost of the list, and offers the option either to cancel (and restorat) or to spawn the list.
function spawnCaller(arg)
    self.clearButtons()
    local aux = 0
    local auxB= 0
    local index = 1
    local cost = {}
    totalCost=0
    self.createButton({click_function = 'spawnProxy', function_owner = self, label = 'Spawn', position = {0,0.45,-0.4}, width = 1200, height = 380, font_size = 180, scale = {0.25,0.25,0.25}})
    for i, pilot in ipairs(arg.Pilots) do
        for k, pilots in pairs(shipPilotsDB[arg.Faction][arg.Ship[i]]) do
            if string.lower(pilot) == string.lower(k) then
                cost[i] = pilots['Cost']
            end
        end
        for k, ups in ipairs(arg.Upgrades[index]) do
            for x, slot in pairs(UpDB[arg.Faction]) do
                for z, up in pairs(UpDB[arg.Faction][x]) do
                    if string.lower(z) == string.lower(ups) then
                        cost[i] = cost[i]+up
                    end
                end
            end
            if variableCostSizeDB[string.lower(ups)] ~= nil then
                local size = shipPilotsDB[arg.Faction][arg.Ship[index] ]['Base']
                cost[i] = cost[i]+variableCostSizeDB[string.lower(ups)][size]
            elseif variableCostAgiDB[string.lower(ups)] ~= nil then
                local agi = shipPilotsDB[arg.Faction][arg.Ship[index] ]['Agility']
                cost[i] = cost[i]+variableCostAgiDB[string.lower(ups)][agi]
            else
                for x, slot in pairs(UpDB['Neu']) do
                    for z, up in pairs(UpDB['Neu'][x]) do
                        if string.lower(z) == string.lower(ups) then
                            cost[i] = cost[i]+up
                        end
                    end
                end
            end
        end
        self.createButton({click_function = 'Dummy', function_owner = self, label = arg.Pilots[i]..' ('..cost[i]..')', position = {-0.45+auxB*0.96,0.45,0.15*aux-0.2}, width = 1800, height = 250, font_size = 135, scale = {0.25,0.25,0.25}})
        aux=aux+1
        if aux>3 then
            aux=0
            auxB=1
        end
        index=index+1
        totalCost=totalCost+cost[i]
    end
    self.createButton({click_function = 'Dummy', function_owner = self, label = 'Total Cost ('..totalCost..')', position = {0,0.45,0.6}, width = 1800, height = 250, font_size = 150, scale = {0.25,0.25,0.25}})
    self.createButton({click_function = 'initiate', function_owner = self, label = 'Cancel', position = {0.5,0.45,0.75}, width = 1800, height = 250, font_size = 150, scale = {0.25,0.25,0.25}})

end

function spawnProxy()
    spawnNow(finalList)
end

-- Calls the newSpawner, wich will set up a propper postition for the spawning ships (POSITION NEEDS TO BE REFERCENCED TO SELF, NOT GLOBAL)
function spawnNow(arg)
    storePos = self.getPosition()
    pos = LocalPos(self, {3.5, 1, 4})
    rot = self.getRotation()
    self.setPosition(pos)
    self.setRotation({0,rot.y,rot.z})
    Global.call('newSpawner', arg)
    self.setPosition(storePos)
    self.setRotation(rot)
    initiate()
end


-- String split function
function mysplit(inputstr, sep, trim)
    if inputstr ~= nil then
        if sep == nil then
          sep = "%s"
        end
        local t={}
        for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
            if trim then
                str = str:match'^%s*(.*%S)' or ''
            end
            if str ~= "" then
                table.insert(t, str)
            end
        end
        return t
    end
end




-------
-- Local Reference function, for spawning items relative to the quick build card
function LocalPos(object, position)
    local rot = object.getRotation()
    local lPos = {position[1], position[2], position[3]}
    -- Z-X-Y extrinsic
    local zRot = RotMatrix('z', rot['z'])
    lPos = RotateVector(zRot, lPos)
    local xRot = RotMatrix('x', rot['x'])
    lPos = RotateVector(xRot, lPos)
    local yRot = RotMatrix('y', rot['y'])
    lPos = RotateVector(yRot, lPos)

    return Vect_Sum(lPos, object.getPosition())
end



function RotMatrix(axis, angDeg)
    local ang = math.rad(angDeg)
    local cs = math.cos
    local sn = math.sin

    if axis == 'x' then
        return {
                    { 1,        0,             0 },
                    { 0,   cs(ang),   -1*sn(ang) },
                    { 0,   sn(ang),      cs(ang) }
               }
    elseif axis == 'y' then
        return {
                    {    cs(ang),   0,   sn(ang) },
                    {          0,   1,         0 },
                    { -1*sn(ang),   0,   cs(ang) }
               }
    elseif axis == 'z' then
        return {
                    { cs(ang),   -1*sn(ang),   0 },
                    { sn(ang),      cs(ang),   0 },
                    { 0,                  0,   1 }
               }
    end
end

-- Apply given rotation matrix on given vector
-- (multiply matrix and column vector)
function RotateVector(rotMat, vect)
    local out = {0, 0, 0}
    for i=1,3,1 do
        for j=1,3,1 do
            out[i] = out[i] + rotMat[i][j]*vect[j]
        end
    end
    return out
end

-- Sum of two vectors (of any size)
function Vect_Sum(vec1, vec2)
    local out = {}
    local k = 1
    while vec1[k] ~= nil and vec2[k] ~= nil do
        out[k] = vec1[k] + vec2[k]
        k = k+1
    end
    return out
end

------
